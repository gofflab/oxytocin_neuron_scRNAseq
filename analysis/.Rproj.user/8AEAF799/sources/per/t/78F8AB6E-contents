---
title: "Ntsr1 single cell Gencode vM8 and DeCoN lncRNAs -- Phase 3: EDP L6CthPN"
author: "Loyal Goff"
date: "November 7th, 2016"
output: html_document
---

```{r init}
source('init.R')

```

# Import data from cuffnorm and package into monocle CellDataSet object

```{r import}
#Gene FPKMs
fpkms<-read.delim("genes.fpkm_table",row.names=1)
gene_ann<-read.delim("genes.attr_table")
rownames(gene_ann)<-gene_ann$tracking_id

#Isoform FPKMs
isoform_fpkms<-read.delim("isoforms.fpkm_table",row.names=1)
rownames(isoform_fpkms) <- isoform_fpkms$tracking_id



#Sample Annotation
sample_ann<-read.delim("samples.table")

sample_ann$cell_id<-unlist(lapply(as.character(sample_ann$sample_id),function(x){substr(x, 1, nchar(x)-2)}))

master_cell_sheet<-read.delim("Master_Ntsr1_worksheet_11-4-16.txt",stringsAsFactors=T,na.string="N/A")

sample_info<-merge(sample_ann,master_cell_sheet,by.x='cell_id',by.y='cell_id',all.x=TRUE,sort=FALSE)
rownames(sample_info)<-sample_info$cell_id
colnames(fpkms)<-sample_info$cell_id
colnames(isoform_fpkms)<-sample_info$cell_id
#sample_info<-sample_info[,-1]

gene_info<-read.delim("gencode.vM8.transcripts.filtered.gene_annotation.tab")
#rownames(gene_info)<-gene_info$gene_id
keyCols<-c("gene_status",'level','gene_type')
gene_info[,keyCols]

tmp<-merge(gene_ann,gene_info[,keyCols],by=0,sort=FALSE,all.x=TRUE)
rownames(tmp)<-tmp$Row.names
tmp<-tmp[,-1]

gene_ann<-tmp[rownames(fpkms),]

lncRNA_geneIds<-rownames(gene_info)[gene_info$transcript_name == "lincRNA"]

fd<-new("AnnotatedDataFrame",data=gene_ann)
pd<-new("AnnotatedDataFrame",data=sample_info)
#rownames(pd)<-make.names(sample_ann$sample_id)


dat.relative <- newCellDataSet(as(as.matrix(fpkms), "sparseMatrix"),
                      phenoData=pd,
                      featureData=fd)

#PCA to identify crazy outliers
tmp<-prcomp(t(exprs(dat.relative)),.scale=F,center=F)

badCells<-names(which.max(tmp$x[,2]))


fpkm_matrix_adj <- relative2abs(dat.relative[,!colnames(dat.relative) %in% badCells], t_estimate=estimate_t(isoform_fpkms[,!colnames(isoform_fpkms) %in% badCells]),cores=detectCores()-1)

# Or alternatively calculate on a model that accounts for labeling
#fpkm_matrix_adj <- relative2abs(dat.relative, t_estimate=estimate_t(isoform_fpkms),modelStrFormula="~color", cores=6)

dat <- newCellDataSet(as(as.matrix(fpkm_matrix_adj),"sparseMatrix"),
                      phenoData = pd[!rownames(pd) %in% badCells,],
                      featureData=fd,
                      expressionFamily=negbinomial.size(),
                      lowerDetectionLimit=1)

```

```{r model_prep_pre_filter}
badCells<-c(badCells,"131194_NTWN1_3_B08")
dat<-dat[,!colnames(dat) %in% badCells]
dat <-estimateSizeFactors(dat)

#default
dat <-estimateDispersions(dat,cores=6)

```


# QC plots, summary stats, and filtering
```{r copies_per_cell_qc}
#Calculate total RNA mass per cell
pData(dat)$Total_mRNAs <- Matrix::colSums(exprs(dat))

dat<-dat[,pData(dat)$Total_mRNAs < 300000]

#plot(colSums(exprs(dat)),colSums(round(exprs(dat))),pch=20,main="Copies per cell vs Rounded copies per cell")
#abline(0,1)

hist(pData(dat)$Total_mRNAs,breaks=100,col="darkgreen",main="Distribution of mRNA copies per cell")


```

```{r QC_and_Filtering}
# 2000-1000000
validcells <- row.names(subset(pData(dat), Total_mRNAs >= 2000 & Total_mRNAs <= 1000000))

dat.filtered <- dat[,row.names(pData(dat)) %in% validcells]

```

```{r filter_by_num_genes_expressed}

dat.filtered<-detectGenes(dat.filtered,min_expr=0.1)

hist(pData(dat.filtered)$num_genes_expressed,breaks=50,col="steelblue",main="Genes expressed per cell")
hist(fData(dat.filtered)$num_cells_expressed,breaks=50,col="red",main="Cells expressed per gene")

#Expressed genes with expression in >=15 cells
numCellThreshold<-15 # Maybe lower this
expressed_genes<-row.names(subset(fData(dat.filtered),num_cells_expressed >= numCellThreshold))

hist(fData(dat.filtered)$num_cells_expressed,breaks=50,col="red",main="Cells expressed per gene - threshold")
abline(v=numCellThreshold,lty="dashed")

###
# High-coverage =  mass >= 5e+04
####
massThreshold<-1e+05
hist(pData(dat.filtered)$total_mass,breaks=50,col="darkgreen",main="Distribution of Total mass by cell")
abline(v=massThreshold,lty="dashed")

dat.filtered<-dat.filtered[,row.names(subset(pData(dat.filtered),total_mass >= massThreshold))]
dat.filtered<-detectGenes(dat.filtered,min_expr=1)

expressed_genes <- row.names(subset(fData(dat.filtered), 
                                    num_cells_expressed >= numCellThreshold))
                                      #gene_type %in% c("protein_coding", "lincRNA")))

#Total mRNAs

hist(pData(dat.filtered)$Total_mRNAs,breaks=50,col="purple",main="Distribution of Total RNAs by cell")
upper_mRNA_threshold<-200000
abline(v=upper_mRNA_threshold,lty="dashed")

dat.filtered<-dat.filtered[,row.names(subset(pData(dat.filtered),Total_mRNAs <= upper_mRNA_threshold))]
dat.filtered<-detectGenes(dat.filtered,min_expr=1)

expressed_genes <- row.names(subset(fData(dat.filtered), 
                                    num_cells_expressed >= numCellThreshold))

#Need to remove two bad cells (131194_NTWN1_1_D10,131194_NTWN1_1_F09)
dat.filtered<-dat.filtered[,!rownames(pData(dat.filtered)) %in% c("131194_NTWN1_1_D10","131194_NTWN1_1_F09")]


p <- ggplot(pData(dat.filtered))
p + geom_bar(aes(x=factor(label_fixed),fill=factor(label_fixed)),width=0.5)+facet_grid(Day~label_fixed,scales="free_x") + ggtitle("Valid Cells per condition") + theme_bw() + scale_fill_manual(values=c("red","darkgreen")) 

pdf("cells_passing_filters.pdf")
p + geom_bar(aes(x=factor(label_fixed),fill=factor(label_fixed)),width=0.5)+facet_grid(Day~label_fixed,scales="free_x") + ggtitle("Valid Cells per condition") + theme_bw() + scale_fill_manual(values=c("red","darkgreen")) 
dev.off()

```

# Differential Expression

## Regress out num_genes_expressed
- Dominates PC1
- contributes significantly to batch effect
- may help or hurt cell type calls

```{r, eval=FALSE}
# saveRDS(dat.filtered,file="dat.filtered.rds")
# 
# dat.filtered<-dat.filtered[expressed_genes,]
# FM<-exprs(dat.filtered)
# 
# X.model_mat <- sparse.model.matrix(as.formula("~num_genes_expressed"), 
#                                        data = pData(dat.filtered), drop.unused.levels = TRUE)
# 
# fit <- limma::lmFit(FM, X.model_mat)
# beta <- fit$coefficients[, -1, drop = FALSE]
# beta[is.na(beta)] <- 0
# FM <- as.matrix(FM) - beta %*% t(X.model_mat[, -1])
# #dat.corrected<-dat.filtered[expressed_genes,]
# 
# exprs(dat.filtered)<-FM
```


## Model prep
```{r model_prep_post_filter}
dat.filtered <-estimateSizeFactors(dat.filtered)

#default
dat.filtered <-estimateDispersions(dat.filtered,modelFormulaString="animal",cores=6)

```

```{r adjust_factor_levels}
levels(pData(dat.filtered)$hemisphere_fixed) <- c(levels(pData(dat.filtered)$hemisphere_fixed), "Unk")
pData(dat.filtered)$hemisphere_fixed[is.na(pData(dat.filtered)$hemisphere_fixed)]<-"Unk"

pData(dat.filtered)$phase1_kmeans_cluster<-as.factor(pData(dat.filtered)$phase1_kmeans_cluster)
levels(pData(dat.filtered)$phase1_kmeans_cluster) <- c(levels(pData(dat.filtered)$phase1_kmeans_cluster), "Unk")
pData(dat.filtered)$phase1_kmeans_cluster[is.na(pData(dat.filtered)$phase1_kmeans_cluster)]<-"Unk"

#hemi_wrt_whisker_pull
levels(pData(dat.filtered)$hemi_wrt_whisker_pull) <- c(levels(pData(dat.filtered)$hemi_wrt_whisker_pull), "Unk")
pData(dat.filtered)$hemi_wrt_whisker_pull[is.na(pData(dat.filtered)$hemi_wrt_whisker_pull)]<-"Unk"

```

# Annotate cell types using previous DE genes

```{r Phase1_DE_genes}
Phase1_sigGenes<-as.character(read.delim("Phase1_sigGenes_by_celltype.tab",header=F)[,1])
```

```{r Phase1_module_eigengenes}

```

```{r summary_stats_on_celltype}
fData(dat.filtered)$celltype1_Day0_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day0"]),1,mean)
fData(dat.filtered)$celltype2_Day0_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day0"]),1,mean)

fData(dat.filtered)$celltype1_Day1_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day1"]),1,mean)
fData(dat.filtered)$celltype2_Day1_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day1"]),1,mean)

fData(dat.filtered)$celltype1_Day7_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day7"]),1,mean)
fData(dat.filtered)$celltype2_Day7_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day7"]),1,mean)

fData(dat.filtered)$short_gene_id<-str_split_fixed(fData(dat.filtered)$tracking_id,"\\.",2)[,1]

write.table(fData(dat.filtered),file="Phase3.dat.filtered.fData.tab",quote=F,sep="\t",row.names=F,col.names=T)
```


## tSNE on previous DE genes
```{r }
dat.high_var<-dat.filtered
dat.pca<-prcomp(t(log10(exprs(dat.high_var[rownames(dat.high_var) %in% Phase1_sigGenes,])+1)),center=T,scale=F)

#dat.pca<-prcomp(t(vstExprs(dat.high_var[rownames(dat.high_var) %in% Phase1_sigGenes,])),center=T,scale=F)


hvPCA1<-ggbiplot(dat.pca,choices=c(1,2),scale=0,groups=pData(dat.filtered)$label_fixed,ellipse=T,var.axes=F) + scale_color_manual(values=c("red","darkgreen")) + monocle:::monocle_theme_opts()
hvPCA2<-ggbiplot(dat.pca,choices=c(1,2),scale=0,groups=factor(pData(dat.filtered)$phase1_kmeans_cluster),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA3<-ggbiplot(dat.pca,choices=c(1,2),scale=0,groups=pData(dat.filtered)$phase1_kmeans_cluster,ellipse=T,var.axes=F) + monocle:::monocle_theme_opts()
grid.arrange(hvPCA1,hvPCA2,hvPCA3,ncol=3)

nComponents<-2

seed<-round(runif(1,1,99999)) # comment out after chosen seed
#seed <- 56577
set.seed(seed)

dat.filtered.celltype.tsne<-Rtsne(dat.pca$x[,1:nComponents],perplexity=60,max_iter=1500,pca=TRUE,verbose=T)

dat.filtered.celltype<-copy(dat.filtered) # This is bad make sure you deep copy so as not by reference.

pData(dat.filtered.celltype)$tSNE1_pos<-dat.filtered.celltype.tsne$Y[,1]
pData(dat.filtered.celltype)$tSNE2_pos<-dat.filtered.celltype.tsne$Y[,2]



#myTSNEPlotAlpha(dat.filtered.celltype,color="label_fixed", shape="hemi_wrt_whisker_pull",cell_size=3) + scale_color_manual(values=label_colors)
```

```{r biSNE_ish,eval=FALSE,echo=FALSE}
tSNE_distance<-as.matrix(dist(dat.filtered.celltype.tsne$Y))
diag(tSNE_distance)<-0
IDM<-1/tSNE_distance
diag(IDM)<-0

toGauss<-function(x,sigma){ #Not ready for prime time
  #stdev<-sd(x)
  val<-(1/(sigma*sqrt(2*pi)))*exp(-((x-mean(x))**2/2*(sigma**2)))
  return(val)
}

# fData(dat.filtered)$moran.p.value<-NA
# #fData(dat.filtered[expressed_genes,])$moran.p.value
# moran.p.values<-apply(vstExprs(dat.filtered[expressed_genes,]),1,function(x){
#   moran<-Moran.I(x,toGauss(tSNE_distance,sigma=20))
#   #moran<-Moran.I(x,IDM)
#   moran$p.value
#   })
# 
# min(moran.p.values)
# 
# #plot(density(moran.p.values))
# #plot(density(-log10(moran.p.values)))
# 
# moran.sigGenes<-names(moran.p.values)[moran.p.values<0.001]
# 
# myTSNEPlotAlpha(dat.filtered,color="celltype", shape="hemi_wrt_whisker_pull",cell_size=3,markers=lookupGeneName(dat.filtered,sample(moran.sigGenes,10))) + scale_color_manual(values=celltype_colors)
# 
# dat.filtered.spatial.tsne<-Rtsne(as.matrix(t(vstExprs(dat.filtered[moran.sigGenes,]))),perplexity=60,max_iter=1000,pca=TRUE,verbose=T)
# 
# pData(dat.filtered)$tSNE1_pos<-dat.filtered.spatial.tsne$Y[,1]
# pData(dat.filtered)$tSNE2_pos<-dat.filtered.spatial.tsne$Y[,2]
# 
# myTSNEPlotAlpha(dat.filtered,color="Day", shape="hemisphere_fixed",cell_size=3)
# 
# myTSNEPlotAlpha(dat.filtered,color="celltype", shape="hemisphere_fixed",cell_size=3) + scale_color_manual(values=celltype_colors)
```



```{r clustering_on_tSNE}
#celltype_clustering<-Mclust(dat.filtered.celltype.tsne$Y,G=2)
plot(celltype_clustering)

pData(dat.filtered)$celltype<-celltype_clustering$classification
pData(dat.filtered)$celltype<-as.factor(pData(dat.filtered)$celltype)
#pData(dat.filtered)$celltype<-as.factor(mapvalues(pData(dat.filtered)$celltype, from = c(1, 2), to = c(2, 1)))

myTSNEPlotAlpha(dat.filtered,color="label_fixed",cell_size=3)+ scale_color_manual(values=label_colors)

myTSNEPlotAlpha(dat.filtered,color="phase1_kmeans_cluster",cell_size=3)
myTSNEPlotAlpha(dat.filtered,color="celltype",shape="Day",cell_size=3) + scale_color_manual(values=celltype_colors)

pdf("Celltype_annotation_after_EDP.pdf",width=8,height=4)
p1<-myTSNEPlotAlpha(dat.filtered.celltype,color="phase1_kmeans_cluster",cell_size=1) + coord_equal(2) + guides(color=FALSE)
p2<-myTSNEPlotAlpha(dat.filtered.celltype,color="celltype",cell_size=1)+ scale_color_manual(values=celltype_colors) + coord_equal(2) + guides(color=FALSE)
p3<-myTSNEPlotAlpha(dat.filtered.celltype,color="label_fixed",cell_size=1)+ scale_color_manual(values=label_colors) + coord_equal(2) + guides(color=FALSE)

grid.arrange(p1,p2,ncol=2)
dev.off()
```

# Projection of original modules into Phase3 data

```{r moduleProjection}
orig.modules<-read.delim("geneModuleMembership.tab")
require(projectR)
moduleProjections<-projectR(as.matrix(log10(exprs(dat.filtered)+1)),Patterns=as.matrix(orig.modules))

rownames(moduleProjections)<-colnames(orig.modules)

projectionData<-cbind(pData(dat.filtered),t(moduleProjections))

#module<-"MMgreen"
pdf("Module_projections_in_EDP_data.pdf",width=15,height=5)
for(module in colnames(orig.modules)){
  print(module)
p1<-ggplot(projectionData) + 
  geom_boxplot(aes_string(x='celltype',fill="Day",y=module),width=0.75) + 
  #geom_jitter(aes_string(x='celltype',y=module,color='Day'),width=0.5,height=0)  + 
  monocle:::monocle_theme_opts() + scale_color_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") + ggtitle(module) #+ scale_y_continuous(limits=c(-1,3),oob=squish)
p1

p2<-ggplot(projectionData) + 
  #geom_jitter(aes_string(x='Day',y=module,color='celltype'),width=0.5,height=0)  + 
  geom_boxplot(aes_string(x='Day',fill="celltype",y=module),width=0.75) + 
  monocle:::monocle_theme_opts() + scale_color_manual(values=celltype_colors) + scale_fill_manual(values=celltype_colors) + ggtitle(module) #+ scale_y_continuous(limits=c(-1,3),oob=squish)
p2

p3<-ggplot(projectionData) + 
  geom_point(aes_string(x='Pseudotime',y=module,color="factor(celltype)")) + 
  monocle:::monocle_theme_opts() + scale_color_manual(values=celltype_colors) + ggtitle(module)
p3
print(grid.arrange(p1,p2,p3,ncol=3))
}
dev.off()

projection_tests<-data.frame("module"=NA,"celltype"=0,"comparison"="fake","ttest"=-1,"log2FC_mean"=NA,stringsAsFactors=FALSE)
for(module in colnames(orig.modules)){
  print(module)
  for(celltype in c(1:2)){
    tmp<-t.test(projectionData[projectionData$Day=="Day0",module],projectionData[projectionData$Day=="Day1",module])
    projection_tests<-rbind(projection_tests,c(module,celltype,"Day0vsDay1",tmp$p.value,log2(tmp$estimate[2]/tmp$estimate[1])))
     tmp<-t.test(projectionData[projectionData$Day=="Day1",module],projectionData[projectionData$Day=="Day7",module])
    projection_tests<-rbind(projection_tests,c(module,celltype,"Day1vsDay7",tmp$p.value,log2(tmp$estimate[2]/tmp$estimate[1])))
     tmp<-t.test(projectionData[projectionData$Day=="Day0",module],projectionData[projectionData$Day=="Day7",module])
    projection_tests<-rbind(projection_tests,c(module,celltype,"Day0vsDay7",tmp$p.value,log2(tmp$estimate[2]/tmp$estimate[1])))
  }
}
projection_tests<-projection_tests[-1,]
projection_tests$qval<-p.adjust(projection_tests$ttest,method="BH")
```

# Inter-celltype heterogeneity
```{r inter_celltype_distances}
library(flexclust)
crap0<-dist2(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day0"])),t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day0"])))

crap1<-dist2(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day1"])),t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day1"])))

crap7<-dist2(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day7"])),t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day7"])))

pdf("Inter-celltype_distance_distribution_by_day.pdf")
plot(density(crap0),col="red",main="Inter-celltype distance distribution")
lines(density(crap1),col="blue")
lines(density(crap7),col="green")
legend(95,0.07,lwd=1,col=c("red","blue","green"),legend=c("Day0","Day1","Day7"),bty="n")
dev.off()


ks.test(crap0,crap1)
ks.test(crap1,crap7)

t.test(crap0,crap1)
t.test(crap1,crap7)

var.test(crap0,crap1,alternative="less")
var.test(crap1,crap7,alternative="less")

#Two-tailed
var.test(crap0,crap1)
var.test(crap1,crap7)

```


# Intra-celltype heterogeneity

```{r heterogeneity}
dat.filtered.dist.celltype1.day0<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day0"])))
celltype1.day0.distData<-data.frame(celltype=1,day=0,JSD=as.vector(dat.filtered.dist.celltype1.day0))

dat.filtered.dist.celltype1.day1<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day1"])))
celltype1.day1.distData<-data.frame(celltype=1,day=1,JSD=as.vector(dat.filtered.dist.celltype1.day1))

dat.filtered.dist.celltype1.day1.contra<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day1" & pData(dat.filtered)$hemi_wrt_whisker_pull=="Contralateral"])))
celltype1.day1.contra.distData<-data.frame(celltype=1,day=1,JSD=as.vector(dat.filtered.dist.celltype1.day1.contra),hemi="Contra")

dat.filtered.dist.celltype1.day1.ipsi<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day1" & pData(dat.filtered)$hemi_wrt_whisker_pull=="Ipsilateral"])))
celltype1.day1.ipsi.distData<-data.frame(celltype=1,day=1,JSD=as.vector(dat.filtered.dist.celltype1.day1.ipsi),hemi="Ipsi")


dat.filtered.dist.celltype1.day7<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day7"])))
celltype1.day7.distData<-data.frame(celltype=1,day=7,JSD=as.vector(dat.filtered.dist.celltype1.day7))

dat.filtered.dist.celltype1.day7.contra<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day7" & pData(dat.filtered)$hemi_wrt_whisker_pull=="Contralateral"])))
celltype1.day7.contra.distData<-data.frame(celltype=1,day=7,JSD=as.vector(dat.filtered.dist.celltype1.day7.contra),hemi="Contra")

dat.filtered.dist.celltype1.day7.ipsi<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==1 & pData(dat.filtered)$Day=="Day7" & pData(dat.filtered)$hemi_wrt_whisker_pull=="Ipsilateral"])))
celltype1.day7.ipsi.distData<-data.frame(celltype=1,day=7,JSD=as.vector(dat.filtered.dist.celltype1.day7.ipsi),hemi="Ipsi")

dat.filtered.dist.celltype2.day0<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day0"])))
celltype2.day0.distData<-data.frame(celltype=2,day=0,JSD=as.vector(dat.filtered.dist.celltype2.day0))

dat.filtered.dist.celltype2.day1<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day1"])))
celltype2.day1.distData<-data.frame(celltype=2,day=1,JSD=as.vector(dat.filtered.dist.celltype2.day1))

dat.filtered.dist.celltype2.day1.contra<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day1" & pData(dat.filtered)$hemi_wrt_whisker_pull=="Contralateral"])))
celltype2.day1.contra.distData<-data.frame(celltype=2,day=1,JSD=as.vector(dat.filtered.dist.celltype2.day1.contra),hemi="Contra")

dat.filtered.dist.celltype2.day1.ipsi<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day1" & pData(dat.filtered)$hemi_wrt_whisker_pull=="Ipsilateral"])))
celltype2.day1.ipsi.distData<-data.frame(celltype=2,day=1,JSD=as.vector(dat.filtered.dist.celltype2.day1.ipsi),hemi="Ipsi")

dat.filtered.dist.celltype2.day7<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day7"])))
celltype2.day7.distData<-data.frame(celltype=2,day=7,JSD=as.vector(dat.filtered.dist.celltype2.day7))

dat.filtered.dist.celltype2.day7.contra<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day7" & pData(dat.filtered)$hemi_wrt_whisker_pull=="Contralateral"])))
celltype2.day7.contra.distData<-data.frame(celltype=2,day=7,JSD=as.vector(dat.filtered.dist.celltype2.day7.contra),hemi="Contra")

dat.filtered.dist.celltype2.day7.ipsi<-dist(t(vstExprs(dat.filtered[expressed_genes,pData(dat.filtered)$celltype==2 & pData(dat.filtered)$Day=="Day7" & pData(dat.filtered)$hemi_wrt_whisker_pull=="Ipsilateral"])))
celltype2.day7.ipsi.distData<-data.frame(celltype=2,day=7,JSD=as.vector(dat.filtered.dist.celltype2.day7.ipsi),hemi="Ipsi")

dat.filtered.dist.celltyperand.day0<-dist(t(vstExprs(dat.filtered[expressed_genes,rownames(pData(dat.filtered)) %in% sample(rownames(pData(dat.filtered)),100) & pData(dat.filtered)$Day=="Day0"])))
celltyperand.day0.distData<-data.frame(celltype="rand",day=0,JSD=as.vector(dat.filtered.dist.celltyperand.day0))
celltyperand.day0.distData.ecdf<-ecdf(celltyperand.day0.distData$JSD)
#dat.filtered.dist.celltyperand.day1<-cummeRbund:::JSdist(cummeRbund:::makeprobs(as.matrix(exprs(dat.filtered[expressed_genes,rownames(pData(dat.filtered)) %in% sample(rownames(pData(dat.filtered)),500) & pData(dat.filtered)$Day=="Day1"]))))
#celltyperand.day1.distData<-data.frame(celltype="rand",day=1,JSD=as.vector(dat.filtered.dist.celltyperand.day1))


#dat.filtered.dist.celltyperand.day7<-cummeRbund:::JSdist(cummeRbund:::makeprobs(as.matrix(exprs(dat.filtered[expressed_genes,rownames(pData(dat.filtered)) %in% sample(rownames(pData(dat.filtered)),500) & pData(dat.filtered)$Day=="Day7"]))))
#celltyperand.day7.distData<-data.frame(celltype="rand",day=7,JSD=as.vector(dat.filtered.dist.celltyperand.day7))

#dat.filtered.dist.celltyperand<-cummeRbund:::JSdist(cummeRbund:::makeprobs(as.matrix(exprs(dat.filtered[expressed_genes,rownames(pData(dat.filtered)) %in% sample(rownames(pData(dat.filtered)),500)]))))
#celltyperand.distData<-data.frame(celltype="rand",day=0,JSD=as.vector(dat.filtered.dist.celltyperand))
#celltyperand.distData.ecdf<-ecdf(celltyperand.distData$JSD)
# DKW confidence intervals
n<-200
alpha<-0.05
eps<-sqrt(log(2/alpha)/(2*n))
xx			<-	seq(60,120,length.out=1000)
#xx      <-  knots(celltyperand.day0.distData.ecdf)
ll			<-	pmax(celltyperand.day0.distData.ecdf(xx)-eps,0)
uu 			<-	pmin(celltyperand.day0.distData.ecdf(xx)+eps,1)
randCI<-as.data.frame(cbind(xx,ll,uu))

distData<-rbind(celltype1.day0.distData,celltype1.day1.distData,celltype1.day7.distData,
                celltype2.day0.distData,celltype2.day1.distData,celltype2.day7.distData)#,
                #celltyperand.day0.distData)
distData.byhemi<-rbind(celltype1.day7.ipsi.distData,celltype1.day7.contra.distData,
                       celltype1.day1.ipsi.distData,celltype1.day1.contra.distData,
                       celltype2.day7.ipsi.distData,celltype2.day7.contra.distData,
                       celltype2.day1.ipsi.distData,celltype2.day1.contra.distData)

p<-ggplot(distData) + 
  #geom_ribbon(aes(x=xx,ymin=ll,ymax=uu),color="grey80",fill="grey80",alpha=0.25,data=randCI) + 
  #stat_ecdf(aes(x=JSD,color=factor(celltype),linetype=factor(day)),geom="line") + 
  geom_density(aes(x=JSD,color=factor(celltype),linetype=factor(day))) + 
  monocle:::monocle_theme_opts() + 
  scale_color_manual(values=c(celltype_colors,"black")) + 
  geom_vline(aes(xintercept=dmode(distData$JSD[distData$celltype==1 & distData$day==0])),color=celltype_colors[1],linetype="solid",alpha=0.3) +
  geom_vline(aes(xintercept=dmode(distData$JSD[distData$celltype==2 & distData$day==0])),color=celltype_colors[2],linetype="solid",alpha=0.3) +
  ggtitle("Intra-celltype heterogeneity after whisker manipulation") + 
  ylab("ecdf") + 
  facet_wrap("celltype")
  #geom_hline(yintercept=1,linetype="dashed",color="grey70") + 
  #geom_hline(yintercept=0,linetype="dashed",color="grey70")
p

p<-ggplot(distData) + 
  #geom_ribbon(aes(x=xx,ymin=ll,ymax=uu),color="grey80",fill="grey80",alpha=0.25,data=randCI) + 
  #stat_ecdf(aes(x=JSD,color=factor(celltype),linetype=factor(day)),geom="line") + 
  #geom_density(aes(x=JSD,color=factor(celltype),linetype=factor(day))) +
  geom_density(aes(x=JSD,color=factor(hemi),linetype=factor(day)),data=distData.byhemi) + 
  monocle:::monocle_theme_opts() + 
  scale_color_brewer(palette="Set1") + 
  geom_vline(aes(xintercept=dmode(distData$JSD[distData$celltype==1 & distData$day==0])),color=celltype_colors[1],linetype="solid",alpha=0.3) +
  geom_vline(aes(xintercept=dmode(distData$JSD[distData$celltype==2 & distData$day==0])),color=celltype_colors[2],linetype="solid",alpha=0.3) +
  ggtitle("Intra-celltype heterogeneity after whisker manipulation") + 
  ylab("ecdf") + facet_grid(celltype~day)
  #geom_hline(yintercept=1,linetype="dashed",color="grey70") + 
  #geom_hline(yintercept=0,linetype="dashed",color="grey70")
p


ks.test(celltype1.day0.distData$JSD,celltype1.day1.distData$JSD,exact=T)
ks.test(celltype1.day1.distData$JSD,celltype1.day7.distData$JSD,exact=T)
ks.test(celltype1.day0.distData$JSD,celltype1.day7.distData$JSD,exact=T)

ks.test(celltype2.day0.distData$JSD,celltype2.day1.distData$JSD,exact=T)
ks.test(celltype2.day1.distData$JSD,celltype2.day7.distData$JSD,exact=T)
ks.test(celltype2.day0.distData$JSD,celltype2.day7.distData$JSD,exact=T)

# Difference in means
t.test(celltype1.day0.distData$JSD,celltype1.day1.distData$JSD)
t.test(celltype1.day1.distData$JSD,celltype1.day7.distData$JSD)
t.test(celltype1.day0.distData$JSD,celltype1.day7.distData$JSD)

t.test(celltype2.day0.distData$JSD,celltype2.day1.distData$JSD)
t.test(celltype2.day1.distData$JSD,celltype2.day7.distData$JSD)
t.test(celltype2.day0.distData$JSD,celltype2.day7.distData$JSD)


#Variance test
var.test(celltype1.day1.distData$JSD,celltype1.day0.distData$JSD,alternative="greater")
var.test(celltype1.day7.distData$JSD,celltype1.day1.distData$JSD,alternative="greater")
var.test(celltype1.day7.distData$JSD,celltype1.day0.distData$JSD,alternative="greater")

var.test(celltype2.day1.distData$JSD,celltype2.day0.distData$JSD,alternative="greater")
var.test(celltype2.day7.distData$JSD,celltype2.day1.distData$JSD,alternative="greater")
var.test(celltype2.day7.distData$JSD,celltype2.day0.distData$JSD,alternative="greater")


pdf("Figure 6 - Intra-celltype_heterogeneity.pdf",width=8,height=4)
p + theme(legend.position = c(0.5, 0.5))
dev.off()

distData<-rbind(celltype1.day0.distData,
                celltype2.day0.distData)#,
                #celltyperand.day0.distData)

p<-ggplot(distData) + 
  #geom_ribbon(aes(x=xx,ymin=ll,ymax=uu),color="grey80",fill="grey80",alpha=0.25,data=randCI) + 
  stat_ecdf(aes(x=JSD,color=factor(celltype)),geom="line") + 
  monocle:::monocle_theme_opts() + 
  scale_color_manual(values=c(celltype_colors,"black")) + 
  ggtitle("Intra-celltype heterogeneity after whisker manipulation") + 
  ylab("ecdf") + xlab("Distance") +
  geom_hline(yintercept=1,linetype="dashed",color="grey70") + 
  geom_hline(yintercept=0,linetype="dashed",color="grey70")
p

pdf("Figure 2- Intra-celltype_heterogeneity.pdf",width=5,height=5)
p + theme(legend.position = c(0.8, 0.5))
dev.off()

ks.test(distData$JSD[distData$celltype==1],distData$JSD[distData$celltype==2])
```

## Intra-celltype heterogeneity after regressing out activity module(s)
```{r hetero_activity_regression}
#dat.filtered.projection<-dat.filtered
#pData(dat.filtered.projection)<-projectionData

#Batch correct
FM<-as.matrix(vstExprs(dat.filtered[expressed_genes,]))

#X.model_mat <- sparse.model.matrix(as.formula("~MMgreen"), 
#                                        data = pData(dat.filtered.projection[expressed_genes,]), drop.unused.levels = TRUE)
# #require(broom)
# fit <- limma::lmFit(FM, X.model_mat)
# beta <- fit$coefficients[, -1, drop = FALSE]
# beta[is.na(beta)] <- 0
# FM_clean <- as.matrix(FM) - beta %*% t(X.model_mat[, -1])

FM_clean<-removeBatchEffect(FM,covariate=projectionData$MMcyan,design=matrix(1,ncol(FM),1))

#FM_clean[projectionData$celltype==1 & projectionData$Day=="Day-"]

# ECDF plot
dat.filtered.projection.dist.celltype1.day0<-dist(t(FM_clean[expressed_genes,projectionData$celltype==1 & projectionData$Day=="Day0"]))
celltype1.day0.distData.projection<-data.frame(celltype=1,day=0,JSD=as.vector(dat.filtered.projection.dist.celltype1.day0))

dat.filtered.projection.dist.celltype1.day1<-dist(t(FM_clean[expressed_genes,projectionData$celltype==1 & projectionData$Day=="Day1"]))
celltype1.day1.distData.projection<-data.frame(celltype=1,day=1,JSD=as.vector(dat.filtered.projection.dist.celltype1.day1))

dat.filtered.projection.dist.celltype1.day7<-dist(t(FM_clean[expressed_genes,projectionData$celltype==1 & projectionData$Day=="Day7"]))
celltype1.day7.distData.projection<-data.frame(celltype=1,day=7,JSD=as.vector(dat.filtered.projection.dist.celltype1.day7))

dat.filtered.projection.dist.celltype2.day0<-dist(t(FM_clean[expressed_genes,projectionData$celltype==2 & projectionData$Day=="Day0"]))
celltype2.day0.distData.projection<-data.frame(celltype=2,day=0,JSD=as.vector(dat.filtered.projection.dist.celltype2.day0))

dat.filtered.projection.dist.celltype2.day1<-dist(t(FM_clean[expressed_genes,projectionData$celltype==2 & projectionData$Day=="Day1"]))
celltype2.day1.distData.projection<-data.frame(celltype=2,day=1,JSD=as.vector(dat.filtered.projection.dist.celltype2.day1))

dat.filtered.projection.dist.celltype2.day7<-dist(t(FM_clean[expressed_genes,projectionData$celltype==2 & projectionData$Day=="Day7"]))
celltype2.day7.distData.projection<-data.frame(celltype=2,day=7,JSD=as.vector(dat.filtered.projection.dist.celltype2.day7))

dat.filtered.projection.dist.celltyperand.day0<-dist(t(FM_clean[expressed_genes,rownames(projectionData) %in% sample(rownames(projectionData),500) & projectionData$Day=="Day0"]))
celltyperand.day0.distData.projection<-data.frame(celltype="rand",day=0,JSD=as.vector(dat.filtered.projection.dist.celltyperand.day0))
celltyperand.day0.distData.projection.ecdf<-ecdf(celltyperand.day0.distData.projection$JSD)

n<-500
alpha<-0.05
eps<-sqrt(log(2/alpha)/(2*n))
xx			<-	seq(60,100,length.out=1000)
#xx      <-  knots(celltyperand.day0.distData.ecdf)
ll			<-	pmax(celltyperand.day0.distData.projection.ecdf(xx)-eps,0)
uu 			<-	pmin(celltyperand.day0.distData.projection.ecdf(xx)+eps,1)
randCI.projection<-as.data.frame(cbind(xx,ll,uu))

distData.projection<-rbind(celltype1.day0.distData.projection,celltype1.day1.distData.projection,celltype1.day7.distData.projection,
                celltype2.day0.distData.projection,celltype2.day1.distData.projection,celltype2.day7.distData.projection,
                celltyperand.day0.distData.projection)

p<-ggplot(distData.projection) + 
  geom_ribbon(aes(x=xx,ymin=ll,ymax=uu),color="grey80",fill="grey80",alpha=0.25,data=randCI.projection) + 
  stat_ecdf(aes(x=JSD,color=factor(celltype),linetype=factor(day)),geom="line") + 
  monocle:::monocle_theme_opts() + 
  scale_color_manual(values=c(celltype_colors,"black")) + 
  ggtitle("Intra-celltype heterogeneity after whisker manipulation\nand regression of activity module (purple)") + 
  ylab("ecdf") + 
  geom_hline(yintercept=1,linetype="dashed",color="grey70") + 
  geom_hline(yintercept=0,linetype="dashed",color="grey70")
p

pdf("Intra-celltype_heterogeneity_green_regressed.pdf",width=5,height=5)
p + theme(legend.position = c(0.8, 0.5))
dev.off()

```
*Conclusion: * No apparent change in eCDF after module regression

# High Variance Genes

## Identifiying high bcv genes by animal
Intersect high variance genes by day to minimize batch contribution to day-variance, and then union of day-specific high-bcv genes.

```{r per_animal_variance}
resid_cutoff<-1.0
perAnimal.high_bcv_genes<-list()
pdf("High_bcv_genes_mv_scatter_per_animal.pdf",width=6,height=6)
for (animal in levels(pData(dat.filtered)$animal)) {
  print (animal)
  
  # Subset by animal
  dat.animal<-dat.filtered[,pData(dat.filtered)$animal == animal]

  dat.animal<-estimateSizeFactors(dat.animal)
  dat.animal<-estimateDispersions(dat.animal,cores=8)

  dat.animal<-detectGenes(dat.animal,min_expr=1)

  numCellThreshold<-15 # Maybe lower this
  min_expression_level<-1
  animal.expressed_genes<-row.names(subset(fData(dat.animal),num_cells_expressed >= numCellThreshold))

  dat.animal<-dat.animal[animal.expressed_genes,]
  
  #Summary Stats for animal
  fData(dat.animal)$mean_expr<-apply(round(exprs(dat.animal)),1,mean)
  fData(dat.animal)$sd_expr<-apply(round(exprs(dat.animal)),1,sd)
  fData(dat.animal)$bcv<-(fData(dat.animal)$sd_expr/fData(dat.animal)$mean_expr)**2
  fData(dat.animal)$percent_detection<-(fData(dat.animal)$num_cells_expressed/dim(dat.animal)[2])*100
  
  ###############
  # Cubic spline Fit
  ###############
  
  bcv.fit.gaussian.animal<-mgcv::gam(log2(bcv)~s(log2(mean_expr),bs="cs"),data=fData(dat.animal))
  bcv.predict.animal<-predict(bcv.fit.gaussian.animal,interval='link',se.fit=TRUE)
  
  high_bcv_genes.animal<-rownames(fData(dat.animal)[which(resid(bcv.fit.gaussian.animal) > resid_cutoff & fData(dat.animal)$mean_expr >= min_expression_level),])
  perAnimal.high_bcv_genes[[animal]]<-high_bcv_genes.animal
  
  fData(dat.animal)$high_bcv<-FALSE
  fData(dat.animal)$high_bcv[fData(dat.animal)$gene_id %in% high_bcv_genes.animal]<-TRUE
  
  #Plot M-V relationship
  p.animal.high_var<-ggplot(fData(dat.animal))
  p.animal.high_var<-p.animal.high_var + geom_point(aes(x=log2(mean_expr),y=log2(bcv),color=high_bcv),alpha=0.5,size=0.4) + scale_color_manual(values=c('blue','red')) +
  geom_smooth(aes(x=log2(mean_expr),y=log2(bcv)),color="black",method="auto",se=TRUE) + 
  #geom_text(aes(x=log2(mean_expr),y=log2(bcv),label=gene_short_name),color="darkred",size=4,data=subset(fData(dat.ntsp3),gene_id %in% high_bcv_genes.ntsp3)) +
  ggtitle(animal) + guides(color=FALSE) +
  theme_bw()
  
  plot(p.animal.high_var)
  # Clean workspace
  rm(dat.animal)
  
}

dev.off()

#Intersect high_bcv_genes by day
day0.high_bcv_genes<-intersect(perAnimal.high_bcv_genes[["NTSP3"]],perAnimal.high_bcv_genes[["NTSP4"]])
day1.high_bcv_genes<-intersect(perAnimal.high_bcv_genes[["TDPQ2"]],perAnimal.high_bcv_genes[["TDPQ6"]])
day7.high_bcv_genes<-intersect(perAnimal.high_bcv_genes[["NTVX3"]],perAnimal.high_bcv_genes[["NTWN1"]])

union.high_bcv_genes<-unique(c(day0.high_bcv_genes,day1.high_bcv_genes,day7.high_bcv_genes))
intersect.high_bcv_genes<-Reduce(intersect,perAnimal.high_bcv_genes)

fData(dat.filtered)$high_bcv<-FALSE
fData(dat.filtered)$high_bcv[rownames(fData(dat.filtered)) %in% union.high_bcv_genes]<-TRUE
```


## Alternatively...Monocle2 dispersion table
This approach suffers from significant batch effects until such time as I can figure out how to estimate variances per animal while still respecting differences between days.
```{r high_dispersion_genes_monocle,eval=F}
disp_table <- dispersionTable(dat.filtered)
unsup_clustering_genes <-subset(disp_table, mean_expression >= 0.1 & dispersion_empirical >= 5 * dispersion_fit)
high_bcv_genes<-unsup_clustering_genes$gene_id
dat.filtered <- setOrderingFilter(dat.filtered, high_bcv_genes)
plot_ordering_genes(dat.filtered)

fData(dat.filtered)$high_bcv<-FALSE
fData(dat.filtered)$high_bcv[rownames(fData(dat.filtered)) %in% high_bcv_genes]<-TRUE
```

## Principle component analysis using high-variance genes
```{r pca}
dat.high_var<-dat.filtered
#dat.pca.post<-prcomp(t(log10(exprs(dat.high_var[high_bcv_genes,])+1)),center=T,scale=T)

# Using merged per-animal high-bcv gene set (not monocle dispersion table)
dat.pca.post<-prcomp(t(vstExprs(dat.high_var[intersect(union.high_bcv_genes,expressed_genes),])),center=T,scale=T)


pdf("High_variance_PCA_plots.pdf",width=10,height=20)
choices=c(1,2)
hvPCA1<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=pData(dat.filtered)$label_fixed,ellipse=T,var.axes=F) + scale_color_manual(values=c("red","darkgreen")) + monocle:::monocle_theme_opts()
hvPCA2<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=factor(pData(dat.filtered)$hemisphere_fixed),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA3<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=factor(pData(dat.filtered)$Day),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA4<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=factor(pData(dat.filtered)$animal),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA5<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=pData(dat.high_var)$celltype,ellipse=T,var.axes=F) + scale_color_manual(values=celltype_colors) + monocle:::monocle_theme_opts()
hvPCA6<-ggplot(merge(pData(dat.filtered),dat.pca.post$x,by=0)) + geom_point(aes_string(x=paste("PC",choices[1],sep=""),y=paste("PC",choices[2],sep=""),color="num_genes_expressed")) + monocle:::monocle_theme_opts() + coord_equal(1)
hvPCA7<-ggplot(merge(pData(dat.filtered),dat.pca.post$x,by=0)) + geom_point(aes_string(x=paste("PC",choices[1],sep=""),y=paste("PC",choices[2],sep=""),color="Total_mRNAs")) + monocle:::monocle_theme_opts() + coord_equal(1)
hvPCA8<-ggplot(merge(pData(dat.filtered),dat.pca.post$x,by=0)) + geom_point(aes_string(x=paste("PC",choices[1],sep=""),y=paste("PC",choices[2],sep=""),color="Size_Factor")) + monocle:::monocle_theme_opts() + coord_equal(1)
hvPCA9<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=pData(dat.high_var)$sex,ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA10<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=as.factor(pData(dat.high_var)$hemi_wrt_whisker_pull),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()

grid.arrange(hvPCA1,hvPCA2,hvPCA3,hvPCA4,hvPCA5,hvPCA6,hvPCA7,hvPCA8,hvPCA9,hvPCA10,ncol=2)

choices=c(3,4)
hvPCA1<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=pData(dat.filtered)$label_fixed,ellipse=T,var.axes=F) + scale_color_manual(values=c("red","darkgreen")) + monocle:::monocle_theme_opts()
hvPCA2<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=factor(pData(dat.filtered)$hemisphere_fixed),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA3<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=factor(pData(dat.filtered)$Day),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA4<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=factor(pData(dat.filtered)$animal),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA5<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=pData(dat.high_var)$celltype,ellipse=T,var.axes=F) + scale_color_manual(values=celltype_colors) + monocle:::monocle_theme_opts()
hvPCA6<-ggplot(merge(pData(dat.filtered),dat.pca.post$x,by=0)) + geom_point(aes_string(x=paste("PC",choices[1],sep=""),y=paste("PC",choices[2],sep=""),color="num_genes_expressed")) + monocle:::monocle_theme_opts() + coord_equal(1)
hvPCA7<-ggplot(merge(pData(dat.filtered),dat.pca.post$x,by=0)) + geom_point(aes_string(x=paste("PC",choices[1],sep=""),y=paste("PC",choices[2],sep=""),color="Total_mRNAs")) + monocle:::monocle_theme_opts() + coord_equal(1)
hvPCA8<-ggplot(merge(pData(dat.filtered),dat.pca.post$x,by=0)) + geom_point(aes_string(x=paste("PC",choices[1],sep=""),y=paste("PC",choices[2],sep=""),color="Size_Factor")) + monocle:::monocle_theme_opts() + coord_equal(1)
hvPCA9<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=pData(dat.high_var)$sex,ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA10<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=as.factor(pData(dat.high_var)$hemi_wrt_whisker_pull),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()

grid.arrange(hvPCA1,hvPCA2,hvPCA3,hvPCA4,hvPCA5,hvPCA6,hvPCA7,hvPCA8,hvPCA9,hvPCA10,ncol=2)

choices=c(5,6)
hvPCA1<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=pData(dat.filtered)$label_fixed,ellipse=T,var.axes=F) + scale_color_manual(values=c("red","darkgreen")) + monocle:::monocle_theme_opts()
hvPCA2<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=factor(pData(dat.filtered)$hemisphere_fixed),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA3<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=factor(pData(dat.filtered)$Day),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA4<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=factor(pData(dat.filtered)$animal),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA5<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=pData(dat.high_var)$celltype,ellipse=T,var.axes=F) + scale_color_manual(values=celltype_colors) + monocle:::monocle_theme_opts()
hvPCA6<-ggplot(merge(pData(dat.filtered),dat.pca.post$x,by=0)) + geom_point(aes_string(x=paste("PC",choices[1],sep=""),y=paste("PC",choices[2],sep=""),color="num_genes_expressed")) + monocle:::monocle_theme_opts() + coord_equal(1)
hvPCA7<-ggplot(merge(pData(dat.filtered),dat.pca.post$x,by=0)) + geom_point(aes_string(x=paste("PC",choices[1],sep=""),y=paste("PC",choices[2],sep=""),color="Total_mRNAs")) + monocle:::monocle_theme_opts() + coord_equal(1)
hvPCA8<-ggplot(merge(pData(dat.filtered),dat.pca.post$x,by=0)) + geom_point(aes_string(x=paste("PC",choices[1],sep=""),y=paste("PC",choices[2],sep=""),color="Size_Factor")) + monocle:::monocle_theme_opts() + coord_equal(1)
hvPCA9<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=pData(dat.high_var)$sex,ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
hvPCA10<-ggbiplot(dat.pca.post,choices=choices,scale=0,groups=as.factor(pData(dat.high_var)$hemi_wrt_whisker_pull),ellipse=T,var.axes=F) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()

grid.arrange(hvPCA1,hvPCA2,hvPCA3,hvPCA4,hvPCA5,hvPCA6,hvPCA7,hvPCA8,hvPCA9,hvPCA10,ncol=2)

dev.off()


pdf("High_bcv_genes_pca_var_explained.pdf",width=4,height=4)
plot(dat.pca.post)
dev.off()

#gene-centric PCA
#dat.pca.genes<-prcomp(vstExprs(dat.filtered[union.high_bcv_genes,]),center=T,scale=T)

#predict weights on all expressed genes using PCA rotations
#dat.pca.expressed_genes.pred<-predict(dat.pca.genes,vstExprs(dat.filtered[expressed_genes,]))
#dat.pca.expressed_genes.pred<-predict(dat.pca.genes,vstExprs(dat.filtered[expressed_genes,])/rowMeans(vstExprs(dat.filtered[expressed_genes,])))

#PC_means<-apply(dat.pca.expressed_genes.pred[,c(1,2)],2,mean)  
#PC_sds<-apply(dat.pca.expressed_genes.pred[,c(1,2)],2,sd)
#PC.high_var.geneIDs<-lapply(c(1,2),function(x){
#  names(dat.pca.expressed_genes.pred[dat.pca.expressed_genes.pred[,x]<PC_means[x]-(4*PC_sds[x]) | dat.pca.expressed_genes.pred[,x]>PC_means[x]+(4*PC_sds[x]),x])
#})
#dat.pca.expressed_genes.pred.subset<-dat.pca.expressed_genes.pred[rownames(dat.pca.expressed_genes.pred) %in% unlist(unique(PC.high_var.geneIDs)),]

#pca.genes.plots<-ggplot(cbind(as.data.frame(dat.pca.expressed_genes.pred),fData(dat.filtered[expressed_genes,])))
#pca.genes.plots + geom_point(aes(x=PC1,y=PC2,color=num_cells_expressed)) + monocle:::monocle_theme_opts()

#pca.genes.plots + geom_point(aes(x=PC1,y=PC2),alpha=0.2,size=0.3) + geom_text(aes(x=PC1,y=PC2,label=gene_short_name),color="red",size=3,data=cbind(as.data.frame(dat.pca.expressed_genes.pred.subset),fData(dat.filtered[rownames(fData(dat.filtered)) %in% unlist(unique(PC.high_var.geneIDs)),]))) + monocle:::monocle_theme_opts()

```

# Spectral tSNE on significant PCA components
```{r spectral_tSNE}
components<-c(1:2,6)

seed<-round(runif(1,1,99999)) # comment out after chosen seed
#seed <- 56577
set.seed(seed)

#dat.filtered.tsne<-tsne(dat.pca$x[,1:nComponents],perplexity=25,max_iter=1000,whiten=FALSE)
dat.filtered.tsne<-Rtsne(dat.pca.post$x[,components],perplexity=60,max_iter=1500,whiten=T,verbose=T)

pData(dat.filtered)$tSNE1_pos<-dat.filtered.tsne$Y[,1]
pData(dat.filtered)$tSNE2_pos<-dat.filtered.tsne$Y[,2]

myTSNEPlotAlpha(dat.filtered,color="celltype", shape="Day",cell_size=3,scale=T) + scale_color_manual(values=celltype_colors)
myTSNEPlotAlpha(dat.filtered,color="Day",shape="celltype",cell_size=3,scale=T) 
#markers=c("Arc","Drd1","Ctgf","Pantr1","Cdh13","Bdnf")
myTSNEPlotAlpha(dat.filtered,color="phase1_kmeans_cluster", shape="hemi_wrt_whisker_pull",cell_size=3)

myTSNEPlotAlpha(dat.filtered,color="label_fixed", shape="hemi_wrt_whisker_pull",cell_size=3)+ scale_color_manual(values=label_colors)
myTSNEPlotAlpha(dat.filtered,color="hemi_wrt_whisker_pull",shape="celltype",cell_size=3)
myTSNEPlotAlpha(dat.filtered,color="animal", shape="celltype",cell_size=3) 


myTSNEPlotAlpha(dat.filtered,color="celltype", shape="hemi_wrt_whisker_pull",markers=c("Cdh13","Lamp5","Brinp3","Pantr1","Grp","Drd1","Ctgf","Nrxn2"),scale=T)+ scale_color_manual(values=celltype_colors)

myTSNEPlotAlpha(dat.filtered,color="celltype", shape="hemi_wrt_whisker_pull",markers=c("Fos","Arc","Bdnf","Scg2","Ly6d"),scale=T)+ scale_color_manual(values=celltype_colors)

myTSNEPlotAlpha(dat.filtered,color="hemi_wrt_whisker_pull",markers=c("Fos","Arc","Bdnf","Scg2"),scale=T)+ scale_color_brewer(palette="Set1")

myTSNEPlotAlpha(dat.filtered,color="Day",markers=c("Fos","Arc","Bdnf","Scg2"),scale=T)+ scale_color_brewer(palette="Set1")

#myTSNEPlot(dat.filtered,color="factor(cluster)", shape="color")+ scale_color_brewer(palette="Set1") #Not defined yet

```

# Monocle2 differential Gene Test btwn EDP stages wrt celltype
```{r}
dat.filtered <-estimateSizeFactors(dat.filtered)
dat.filtered <-estimateDispersions(dat.filtered,cores=6,modelFormulaStr="~animal") #per-batch dispersion estimates are clutch!

# Testing EDP parameter in LRT model comparison with num_genes_expressed and label as covariates in both models
EDP_spectral_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+Total_mRNAs+celltype*Day", reducedModelFormulaStr = "~num_genes_expressed+Total_mRNAs+celltype+Day", cores=8)

EDP_spectral_diff_test_sigGenes <- rownames(EDP_spectral_diff_test_res[EDP_spectral_diff_test_res$qval <=0.01,])

myBarMap(dat.filtered,geneset=sample(lookupGeneName(dat.filtered,EDP_spectral_diff_test_sigGenes),40),color_by="celltype",facet_by="celltype+Day",cluster=T,log=T) + scale_color_manual(values=celltype_colors)  + scale_fill_manual(values=celltype_colors)

plot_genes_jitter(dat.filtered[sample(EDP_spectral_diff_test_sigGenes,10)],color="celltype",group="Day") + scale_color_manual(values=celltype_colors)

myTSNEPlotAlpha(dat.filtered,color="celltype",shape="Day",markers=c("Prss12","Cdh13","Cdh7","Nr4a1"),scale=T)+ scale_color_manual(values=celltype_colors)

myTSNEPlotAlpha(dat.filtered,color="celltype",markers=sample(lookupGeneName(dat.filtered,EDP_spectral_diff_test_sigGenes),20),scale=F)+ scale_color_manual(values=celltype_colors)

pdf("EDP_sigGenes_barmap.pdf",width=10,height=100)
myBarMap(dat.filtered,geneset=lookupGeneName(dat.filtered,EDP_spectral_diff_test_sigGenes),color_by="label",facet_by="label+EDP+hemisphere",cluster=T) + scale_color_manual(values=label_colors)  + scale_fill_manual(values=label_colors)
dev.off()

write.table(lookupGeneName(dat.filtered,EDP_spectral_diff_test_sigGenes),file="interaction_celltype_day_sigGenes.tab",quote=F,sep="\t",row.names=F,col.names=F)


```


```{r DE_wrt_day}
# Consistent responses across cell types
all_cells_EDP_spectral_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+Total_mRNAs+sex+celltype*Day", reducedModelFormulaStr = "~num_genes_expressed+Total_mRNAs+sex+celltype", cores=8)

all_cells_EDP_spectral_diff_test_sigGenes <- rownames(all_cells_EDP_spectral_diff_test_res[all_cells_EDP_spectral_diff_test_res$qval <=0.00000000001,])

#all_cells_EDP_spectral_diff_test_sigGenes_relaxed <- rownames(all_cells_EDP_spectral_diff_test_res[all_cells_EDP_spectral_diff_test_res$qval <=0.001,])

#dat.celltypeday.tsne<-Rtsne(as.matrix(t(vstExprs(dat.filtered[all_cells_EDP_spectral_diff_test_sigGenes,]))),perplexity=80,max_iter=1000,whiten=TRUE,verbose=T)

#pData(dat.filtered)$tSNE1_pos<-dat.celltypeday.tsne$Y[,1]
#pData(dat.filtered)$tSNE2_pos<-dat.celltypeday.tsne$Y[,2]

#myTSNEPlotAlpha(dat.filtered,color="Day", shape="celltype",cell_size=3,scale=T)
#myTSNEPlotAlpha(dat.filtered,color="Day",shape="animal",cell_size=3,scale=T) 



myBarMap(dat.filtered,geneset=sample(lookupGeneName(dat.filtered,all_cells_EDP_spectral_diff_test_sigGenes),40),color_by="Day",facet_by="celltype+Day",cluster=T,log=T)

myTSNEPlotAlpha(dat.filtered,color="Day",shape="celltype",markers=sample(lookupGeneName(dat.filtered,all_cells_EDP_spectral_diff_test_sigGenes),20),scale=T)

pdf("celltype_EDP_sigGenes_barmap.pdf",width=10,height=100)
myBarMap(dat.filtered,geneset=lookupGeneName(dat.filtered,celltype_EDP_spectral_diff_test_sigGenes),color_by="label",facet_by="label+EDP+hemisphere",cluster=T) + scale_color_manual(values=label_colors)  + scale_fill_manual(values=label_colors)
dev.off()

# Pretty heatmap of genes changing over EDP day
heatmap_data<-as.matrix(vstExprs(dat.filtered[all_cells_EDP_spectral_diff_test_sigGenes,]))
heatmap_annotation<-pData(dat.filtered[all_cells_EDP_spectral_diff_test_sigGenes,])[,c("label_fixed","celltype","Day","Total_mRNAs","total_mass","num_genes_expressed","animal","hemi_wrt_whisker_pull")]
heatmap_annotation$celltype<-factor(heatmap_annotation$celltype) 

heatmap_annotation_row<-data.frame("inGage"=as.factor(all_cells_EDP_spectral_diff_test_sigGenes %in% lookupGeneId(dat.filtered,Gage_activity_padj_lt_0.01)),
                                   "Celltype.Day"=as.factor(all_cells_EDP_spectral_diff_test_sigGenes %in% EDP_spectral_diff_test_sigGenes),
                                   "Celltype_sigGenes"=as.factor(all_cells_EDP_spectral_diff_test_sigGenes %in% Phase1_sigGenes))

rownames(heatmap_annotation_row)<-rownames(fData(dat.filtered[all_cells_EDP_spectral_diff_test_sigGenes,]))

heatmap_colors<-list(
label_fixed = c(single="darkgreen", double="firebrick"),
Day = c(Day0="red", Day1 = "blue",Day7="green"),
celltype = c("1"="chocolate1","2"="blue4"),
inGage = c("TRUE"="black","FALSE"="grey80"),
Celltype.Day = c("TRUE"="black","FALSE"="grey80"),
Celltype_sigGenes = c("TRUE"="black","FALSE"="grey80")
)

pdf("kmeans_sigGenes_wrt_day_euclidDist.pdf",width=20,height=20)
#pheatmap(heatmap_data,
#               scale="row",
#               show_rownames=FALSE,
#               show_colnames=FALSE,
#               annotation_col=heatmap_annotation,
#               annotation_row=heatmap_annotation_row,
#               breaks=seq(-3,3,length=100),
#               drop_levels=FALSE,
#               #clustering_distance_rows=cummeRbund::JSdist(cummeRbund:::makeprobs(t(heatmap_data))),
#               #clustering_distance_cols=cummeRbund::JSdist(cummeRbund:::makeprobs(heatmap_data)),
#               annotation_colors=heatmap_colors
#               )

myFacetedHeatMap(dat.filtered,geneset=lookupGeneName(dat.filtered,all_cells_EDP_spectral_diff_test_sigGenes),scale="row",facet_by="celltype+Day",limits=c(-3,3))


dev.off()

write.table(lookupGeneName(dat.filtered,all_cells_EDP_spectral_diff_test_sigGenes),file="day_sigGenes.tab",quote=F,sep="\t",row.names=F,col.names=F)

write.table(lookupGeneName(dat.filtered,all_cells_EDP_spectral_diff_test_sigGenes <- rownames(all_cells_EDP_spectral_diff_test_res[all_cells_EDP_spectral_diff_test_res$qval <=0.0001,])),file="day_sigGenes_relaxed_fdr.tab",quote=F,sep="\t",row.names=F,col.names=F)


```

```{r summarizing_sigGene_expression_day}
tmp<-vstMeltCDS(dat.filtered,geneset=lookupGeneName(dat.filtered,all_cells_EDP_spectral_diff_test_sigGenes),scale=FALSE)

tmp.means<-tmp %>%
  group_by(gene_short_name,celltype,Day) %>%
  summarise(
    "gene_mean"=mean(value)
  ) %>%
  dcast("gene_short_name~celltype+Day")

rownames(tmp.means)<-tmp.means[,1]
tmp.means<-tmp.means[,-1]
  
gene_index<-tmp.means %>%
  dist() %>%
  hclust() %>%
  as.dendrogram() %>%
  order.dendrogram() 

gene_order<-rownames(tmp.means)[gene_index]

pdf("sigGenes_day_jitter.pdf",width=40,height=40)
plot_genes_jitter(dat.filtered[all_cells_EDP_spectral_diff_test_sigGenes,],grouping="Day",color_by="celltype",plot_trend=TRUE,panel_order=gene_order) + facet_wrap(~ feature_label,scales="free_y") + scale_color_manual(values=celltype_colors)
dev.off()

pdf("sigGenes_day_lineplot.pdf",width=40,height=40)
plot_genes_line(dat.filtered[all_cells_EDP_spectral_diff_test_sigGenes,],grouping="Day",color_by="celltype",panel_order=gene_order) + facet_wrap(~ feature_label,scales="free_y") + scale_color_manual(values=celltype_colors)
dev.off()

# Neuron spine
plot_genes_jitter(dat.filtered[lookupGeneId(dat.filtered,c("Nr1d1","Slc1a2","Itpka","Grin1","Gabbr1","Gria2","Homer1","Cript","Cnih2","Strn4","Atp1a3","Ppp1r9a","Ppp1cc","Atp2b1")),],grouping="Day",color_by="celltype",plot_trend=TRUE,panel_order=gene_order) + facet_wrap("gene_short_name",scales="free_y") + scale_color_manual(values=celltype_colors)

#GTP-binding
plot_genes_jitter(dat.filtered[lookupGeneId(dat.filtered,c("Rab31","Arl1","Arl1","Rraga","Arl6","Arl8a","Arl8b","Sept5","Rab11a","Rab26","Arf3","Arf4","Hras","Rhoa","Gnai2","Arf5","Rac1","Lrrk2","Cdc42","Diras2")),],grouping="Day",color_by="celltype",plot_trend=TRUE,panel_order=gene_order) + facet_wrap("gene_short_name",scales="free_y") + scale_color_manual(values=celltype_colors)

#Learning or Memory
plot_genes_jitter(dat.filtered[lookupGeneId(dat.filtered,c("Vdac3","Vdac1","Grin1","Foxp2","Thra","Jph3","Atp1a3","Gria1","App","Btg2","Chrnb2","Snap25","Slc17a7","Nrxn1","Cntnap2","Nrxn2","Atad1","Tusc3","Prkar1b","Rcan2")),],grouping="Day",color_by="celltype",plot_trend=TRUE,panel_order=gene_order) + facet_wrap("gene_short_name",scales="free_y") + scale_color_manual(values=celltype_colors) + ggtitle("Learning/Memory/Cognition")

```

```{r kmeans_sigGenes_day}
#K-means clustering of mean expression profiles
tmp<-vstMeltCDS(dat.filtered,geneset=lookupGeneName(dat.filtered,all_cells_EDP_spectral_diff_test_sigGenes_relaxed),scale="row")

tmp.mat<-tmp %>%
  group_by(gene_short_name,celltype,Day) %>%
  summarise(
    "gene_mean"=mean(value),
    "gene_sd"=sd(value),
    "lower_bound"=gene_mean-gene_sd,
    "upper_bound"=gene_mean+gene_sd
  ) %>%
  as.data.frame()

tmp.means<-tmp %>%
  group_by(gene_short_name,celltype,Day) %>%
  summarise(
    "gene_mean"=mean(value)
  ) %>%
  dcast("gene_short_name~celltype+Day")

rownames(tmp.means)<-tmp.means[,1]
tmp.means<-tmp.means[-1,-1]

# Only uncomment if you want to re-cluster
#tmp.kmeans<-kmeans(tmp.means,centers=16)

tmp.full<-merge(tmp.mat,as.data.frame(tmp.kmeans$cluster),by.x="gene_short_name",by.y=0)
colnames(tmp.full)[8]<-"cluster"

tmp.centers.melt<-tmp.kmeans$centers %>%
  melt() %>%
  separate(Var2,c("celltype","Day"),sep="_")

colnames(tmp.centers.melt)[1]<-"cluster"

p<-ggplot(tmp.full)
p<-p + 
  geom_line(aes(x=Day,y=gene_mean,group=interaction(celltype,gene_short_name),color=celltype),alpha=0.1,size=0.5) + 
  #geom_density2d(aes(x=Day,y=gene_mean,group=interaction(celltype,gene_short_name),color=celltype),alpha=0.5,size=0.5) + 
  geom_line(aes(x=Day,y=value,group=celltype,color=celltype),size=1,data=tmp.centers.melt) + 
  geom_point(aes(x=Day,y=value),color="black",size=2,data=tmp.centers.melt) + 
  facet_wrap("cluster",scale="free_y", labeller = "label_both") +
  scale_color_manual(values=celltype_colors) + monocle:::monocle_theme_opts() + theme(strip.text = element_text(size = 16))

pdf("Kmeans_clustering_of_EDP_sigGene_expression_profiles_by_celltype_and_day.pdf",width=10,height=10)
p
dev.off()

#Cluster profiler analysis of kmeans clustering
sigGenes.cluster<-lapply(sort(unique(tmp.kmeans$cluster)),function(i){
    names(tmp.kmeans$cluster[tmp.kmeans$cluster==i])
})

sigGenes.cluster.Entrez<-lapply(sigGenes.cluster,function(x){
  bitr(x,fromType="SYMBOL",toType="ENTREZID",annoDb="org.Mm.eg.db")$ENTREZID
})
names(sigGenes.cluster.Entrez)<-paste("cluster",1:16,sep="_")

ck<-compareCluster(geneCluster=sigGenes.cluster.Entrez,fun="enrichKEGG",organism="mmu",pvalueCutoff = 0.1)
plot(ck,showCategory=10)+ggtitle("KEGG geneset enrichment by cluster")

cg.mf<-compareCluster(geneCluster=sigGenes.cluster.Entrez,fun="enrichGO",organism="mouse",pvalueCutoff = 0.01,ont="MF")
plot(cg.mf,showCategory=10)+ggtitle("GO MF geneset enrichment by cluster")

cg.bp<-compareCluster(geneCluster=sigGenes.cluster.Entrez,fun="enrichGO",organism="mouse",pvalueCutoff = 0.01,ont="BP")
 plot(cg.bp,showCategory=10)+ggtitle("GO BP geneset enrichment by cluster")

cg.cc<-compareCluster(geneCluster=sigGenes.cluster.Entrez,fun="enrichGO",organism="mouse",pvalueCutoff = 0.01,ont="CC")
 plot(cg.cc,showCategory=10)+ggtitle("GO CC geneset enrichment by cluster")
 
require(ReactomePA)
cr<-compareCluster(geneCluster=sigGenes.cluster.Entrez,fun="enrichPathway",organism="mouse",pvalueCutoff = 0.1)
plot(cr,showCategory=10)+ggtitle("Reactome geneset enrichment by cluster")


```


```{r summarizing_sigGene_expression_dayxcelltype}
tmp<-vstMeltCDS(dat.filtered,geneset=lookupGeneName(dat.filtered,EDP_spectral_diff_test_sigGenes),scale=FALSE)

tmp.means<-tmp %>%
  group_by(gene_short_name,celltype,Day) %>%
  summarise(
    "gene_mean"=mean(value)
  ) %>%
  dcast("gene_short_name~celltype+Day")

rownames(tmp.means)<-tmp.means[,1]
tmp.means<-tmp.means[,-1]
  
gene_index<-tmp.means %>%
  dist() %>%
  hclust() %>%
  as.dendrogram() %>%
  order.dendrogram() 

gene_order<-rownames(tmp.means)[gene_index]


pdf("sigGenes_dayxcelltype_jitter.pdf",width=20,height=20)
plot_genes_jitter(dat.filtered[EDP_spectral_diff_test_sigGenes,],grouping="Day",color_by="celltype",plot_trend=TRUE,panel_order=gene_order) + facet_wrap(~ feature_label,scales="free_y") + scale_color_manual(values=celltype_colors)
dev.off()

pdf("sigGenes_dayxcelltype_lineplot.pdf",width=20,height=20)
plot_genes_line(dat.filtered[EDP_spectral_diff_test_sigGenes,],grouping="Day",color_by="celltype",panel_order=gene_order) + facet_wrap(~ feature_label,scales="free_y") + scale_color_manual(values=celltype_colors)
dev.off()

pdf("sigGenes_dayxcelltype_heatmap.pdf",width=20,height=20)
plot_pseudotime_heatmap(dat.filtered[EDP_spectral_diff_test_sigGenes,],cluster_rows=T) + facet_wrap("celltype")
plot_pseudotime_heatmap(dat.filtered[EDP_spectral_diff_test_sigGenes,pData(dat.filtered)$celltype=="2"],cluster_rows=T)
dev.off()


```

# One last attempt at pseudotime with newly polished results
```{r high_dispersion_genes_monocle_again,eval=F}
dat.filtered <-estimateSizeFactors(dat.filtered)
dat.filtered <-estimateDispersions(dat.filtered,cores=6,modelFormulaStr="~animal")

disp_table <- dispersionTable(dat.filtered)
unsup_clustering_genes <-subset(disp_table, mean_expression >= 0.1 & dispersion_empirical >= 5 * dispersion_fit)
high_bcv_genes<-unsup_clustering_genes$gene_id
dat.filtered <- setOrderingFilter(dat.filtered, high_bcv_genes)
plot_ordering_genes(dat.filtered)

fData(dat.filtered)$high_bcv<-FALSE
fData(dat.filtered)$high_bcv[rownames(fData(dat.filtered)) %in% high_bcv_genes]<-TRUE
```

```{r monocle_pseudotime}
dat.filtered<-setOrderingFilter(dat.filtered,rownames(all_cells_EDP_spectral_diff_test_res[all_cells_EDP_spectral_diff_test_res$qval <=0.001,]))

dat.filtered<-reduceDimension(dat.filtered,residualModelFormulaStr = "~Total_mRNAs",
                              norm_method="vstExprs",verbose=T,maxIter=100)

dat.filtered<-orderCells(dat.filtered)

plot_cell_trajectory(dat.filtered,color="Day") + scale_color_brewer(palette="Set1")
plot_cell_trajectory(dat.filtered,color="animal")
plot_cell_trajectory(dat.filtered,color="hemi_wrt_whisker_pull")
plot_cell_trajectory(dat.filtered,color="celltype") + scale_color_manual(values=celltype_colors)
plot_cell_trajectory(dat.filtered,color="label_fixed") + scale_color_manual(values=label_colors)

plot_cell_trajectory(dat.filtered,color="State") + facet_wrap("State")
root_state=1
dat.filtered<-orderCells(dat.filtered,root_state=root_state)

plot_cell_trajectory(dat.filtered,color="Pseudotime")

p1<-ggplot(pData(dat.filtered)) + geom_density(aes(x=Pseudotime,color=celltype)) + scale_color_manual(values=celltype_colors) + monocle:::monocle_theme_opts()
p2<-ggplot(pData(dat.filtered)) + geom_density(aes(x=Pseudotime,color=label_fixed)) + scale_color_manual(values=label_colors) + monocle:::monocle_theme_opts()
p3<-ggplot(pData(dat.filtered)) + geom_density(aes(x=Pseudotime,color=animal)) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
p4<-ggplot(pData(dat.filtered)) + geom_density(aes(x=Pseudotime,color=Day)) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
p5<-ggplot(pData(dat.filtered)) + geom_density(aes(x=Pseudotime,color=hemi_wrt_whisker_pull)) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts()
p6<-ggplot(subset(pData(dat.filtered),hemi_wrt_whisker_pull != "Unk")) + geom_density(aes(x=Pseudotime,color=Day,linetype=hemi_wrt_whisker_pull)) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts() + facet_grid(celltype~.,scales="free_y")
p7<-ggplot(subset(pData(dat.filtered))) + geom_density(aes(x=Pseudotime,color=Day)) + scale_color_brewer(palette="Set1") + monocle:::monocle_theme_opts() + facet_grid(celltype~.,scales="free_y")
pdf("Pseudotime_association.pdf",width=8,height=10)
grid.arrange(p1,p2,p3,p4,p5,ncol=1)
dev.off()

pdf("hemisphere_bias_over_pseudotime.pdf",width=10,height=5)
p6
dev.off()

# Genes with expression dependent on Pseudotime
# Consistent responses across cell types
pseudotime_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)", reducedModelFormulaStr = "~num_genes_expressed+celltype", cores=8) # Consider adding sex to remove Ddx3y, Xist, etc.

pseudotime_diff_test_sigGenes <- rownames(pseudotime_diff_test_res[pseudotime_diff_test_res$qval <=0.0000001,])

write.table(lookupGeneName(dat.filtered,pseudotime_diff_test_sigGenes),file="pseudotime_diff_test_sigGenes.tab",quote=F,sep="\t",row.names=F,col.names=F)

# Genes with celltype specific expression over pseudotome
pseudotime_celltype_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+celltype*sm.ns(Pseudotime,df=3)", reducedModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)", cores=8) # Consider adding sex to remove Ddx3y, Xist, etc.

pseudotime_celltype_diff_test_sigGenes <- rownames(pseudotime_celltype_diff_test_res[pseudotime_celltype_diff_test_res$qval <=0.01,])

write.table(lookupGeneName(dat.filtered,pseudotime_celltype_diff_test_sigGenes),file="pseudotime_celltype_diff_test_sigGenes.tab",quote=F,sep="\t",row.names=F,col.names=F)

p<-ggplot(pData(dat.filtered))
p + stat_ecdf(aes(x=Pseudotime,color=celltype)) + scale_color_manual(values=celltype_colors) + monocle:::monocle_theme_opts()
pdf("celltype_density_over_pseudotime_by_day.pdf",width=6,height=4)
p + geom_density(aes(x=Pseudotime,fill=celltype,color=celltype),alpha=0.5) + scale_color_manual(values=celltype_colors) + scale_fill_manual(values=celltype_colors) + monocle:::monocle_theme_opts() + facet_grid(Day~.,scales="free_y") + theme(legend.position=c(0.9,0.9))
dev.off()
p + geom_histogram(aes(x=Pseudotime,fill=celltype,color=celltype),position="dodge") + scale_color_manual(values=celltype_colors) +scale_fill_manual(values=celltype_colors) + monocle:::monocle_theme_opts()

my_pseudotime_plot_celltype(dat.filtered,marker=lookupGeneName(dat.filtered,sample(pseudotime_celltype_diff_test_sigGenes,1))) + scale_y_log10()

#plot_pseudotime_heatmap(dat.filtered[pseudotime_celltype_diff_test_sigGenes,],cores=6,show_rownames=T)
#plot_pseudotime_heatmap(dat.filtered[pseudotime_celltype_diff_test_sigGenes,],cores=6,show_rownames=T)


# pdf("random_sample_pseudotime_celltype_significant_de_genes.pdf",width=20,height=20)
# plot_genes_in_pseudotime(dat.filtered[sample(pseudotime_celltype_diff_test_sigGenes,50)], color_by = "celltype",ncol=5,vertical_jitter=0.2,horizontal_jitter=2) + scale_color_manual(values=celltype_colors)
# dev.off()
# 
# pdf("most_significant_pseudotime_significant_de_genes.pdf",width=20,height=40)
# plot_genes_in_pseudotime(dat.filtered[rownames(pseudotime_diff_test_res[pseudotime_diff_test_res$qval <=0.0000000000000000000000000001,]),], color_by = "Day",ncol=5,vertical_jitter=0.2,horizontal_jitter=2) + scale_color_brewer(palette="Set1")
# dev.off()

pdf("Pseudotime_heatmap.pdf",width=10,height=10)
pseudotime_heatmap<-plot_pseudotime_heatmap(dat.filtered[pseudotime_diff_test_sigGenes],cores=6,show_rownames=F,num_clusters=5,return_heatmap=T)
dev.off()

pseudotime_heatmap_clustering<-cutree(pseudotime_heatmap$tree_row,k=5)

pdf("Pseudotime_trajectory.pdf",width=8,height=5)
p1<-plot_cell_trajectory(dat.filtered,color="Day",cell_size=1,show_branch_points =FALSE) + scale_color_brewer(palette="Set1") + coord_equal(1.2)
p2<-plot_cell_trajectory(dat.filtered,color="celltype",cell_size=1,show_branch_points =FALSE) + scale_color_manual(values=celltype_colors)+ coord_equal(1.2)
grid.arrange(p1,p2,ncol=2)
dev.off()

plot_genes_in_pseudotime(dat.filtered[lookupGeneId(dat.filtered,sigGenes.cluster[[11]])],color="Day",vertical_jitter=0.05,horizontal_jitter=1,ncol=6) + scale_color_brewer(palette="Set1")

#Example Genes
#Chn1 and Chn1os1

#Finally, CHN1 encodes the Rac GTPase activating protein alpha-1-chimerin, which mediates the pruning of dendrites in response to synaptic activity [73].
#The diacylglycerol-binding protein {alpha}1-chimaerin regulates dendritic morphology. Proc Natl Acad Sci U S A. 2006;103:1924–1929. doi: 10.1073/pnas.0510655103.
# increased alpha1-chimaerin expression results in the pruning of dendritic spines and branches.This pruning activity requires both the diacylglycerol-binding and Rac GTPase-activating protein activity of alpha1-chimaerin.

#Nature. 2005 Jul 14;436(7048):261-5.Sign in
#Long-term sensory deprivation prevents dendritic spine loss in primary somatosensory cortex.

Chn1.genes<-c("Chn1","Chn1os1","Rac1","Rac3","Rhoa","Cdc42","Plcb1","Plcb2","Plcb4")
plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,Chn1.genes)],color="celltype",ncol=4,branch_states=c(12,14)) + scale_color_manual(values=celltype_colors)

myCorheatmap(dat.filtered[lookupGeneId(dat.filtered,Chn1.genes),],logMode=F,addrect=3)
```

```{r solange.syt7.story}
Solange.genes<-c("Syt7","Nrxn2")
pdf("Solange_Syt7_Nrxn2_brached_pseudotime.pdf",width=8,height=5)
plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,Solange.genes)],color="celltype",ncol=1,branch_states=c(12,14)) + scale_color_manual(values=celltype_colors)

plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,Solange.genes)],color="myBranch",ncol=1,branch_states=c(12,14)) + scale_color_brewer(palette="Set1")

dev.off()
```


```{r celltype_pseudotime_heatmap}

# tmp<-pseudotime_celltype_diff_test_sigGenes
# 
# newdata <- data.frame(Pseudotime = seq(0, max(pData(dat.filtered)$Pseudotime),length.out = 100)) 
# celltype1.smooth<-genSmoothCurves(dat.filtered[tmp,pData(dat.filtered)$celltype==1], trend_formula = '~sm.ns(Pseudotime, df=3)',cores=8,new_data = newdata,relative_expr = T)
# celltype2.smooth<-genSmoothCurves(dat.filtered[tmp,pData(dat.filtered)$celltype==2], trend_formula = '~sm.ns(Pseudotime, df=3)',cores=8,new_data = newdata,relative_expr = T)
# 
# 
# m1 = vstExprs(dat.filtered[tmp,pData(dat.filtered)$celltype==1], expr_matrix=celltype1.smooth)
# m2 = vstExprs(dat.filtered[tmp,pData(dat.filtered)$celltype==2], expr_matrix=celltype2.smooth)
# 
# m1=m1[!apply(m1,1,sd)==0,]
#   m1=Matrix::t(scale(Matrix::t(m1),center=TRUE))
#   m1=m1[is.na(row.names(m1)) == FALSE,]
#   m1[is.nan(m1)] = 0
# m1[m1>scale_max] = scale_max
# m1[m1<scale_min] = scale_min
# 
# m2=m2[!apply(m2,1,sd)==0,]
#   m2=Matrix::t(scale(Matrix::t(m2),center=TRUE))
#   m2=m2[is.na(row.names(m2)) == FALSE,]
#   m2[is.nan(m2)] = 0
# m2[m2>scale_max] = scale_max
# m2[m2<scale_min] = scale_min
# 
# m<-cbind(m1,m2)
# 
# heatmap_matrix <- m
# row_dist <- as.dist((1 - cor(Matrix::t(heatmap_matrix)))/2)
#   row_dist[is.na(row_dist)] <- 1
# bks <- seq(-3.1,3.1, by = 0.1)
# hmcols <- monocle:::blue2green2red(length(bks) - 1)
# ph <- pheatmap(heatmap_matrix, 
#                  useRaster = T,
#                  cluster_cols=FALSE, 
#                  cluster_rows=TRUE, 
#                  show_rownames=T, 
#                  show_colnames=F, 
#                  clustering_distance_rows=row_dist,
#                  clustering_method = "ward.D2",
#                  cutree_rows=24,
#                  #silent=TRUE,
#                  filename=NA,
#                  breaks=bks,
#                  color=hmcols)
# annotation_row <- data.frame(Cluster=factor(cutree(ph$tree_row, 24)))
# feature_label <- as.character(fData(dat.filtered)[row.names(heatmap_matrix), 'gene_short_name'])
# feature_label[is.na(feature_label)] <- row.names(heatmap_matrix)
#  
# row_ann_labels <- as.character(fData(dat.filtered)[row.names(annotation_row), 'gene_short_name'])
# row_ann_labels[is.na(row_ann_labels)] <- row.names(annotation_row)
# row.names(heatmap_matrix) <- feature_label
# row.names(annotation_row) <- row_ann_labels
# 
# ph_res <- pheatmap(heatmap_matrix[, ], #ph$tree_row$order
#                      useRaster = T,
#                      cluster_cols = FALSE, 
#                      cluster_rows = TRUE, 
#                      show_rownames=TRUE, 
#                      show_colnames=TRUE, 
#                      #scale="row",
#                      clustering_distance_rows=row_dist, #row_dist
#                      clustering_method = "ward.D2", #ward.D2
#                      #cutree_rows=24,
#                      # cutree_cols = 2,
#                      #annotation_row=annotation_row,
#                      treeheight_row = 20, 
#                      breaks=bks,
#                      fontsize = 5,
#                      color=hmcols,
#                    border_color=NA,
#                      #silent=TRUE,
#                      filename="celltype_DE_genes_pseudotime_heatmap.pdf"
#   )
# 
# pdf("celltype_DE_genes_pseudotime_heatmap.pdf",width=8,height=20)
# ph_res
# dev.off()
```

```{r BEAM_branch4}
# Branch4_BEAM_test<-BEAM(dat.filtered[expressed_genes],fullModelFormulaStr = "~num_genes_expressed+sm.ns(Pseudotime, df = 3)*Branch",reducedModelFormulaStr = "~num_genes_expressed+sm.ns(Pseudotime, df = 3)",branch_point=4,cores=6) #May need to add celltype to remove base effects from branch analysis
# 
# branch4_DE_genes<-row.names(subset(Branch4_BEAM_test, qval < 1e-4))
# write.table(lookupGeneName(dat.filtered,branch4_DE_genes),file="branch4_DE_genes.tab",quote=F,sep="\t",row.names=F,col.names=F)
# 
# pdf("BEAM_Branch4_test_results_heatmap.pdf",width=10,height=80)
# plot_genes_branched_heatmap(dat.filtered[branch4_DE_genes,],
# branch_point = 4,
# num_clusters = 4,
# cores = 6,
# use_gene_short_name = T,
# show_rownames = T)
# dev.off()
# 
# pdf("BEAM_Branch4_test_results_heatmap_compressed.pdf",width=10,height=10)
# plot_genes_branched_heatmap(dat.filtered[branch4_DE_genes,],
# branch_point = 4,
# num_clusters = 4,
# cores = 6,
# use_gene_short_name = T,
# show_rownames = T)
# dev.off()
# 
# plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Gabrb1","Gabrb2","Crebbp","Cacna1a"))], branch_point=4,color="celltype",ncol=2) + scale_color_manual(values=celltype_colors)
# 
# plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Adcy1","Cacna1a","Grin1","Grin2b","Grik5","Glul","Gls","Gnb5","Gng12","Gng2","Gnaq","Homer1","Homer3","Mapk1","Plcb2","Prkcb","Prkcg","Ppp3cb","Slc1a2"))], branch_point=4,color="State",ncol=3) 
# 
# #Proteosome
# plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Psmd6","Psmd8","Psma1","Psma2"))], branch_point=4,color="celltype",ncol=2) + scale_color_manual(values=celltype_colors)

#Branch Pie
VPM_only_enriched_branch_states<-c(9:13)
VPM_POM_enriched_branch_states<-c(14)
pData(dat.filtered)$Branch<-"Root"
pData(dat.filtered)$Branch[pData(dat.filtered)$State %in% VPM_POM_enriched_branch_states]<-"VPM/POM enriched"
pData(dat.filtered)$Branch[pData(dat.filtered)$State %in% VPM_only_enriched_branch_states]<-"VPM-only enriched"

# Test for subtype enrichments over branches/states

#Branch A subtype 1 enrichment
phyper(148,293+144+148,200+202+36,148+36,lower.tail=FALSE)
#[1] 7.03448e-14

#Branch B subtype 2 enrichment
phyper(202,200+202+36,293+144+148,202+144,lower.tail=FALSE)
#[1] 2.041391e-13

#Root subtype 2 enrichment
phyper(200,200+202+36,293+144+148,200+293,lower.tail=FALSE)
#[1] 0.9095474

#Root subtype 2 enrichment
phyper(293,293+144+148,200+202+36,200+293,lower.tail=FALSE)
#[1] 0.07152567


pdf("Branch4_celltype_bias.pdf",width=10,height=5)
p<-ggplot(pData(dat.filtered))
p + geom_bar(aes(x=1,fill=celltype),position="fill") + scale_fill_manual(values=celltype_colors) + coord_polar(theta="y") + facet_wrap("Branch") + monocle:::monocle_theme_opts()
p + geom_bar(aes(x=1,fill=label_fixed),position="fill") + scale_fill_manual(values=label_colors) + coord_polar(theta="y") + facet_wrap("Branch") + monocle:::monocle_theme_opts()
p + geom_bar(aes(x=1,fill=animal),position="fill") + coord_polar(theta="y") + facet_wrap("Branch") + monocle:::monocle_theme_opts()
dev.off()
```

```{r State14vs12_BEAM}
State14vs12_BEAM_test<-BEAM(dat.filtered[expressed_genes],fullModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime, df = 3)*Branch",reducedModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime, df = 3)",branch_states=c(14,12),cores=6) #May need to add celltype to remove base effects from branch analysis

State14vs12_DE_genes<-row.names(subset(State14vs12_BEAM_test, qval < 1e-4))
write.table(lookupGeneName(dat.filtered,State14vs12_DE_genes),file="State14vs12_DE_genes.tab",quote=F,sep="\t",row.names=F,col.names=F)

pdf("BEAM_State14vs12_test_results_heatmap.pdf",width=10,height=80)
plot_genes_branched_heatmap(dat.filtered[State14vs12_DE_genes,],
branch_states = c(14,12),
num_clusters = 4,
cores = 6,
use_gene_short_name = T,
show_rownames = T)
dev.off()

pdf("BEAM_State14vs12_test_results_heatmap_compressed.pdf",width=10,height=10)
plot_genes_branched_heatmap(dat.filtered[State14vs12_DE_genes,],
branch_states = c(14,12),
num_clusters = 4,
cores = 6,
use_gene_short_name = T,
show_rownames = F)
dev.off()

plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Kcnj4"))], branch_states=c(14,12),color="celltype",ncol=2) + scale_color_manual(values=celltype_colors)

#State 12 upregulated
State12up<-c("Calm2","Gm13483","linc−Steap1","App","Muc3a","Arc","Eif2s3y","Rbm5","Gm20659","Rsrp1","linc−Satb1−BP","Gm10800","Gm10801","Gm38039","Prpf40b","Arglu1","Hbb−bs","Atp2b1","Malat1","Tpr","Snhg9","Rccd1","Brinp3","Foxp1","Gm3764","Usp2","Cmip","Gm12940","Rfwd2","linc−BC032203−1","Nrxn1","linc−Cwc15","Vps13d","Pcdhga8","Dhx30","Ube2ql1","Ppm1a","Zcchc14","Atp9a","Gm26527","Wdr83","Tmed9","Mark2","Ank3","Meg3","Enc1","Ccser2","Paxbp1","Rims1","Agap1","Gtpbp2","D17Wsu92e","Nr2f1","Mmp17","Cic","Dusp7","Fam155a","Senp6","Tet2","Mtcl1","A830039N20Rik","Chd3","Lime1","Nbea","Bcl11b","Gm26789","5031434O11Rik","Rnf220","Mdga2","Zer1","Tia1","Miat","Gm19409","Ptpn12","Slc4a1ap","linc−Wdr27","linc−Celf4−AS","Akap7","Abcc5","Jph3","Ptprd","Stxbp2","Dopey1","Gm27004","Prkcb","Usp48","Set","Magi2","Pcdh7","Pcdh9","Homer1","Rfc1","Ccnl1","Phactr1","Gm10115","Rtel1","linc−Gnb2−AS","Gm32250","Gm43560","Socs2","1700025G04Rik","Acvr2b","linc−Slc28a3−4","Lrrk2","Mia","Mical3","linc−Copg2−AS","Kalrn","Ncor1","Ankhd1","Crebbp","Usp7","Ankrd17","Trrap","Zbtb18","Rad21","Arhgef1","Rbm39","Nucks1","Arap2","Reps1","Atp2a2","BC005537","Kcna1","linc−Rgmb−4","Mapkapk5","Rbm25","Nfib","Purb","Nav3","U2surp","Camta1","Rian","Pde10a","R3hdm1","Map7d2","linc−Rpn1−AS","Nfic","Robo3","2410089E03Rik","Safb2","linc−Gm13298−AS","Luc7l3","Cdr1","Srrm2","Prkce","Birc6","Nvl","Hs3st4","Myo18a","Pnisr","Plxna2","Ank2","Snhg11","linc−Peg3−AS","Unc80","linc−Glg1−AS","Matk","Ctdspl","Chd5","Tnrc6a","linc−Fbxo25−AS","Srrm3","Gm28221","Itgav","Rundc3a","Cc2d1b","mt−Co2","mt−Atp6","Ntrk3","mt−Atp8","Nrgn","Cttnbp2","Dgkz","Rimklb","Mprip","Pi4ka","Ehmt2","Nptn","Gm16586","P3h3","Tmem259","Snhg20","Cacna1a","Nav2","Mycbp2","Bptf","mt−Cytb","Macf1","D330041H03Rik","Rps6kb2","Mccc1","Gm13008","Cuedc1","Rnf157","Trmt1","Flna","Grik5","N4bp2l2","Cspp1","linc−Hs1bp3−AS","Dennd5a","Ubn2",
"uc012hdl.1","Cers4","Rab34","Gm17104","Tcea2","Tmeff1","Atf7","Cdk9","Zcchc7","March7","Mctp1","Xndc1","Tpk1","Phf21a","Miip","Plp1","E130114P18Rik","−","Erlin1","Exoc4","Grb10","Kcnmb4","Park2","2210408F21Rik","Tmem151b","Rnd2","Gm14218","1600020E01Rik","Sbf1","Coro2b","Clstn1","Mllt4","Adam15","Xist","Pkp4","Synj1","Atp2b4","Large","Fry","Wdr90","Doc2g","Git1","Gm10401","Bcl2l2","Rasal2","Adrbk1","Dzank1","Setd2","Ccdc149","Usp34","Morc2a","Cacng8","Clasrp","Gm26871","Mapk8","Telo2","Inf2","Ccser1","Impad1","Ythdc2","Baz2b","Ackr1","linc−Tmco1−AS","Arf3","Uhrf2","Crocc","Pten","Xkr4","Adamtsl1","Abca2","BC023719","Lmo4","Ndufa1","Csmd1","Gm20501","Arpc3","linc−AU018091","linc−2310003H01Rik−AS","mt−Nd3","mt−Co3","mt−Nd4l","Dalrd3","Gm28151","Ywhag","Tmem181b−ps","uc012hdk.1","Igsf8","Gm10263","Grin2b","mt−Co1","Sv2a","uc009vev.1","Smad4","Gm15892","Xpr1","Tgfbr3l","Cul3","Rasa1","Ppp1r21","Chuk","Senp3","Ppp1r12c","Ube2q1","Dync1h1","linc−Vdac3","Ttll3","C2cd5","Lss","Smpd4","Agap3","linc−Chmp6−AS","Hnrnpl","Ephb6","Rai1","Npepps","Sfpq","Kif21a","Agtpbp1","Sfswap","Pan3","Dpp7","linc−Pigq−AS","Vps16","Etnk1","Gm27032","Ube3a","Asphd1","Brsk2","Med12","linc−Pfkl−AS","Atp11b","mt−Nd6","Atxn2","linc−Rpn1","Nexn","linc−Nf2−AS","Gm37756","Mllt10","Gm37401","Gls","Selt","Usp40","Nlk","Ptpru","Fxyd5","linc−Mgrn1−AS","Gabbr2","Cadps","Ep300","Ppp2cb","Dpy19l1","Foxg1","Thsd7b","Rapgefl1","Sptan1","Sptbn1","Son","Ppp3cb","Nat8l","4930524O07Rik","Hipk4","linc−Frrs1l−AS","Ddx17","Cplx2","Pbx1","Pcdha11","Adgrl1","Fam57b","Sez6l2","Lrp3","AI480526","linc−Exd1","linc−Itm2b−AS","Kbtbd11","Gm26723","Pabpn1","Kcnb1","Bzrap1","linc−Smpd1−AS","Brd2","Syt7","Elavl3","Basp1","Celsr2","Luc7l2","Sdccag8","Thra","A430018G15Rik","linc−Atp2b2−AS","Slc12a5","Nrxn2","linc−Atp6v1b2−AS","linc−Nrxn3","linc−Ngfrap1−AS","Mphosph8","Gm17139","Usp16","1700113A16Rik","Tnik",
"Kmt2e","Trank1","Gm19938","linc−Celf2−1","Nsmaf","linc−Cnot10","RP23−49L8.5","Mtf2","Psme4","Homer3","Rgs11","Pde4dip","4933439C10Rik","4930402H24Rik","Leng8","Gatsl2","Unc79","mt−Nd5","Lrrc7","Man2c1","Thy1","Lars2","Gm15564","mt−Nd1","mt−Nd4","Gm10419","Arhgef25","Kcnj4","Erdr1","Iqsec1","Ahi1","Dynll2","Agrn","Gp1bb","Mbtd1","Dlg3","Elmod1","Thoc2","Crebzf","Pgm2l1","Sec62","Rasgef1a","Add1","Setd5","Tnk2","Slc25a23","Ctdnep1","Cep170b","Pabpc1","Cacna1e","Nktr","Rapgef4","linc−Lonrf2−AS","Adgrl2","Chd6","Gm26917","Pclo","Nrxn3","Pcbp2","Gm12744","Zmiz2","Adgrb2","Adgrb1","Shisa7","Ppp1r9b","linc−Dnajc5−AS","Adcy1","Pura","mt−Nd2","Ly6d","Gstk1","Gm21860","BC030499","Gm13530","Hsd3b7","Snurf","Aldh1l1","Gm15155","Gm37986","linc−Pcdha1","Aif1","Aldoc","Npy","Nsmf","Mbp","Ptpmt1","Apoe","B230307C23Rik")
#State 14 upregulated
State14up<-c("Ccdc17","Garnl3","Ldhb","Syndig1","Adk","Tsc22d1","Metrnl","Gm11007","Ppp2r2b","Eno1","Cyth2","Ahsa1","Uqcrc1","Fez1","Hspa8","Ywhae","Psmc1","Pja1","Atp6v1c1","Tmem59","Ndfip1","Eif5a","Ttll1","Hspbp1","Tpi1","Ppp1ca","Slc25a3","Napa","Chn1","Hnrnpk","Rab7","Atp6v1d","Cnbp","Gm8325","2900011O08Rik","Ap2m1","Pcna","Nell2","3110035E14Rik","Rad23a","Ruvbl1","Tmbim6","Sdcbp","Got1","Abcf2","Map1lc3b","Pkm","Ddx1","Zwint","Ube2v1","Dtd1","Grwd1","Ciapin1","Gm38112","Bud31","Ece1","Pls3","Cops4","Pde1a","Lrrc57","Ssbp2","Atp6v1b2","Capza2","Ppp1r7","Insig2","Lgi1","Plk2","Ptp4a1","Cacnb4","Zfp382","Ubb","Hmgn2","Stmn1","Emc4","H2afz","Sap18","Bnip3l","Fkbp3","Sep15","Chgb","Slc25a5","Pdhb","Timm23","Bcap31","Snrpn","Ube2v2","Mospd1","Mcrs1","Ift22","Hagh","Supt4a","Ndufs3","Dynlrb1","Chchd6","Mettl5","Psma1","Cct6a","Taldo1","Sec13","C330013J21Rik","Atp5g1","Bphl","Naa20","Sdhb","Eif3g","Snca","Sdhd","Eif2b3","Atp6v0c","Cfl1","Caln1","Timm17a","Tecr","Rab3a","Eri3","Psmb2","Pex11b","Ckb","Atp6v1e1","Mlf2","Mdh2","Snap25","Aldoa","Ywhah","Tspan7","Ndufa9","Cbr1","Umad1","Snx3","Vps29","Abhd5","1500004A13Rik","Unc50","Sar1b","Psmd14","Mad2l1","B2m","Acot13","Sumo1","1700123O20Rik","Commd3","Vmp1","Bnip3","Psmg2","linc−Arf3−AS","Snapin","Cfdp1","Rwdd2a","Gadd45a","Ldb2","Lsm10","linc−Parp2−AS","Rpp25","Bdh1","4833412C05Rik","Meig1","Tspan17","Sln","Auts2","Fen1","Pradc1","Srsf4","Ift43","Srfbp1","Baiap2l1","Lypd1","Gm14532","Frmd4a","Gabarapl2","Opcml","Plxna4os3","Cpne4","2310030G06Rik","Zdhhc12","Gm15270","Gm20390","linc−D430019H16Rik−1","Chmp2a","Gm10197","Tmem127","Ly6e","Hist3h2ba","Cck","Nr1d1","Rpl10","Rpl11","Hpca","Kdelr1","Camk2a","Dpy19l3","Dtna","Cwc22","Mfsd1","Dnajc6","Arhgap32","Btf3","Mlx","H3f3a","Fabp5","Ubl5","Vdac1","Gapdh","Chrm1","Dcaf7","Vps25","1700037H04Rik","Clta","Smpdl3a","Psma6","Cryl1","Ninj1","Tm9sf2","Nudt19","Ppp2r1a","Tuba1b","Cdo1","Klhdc3","Gm26825","Rab11a","Tubb4b","Map2k4","Actg1","Pdlim1","Jup","Uchl1",
"Arsb","Nkain2","Fam163b","Nmnat2","9530068E07Rik","Bre","Atp6v1h","Arf1","Dstn","Doc2a","Stxbp1","Fscn1","Gal3st3","Ywhab","Clu","Syn1","Nupl1","Tsg101","Ppa1","Cend1","Mff","Ubl7","Kctd10","Tsnax","Pef1","Tubb5","Pgam5","Actb","Gde1","Tuba4a","Atp1a3","Gabrb1","Fam216a","2610035D17Rik","Crym","Srm","Vamp2","Caly","Rab26","Vta1","Rab3ip","Hdhd3","Dhrs1","Strap","Igfbp4","A830010M20Rik","Eif3h","Atp5c1","Cdc42","Psma2","Phyh","Gm11549","Eif4a1","Itm2b","Bsg","Dram2","Vdac3","Psmc6","Olfm2","Vdac3−ps1","Prdx1","Tubb3","Pgrmc1","Cacybp","Tuba1a","Hmox2","Tubb2a","Wdr83os","Chmp2b","Tusc3","Arl6","Moap1","Txndc15","Cops6","Dync2li1","Idh3a","Capzb","Tubb4a","Tspan3","Atg3","Trappc2","Mdh1","Xbp1","Tspan31","Rab11b","Eif4a2","Syt1","Asah1","Scoc","Psmd6","Vdac2","Ssr2","Rprm","Sumo2","Psma5","Pdcd6","Ndufv2","Pgam1","Stx8","Uchl3","Cript","Fabp3","1110032A03Rik","Atp5f1","Skp1a","Foxp2","Ywhaz","Ociad1","Cyc1","Ngfrap1","Nipsnap3b","Tagln3","Atp6v1g2","Fhit","N6amt2","Nabp2","Sstr2","Cox6b1","Ppia","Stmn3","Zfp637","Gm13778","2810408I11Rik","Ctso","Gm16596","Nrn1","Nhp2l1","Glrb","Ncoa4","1110008F13Rik","Eif3k","A930005H10Rik","Zfp78","Fxyd1","Rgs10","Cd59b","Ift57","1110059E24Rik","Anks1b","B3galnt1","Usp14","Omg","Pdia3","Vapa","1110051M20Rik","Eif3l","Aktip","Cops8","Tmem129","Gm9866","Dok5","Gng12","Prkcg","Atp6ap1","Cct8","Rnf14","Phyhipl","Isca1","Mapk10","Snx2","Asns","Vps35","Fkbp4","Ephx4","Tmem159","Esd","Cd47","Syt5","Tmed2","Pgk1","Aamp","Smu1","Mllt11","Ywhaq","Cacng3","Ppp5c","Fkbp1a","Cct7","Gnb5","Tm2d2","Cx3cl1","Dusp14","Snap47","Atp5a1","Gm7964","Rbbp7","A830005F24Rik","Slc35a4","Pitpnb","Nsg1","Tfg","Ndrg3","Slc3a2","Ift46","Bag5","Klhdc2","2210418O10Rik","Hexa","Msmo1","S100a10","Pak1","Fxyd6","Necab1","Cnot7","Tfdp1","Pcbp3","Prps1","Camk1","Cd81","Cct4","Cdipt","Rcan2","linc−Bhlhe22","Clptm1","Klhl7","Pdha1","Atad1","Ube2i","Hnrnpf","Myadm","Hmgcs1","linc−Dab1−2","Sqle","Pcdhgc5","Neurod6","Fam49b","Chrna7","Lamp1","Eif4e","Rnf13","Tcp1","Crbn","Kpna2","Nipa2","Gabrb2","Prepl","Tollip","Arpc5","Necap1","March5","Cdh18","1810055G02Rik","Emb","Chchd3","Itfg1","Rtn3","Ppme1","Copg1","Scamp1","Hspa9","Sergef","Cd164","Myo5b","Mgat4c","Pfn4","Rab3b","Pdia4","Prss12","Serpini1","Cdh13","Chtf8","Atp6v0a1","Azin1","linc−Atg7−AS","Fgf13","Cbr4","Eno2","Tmem5","Eef1a1","Sgk1","Pik3r4","Ola1","Arl8b","Gm17494","Gm13716","Prdx3","Ddx39b","Glul","Kantr","Usp9x","Sigmar1","Exoc6","Mtmr9","Lgmn","Usp22","Mapk1","Atxn10","Rac1","Tuba1c","Fhl2","Fdft1","Ctsd","Atp6ap2","Ctgf","Etaa1os","Slc25a1","Nnat")

phyper(length(intersect(State14up,Bayes.collins.mouse.psd.full)),length(Bayes.collins.mouse.psd.full),length(fData(dat.filtered)$gene_short_name[!fData(dat.filtered)$gene_short_name %in% Bayes.collins.mouse.psd.full]),length(State14up),lower.tail=FALSE)

phyper(length(intersect(State14up,Presynaptic.genes)),length(Presynaptic.genes),length(fData(dat.filtered)$gene_short_name[!fData(dat.filtered)$gene_short_name %in% Presynaptic.genes]),length(State14up),lower.tail=FALSE)

phyper(length(intersect(State14up,Postsynaptic.genes)),length(Postsynaptic.genes),length(fData(dat.filtered)$gene_short_name[!fData(dat.filtered)$gene_short_name %in% Postsynaptic.genes]),length(State14up),lower.tail=FALSE)

phyper(length(intersect(State14up,GPCRs)),length(GPCRs),length(fData(dat.filtered)$gene_short_name[!fData(dat.filtered)$gene_short_name %in% GPCRs]),length(State14up),lower.tail=FALSE)

phyper(length(intersect(State14up,Presynaptic_Lipstein)),length(Presynaptic_Lipstein),length(fData(dat.filtered)$gene_short_name[!fData(dat.filtered)$gene_short_name %in% Presynaptic_Lipstein]),length(State14up),lower.tail=FALSE)

phyper(length(intersect(State12up,Presynaptic_Lipstein)),length(Presynaptic_Lipstein),length(fData(dat.filtered)$gene_short_name[!fData(dat.filtered)$gene_short_name %in% Presynaptic_Lipstein]),length(State12up),lower.tail=FALSE)

phyper(length(intersect(State14up,PSD_Dosemeci)),length(Presynaptic_Lipstein),length(expressed_genes[!expressed_genes %in% lookupGeneId(dat.filtered,PSD_Dosemeci)]),length(State14up),lower.tail=FALSE)

phyper(length(intersect(State12up,PSD_Dosemeci)),length(Presynaptic_Lipstein),length(expressed_genes[!expressed_genes %in% lookupGeneId(dat.filtered,PSD_Dosemeci)]),length(State12up),lower.tail=FALSE)




plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Nsmf","Park2","Arc","Ank2","Ank3","Cacng8","Clstn1","Dlg3","Gabbr2","Grin2b","Grik5","Homer1","Homer3","Lrrc7","Nbea","Pten","Kcnj4","Kcnb1","Usp48"))],branch_states=c(12,14),ncol=3,color_by="Branch") + scale_color_brewer(palette="Set1")
```

```{r State12vs13_BEAM}
State12vs13_BEAM_test<-BEAM(dat.filtered[expressed_genes],fullModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime, df = 3)*Branch",reducedModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime, df = 3)",branch_states=c(12,13),cores=6) #May need to add celltype to remove base effects from branch analysis

State12vs13_DE_genes<-row.names(subset(State12vs13_BEAM_test, qval < 1e-4))
write.table(lookupGeneName(dat.filtered,State12vs13_DE_genes),file="State12vs13_DE_genes.tab",quote=F,sep="\t",row.names=F,col.names=F)

pdf("BEAM_State12vs13_test_results_heatmap.pdf",width=10,height=80)
plot_genes_branched_heatmap(dat.filtered[State12vs13_DE_genes,],
branch_states = c(12,13),
num_clusters = 4,
cores = 6,
use_gene_short_name = T,
show_rownames = T)
dev.off()

pdf("BEAM_State12vs13_test_results_heatmap_compressed.pdf",width=10,height=10)
plot_genes_branched_heatmap(dat.filtered[State12vs13_DE_genes,],
branch_states = c(12,13),
num_clusters = 4,
cores = 6,
use_gene_short_name = T,
show_rownames = F)
dev.off()

plot_genes_branched_pseudotime(dat.filtered[sample(State12vs13_DE_genes,21)], branch_states=c(12,13),color="celltype",ncol=3) + scale_color_manual(values=celltype_colors)

```

```{r beam4_plus_state12_vs_13}
lineage_DE_genes<-unique(c(branch4_DE_genes,State12vs13_DE_genes))

lineage_DE_TFs<-c("Aff4","Arc","Atf4","Atf7","Atrx","Atxn2","Batf3","Baz1b","Baz2b","Bcl11b","Bptf","Brd2","Cct4","Chd3","Chd5","Chd6","Cic","Cnbp","Crebbp","Crebzf","Crip2","Dbp","E2f3","Elk3","Eno1","Ep300","Etv1","Fezf2","Fhl2","Foxg1","Foxp1","Foxp2","Hira","Id2","Kcnip3","Klf3","Ldb2","Lmo4","Med12","Mllt10","Mllt4","Mlx","Morf4l1","Mtf2","Ncald","Ncoa4","Ncor1","Neurod6","Nfe2l1","Nfib","Nfic","Nr1d1","Nr2f1","Pbx1","Pura","Rnf13","Rnf14","Rnf4","Sap18","Sertad2","Smad4","Snd1","Srcap","Sub1","Tef","Tfdp1","Tfdp2","Thra","Tnrc6a","Trim28","Trmt1","Tsc22d1","Ttll5","Tub","Xbp1","Zfand6","Zhx2","Zmym4","Znf672")

pdf("BEAM_Branch4_and_State12vs13_test_results_heatmap_compressed.pdf",width=10,height=10)
branch4_and_State12v13_heatmap<-plot_genes_branched_heatmap(dat.filtered[lineage_DE_genes,],
branch_point = 4,
num_clusters = 7,
cores = 6,
use_gene_short_name = T,
show_rownames = F,
return_heatmap=T)
dev.off()

branch4_and_State12v13_pseudotime_heatmap_clustering<-cutree(branch4_and_State12v13_heatmap$ph$tree_row,k=7)

pdf("BEAM_Branch4_and_State12vs13_TFs_heatmap.pdf",width=8,height=8)
branch4_and_State12v13_TF_heatmap<-plot_genes_branched_heatmap(dat.filtered[lookupGeneId(dat.filtered,lineage_DE_TFs),],
branch_point = 4,
num_clusters = 1,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap=T)
dev.off()


save.xlsx.2("Branch_tests_sigGenes.xlsx",lapply(c(1:7),function(x){lookupGeneName(dat.filtered,names(branch4_and_State12v13_pseudotime_heatmap_clustering)[branch4_and_State12v13_pseudotime_heatmap_clustering==x])}))


lineage_DE_genes

#Expressed GluR genes
pdf("GluR_genes.pdf",width=8,height=6)
plot_genes_branched_heatmap(dat.filtered[intersect(lineage_DE_genes,lookupGeneId(dat.filtered,GluR_genes)),],
branch_point = 4,
num_clusters = 1,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap=T)
dev.off()

#Ligand-gated ion channels & gPCRS
pdf("Ligand_gated_Ion_channels_and_GPCRs",width=8,height=6)
plot_genes_branched_heatmap(dat.filtered[intersect(lineage_DE_genes,lookupGeneId(dat.filtered,unique(c(GPCRs,Ligand_gated_ion_channels,Ligand_gated_ion_channels_HUGO)))),],
branch_point = 4,
num_clusters = 1,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap=F)
dev.off()

#Ion channels
pdf("Ion_channels.pdf",width=8,height=6)
plot_genes_branched_heatmap(dat.filtered[intersect(lineage_DE_genes,lookupGeneId(dat.filtered,unique(Ion_channels))),],
branch_point = 4,
num_clusters = 1,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap=F)
dev.off()


#Branch specific TFs
pdf("Branch-specific_TFs.pdf",width=8,height=6)
plot_genes_branched_heatmap(dat.filtered[lookupGeneId(dat.filtered,lineage_DE_TFs[!lineage_DE_TFs %in% Pseudotime_sigGenes_TFs]),],
branch_point = 4,
num_clusters = 1,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap=F)
dev.off()

#Branch dependent TFs
pdf("Branch-dependent_TFs.pdf",width=8,height=8)
plot_genes_branched_heatmap(dat.filtered[lookupGeneId(dat.filtered,lineage_DE_TFs),],
branch_point = 4,
num_clusters = 1,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap=F)
dev.off()


Targeted_presynaptic_list<-c("Syngr1","Slc17a7","Unc13a","Sv2a","Ywhag","Nrxn1","Syt7","Nrxn2","Gls","Nrxn3","Nat8l","Cplx2","Rims1","Cadps2","Synj1","Vamp2","Cplx3","Rab3b","Park7","Snca","Snap25","Rab3a","Napa","Syt1","Snap47","Syt5","Usp14","Snapin","Rab5a","Stxbp1","Syn1","Doc2a")

#All Figure 8 Genes
pdf("Figure_8_selected_genes_heatmap.pdf",width=8,height=8)
plot_genes_branched_heatmap(dat.filtered[intersect(lineage_DE_genes,lookupGeneId(dat.filtered,unique(c(Targeted_presynaptic_list,Ligand_gated_ion_channels,lineage_DE_TFs[!lineage_DE_TFs %in% Pseudotime_sigGenes_TFs])))),],
branch_point = 4,
num_clusters = 1,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap=F)
dev.off()

plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Kcnip3","Nr4a1","Mef2c","Junb","Fos","Arc","Jun"))],color="celltype",branch_states=c(12,14),ncol=2) + scale_color_manual(values=celltype_colors)

#Synaptic transmission genes
pdf("Synaptic_transmission_genes.pdf",width=8,height=8)
plot_genes_branched_heatmap(dat.filtered[intersect(lineage_DE_genes,lookupGeneId(dat.filtered,unique(Synaptic_transmission_genes))),],
branch_point = 4,
num_clusters = 1,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap=F)
dev.off()

```


```{r clusterCompare_btwn_states}
require(clusterProfiler)
require(org.Mm.eg.db)
require(ReactomePA)

# Using 1% FDR for GO enrichments
State14up_entrez<-bitr(str_split_fixed(lookupGeneId(dat.filtered,State14up),"\\.",2)[,1], fromType="ENSEMBL", toType="ENTREZID", annoDb="org.Mm.eg.db")
State12up_entrez<-bitr(str_split_fixed(lookupGeneId(dat.filtered,State12up),"\\.",2)[,1], fromType="ENSEMBL", toType="ENTREZID", annoDb="org.Mm.eg.db")

branch_DE_genes<-list("State12"=State12up_entrez$ENTREZID,"State14"=State14up_entrez$ENTREZID)

branch_DE_MF<-compareCluster(branch_DE_genes,fun="enrichGO",ont="MF",pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=0.1,readable=TRUE,organism="mouse")

branch_DE_BP<-compareCluster(branch_DE_genes,fun="enrichGO",ont="BP",pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=0.1,readable=TRUE,organism="mouse")

branch_DE_CC<-compareCluster(branch_DE_genes,fun="enrichGO",ont="CC",pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=0.1,readable=TRUE,organism="mouse")

branch_DE_Pathway<-compareCluster(branch_DE_genes,fun="enrichPathway",pAdjustMethod="BH",pvalueCutoff=0.1,qvalueCutoff=0.1,readable=TRUE,organism="mouse")

```

```{r Enrichments_of_known_relevant_gene_sets}

State14up[State14up %in% fData(dat.filtered)$gene_short_name[grepl("^Tpc",fData(dat.filtered)$gene_short_name)]]
State12up[State12up %in% fData(dat.filtered)$gene_short_name[grepl("^Tpc",fData(dat.filtered)$gene_short_name)]]

#Genes with branch-specific expression
State12up[State12up %in% K_channels_Mouse]
State12up[State12up %in% GluR_genes]
State14up[State14up %in% Ligand_gated_ion_channels]
State12up[State12up %in% Ligand_gated_ion_channels]
State14up[State14up %in% GPCRs]
State12up[State12up %in% GPCRs]

```


```{r State13_vs_all}
pData(dat.filtered)$isState13<-pData(dat.filtered)$State==13

State13_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)+isState13", reducedModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)", cores=8)

State13_diff_test_sigGenes <- rownames(State13_diff_test_res[State13_diff_test_res$qval <=0.0001,])

pData(dat.filtered)$isState12<-pData(dat.filtered)$State==12

State12_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)+isState12", reducedModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)", cores=8)

State12_diff_test_sigGenes <- rownames(State12_diff_test_res[State12_diff_test_res$qval <=0.0001,])

pData(dat.filtered)$isState16<-pData(dat.filtered)$State==16

State16_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)+isState16", reducedModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)", cores=8)

State16_diff_test_sigGenes <- rownames(State16_diff_test_res[State16_diff_test_res$qval <=0.0001,])

pData(dat.filtered)$isState14<-pData(dat.filtered)$State==14

State14_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)+isState14", reducedModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)", cores=8)

State14_diff_test_sigGenes <- rownames(State14_diff_test_res[State14_diff_test_res$qval <=0.0000001,])

pData(dat.filtered)$isState17<-pData(dat.filtered)$State==17

State14_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)+isState17", reducedModelFormulaStr = "~num_genes_expressed+celltype+sm.ns(Pseudotime,df=3)", cores=8)

State17_diff_test_sigGenes <- rownames(State17_diff_test_res[State17_diff_test_res$qval <=0.0000001,])



```


```{r Synaptic_remodeling}
#Synaptic remodeling (SynaptomeD)
Presynaptic.genes<-c("Gnb1","Lrrc47","Kcnab2","Vamp3","Eno1","Pink1","Alpl","Runx3","Epb41","Dem1","Uqcrh","Eps15","Dnajc6","Gnai3","Kcna3","Atp5f1","Atp1a1","Sv2a","Hormad1","S100a13","S100a1","Atp1a2","Ndufs2","Mgst3","Atp1b1","Tnr","Rasal2","Glul","Aspm","Csrp1","Syt2","Ppfia4","Nfasc","Sertad4","Arf1","Acta1","Actn2","Fh","Ywhaq","Hpcal1","Vsnl1","Gdf7","Hadhb","Mapre3","Ehd3","Nrxn1","Sptbn1","Rtn4","Rab1a","Aak1","Atp6v1b1","Actg2","Immt","Dpp4","Scn2a","Scn1a","Slc25a12","Adam23","Map2","Arpc2","Wnt10a","Ndufa10","Il5ra","Arpc4","Slc6a1","Syn2","Dync1li1","Ctnnb1","Uqcrc1","Bsn","Gnai2","Tkt","Erc2","Pdhb","Atp6v1a","Ndufb4","Aldh1l1","Kcnab1","Ap2m1","Opa1","Dlg1","Gak","Ctbp1","Add1","Slc4a4","Snca","Ppp3ca","Ank2","Anxa5","Slc25a4","Golph3","Rab3c","Sncaip","Acsl6","Vdac1","Ppp2ca","Ndufa2","Camk2a","Anxa6","Cplx2","Canx","Tubb2a","Sox4","Ddr1","Hspa1b","Pacsin1","Cpne5","Hsp90ab1","Rims1","Gna12","Actb","Rac1","Amph","Dbnl","Ogdh","Ppia","Stx1a","Mdh2","Gnai1","Pclo","Adam22","Gnb2","Vgf","Dld","Nrcam","Cav1","Wasl","Chchd3","Exoc4","Cdk5","Atp6v1b2","Ppp3cc","Nefl","Dpysl2","Vdac3","Sdcbp","Wwp1","Uqcrb","Ywhaz","Atp6v1c1","Rims2","Sybu","Ptk2","Cyc1","Sh3gl2","Vcp","Tln1","Clta","Hspa5","Stxbp1","Dnm1","Sptan1","Pfkp","Atp5c1","Kif5b","Ogdhl","Prkg1","Hk1","Ppp3cb","Vdac2","Glud1","Sfxn3","Ina","Dpysl4","Ap2a2","Brsk2","Hbb","Hbd","Ldha","Mapk8ip1","Ndufs3","Mtch2","Nrxn2","Sf3b2","Rab1b","Dpp3","Actn3","Sptbn2","Pc","Ppfia1","Map6","Ndufc2","Me3","Dlat","Ncam1","Atp5l","Thy1","Hspa8","Ndufa9","Kcna1","Vamp1","Gapdh","Tpi1","Eno2","Phb2","Cntn1","Pfkm","Amhr2","Cs","Atp5b","Dctn2","Syt1","Git2","Atp2a2","Rph3a","Arhgef7","Stxbp6","Rtn1","Gphn","Actn1","Papln","Ston2","Calm1","Dync1h1","Hsp90aa1","Rage","Ckb","Cyfip1","Map1a","Myo5a","Tln2","Tpm1","Pkm2","Nptn","Cox5a","Idh3a","Snrpa1","Hba2","Hba1","Mapk8ip3","Caskin1","Xylt1","Uqcrc2","Tufm","Aldoa","Stx4","Vps35","Gnao1","Atp6v0d1","Lcat","Ap1g1","Tubb3","Ywhae","Pfn1","C1qbp","Eif5a","Vamp2","Ubb","Epn2","Kcnj12","Aldoc","Git1","Ap2b1","Jup","Cnp","Atp6v0a1","Mpp2","Gfap","Nsf","Col1a1","Cltc","Gna13","Prkca","Atp5h","Grb2","Actg1","Hgs","Epb41l3","Ndufv2","Napg","Aqp4","Cdh2","Atp5a1","Wdr7","Mbp","Bsg","Sgta","Pip5k1c","Eef2","Tubb4","Stxbp2","Col5a3","Dnm2","Prdx2","Calr","Prkaca","Unc13a","Rab3a","Uqcrfs1","Pop4","Sptbn4","Rabac1","Atp1a3","Napa","Sphk2","Ppfia3","Ap2a1","Ppp2r1a","Prkcg","Csnk2a1","Snph","Plcb1","Snap25","Napb","Src","Ywhab","Gnas","Tubb1","Dnajc5","Atp5j","Synj1","Atp5o","Ndufv3","Pfkl","S100b","Slc25a18","Atp6v1e1","Tuba8","Snap29","Mapk1","Ap1b1","Ywhah","Syn3","Aco2","Ndufa6","Samm50","Pdha1","Cask","Syn1","Syp","Dlg3","Prps1","Slc25a5","Magea5","L1cam","Gdi1")

Bayes.collins.mouse.psd.full<-c("Grin2a","Grin2b","Arc","Dlg4","Nos1","Hras1","Dlg3","Syngap1","Dlg2","Nf1","Baiap2","Gria1","Camk2a","Arhgap32","Lrrc7","Sipa1l1","Iqsec3","Cnksr2","Agap2","Dab2ip","Dmxl2","Gria2","Gria3","Gria4","Grm3","Grm5","Grin2d","Gabbr2","Lphn3","Atp2a2","Atp2b1","Atp2b2","Atp2b4","Atp1a3","Atp1a1","Atp1a4","Atp1b1","Cacna1e","Cacnb3","Cacna1a","Cacnb1","Cacna1b","Cacna2d2","Cacna2d3","Cacng3","Kcnma1","Kcna2","Kcnq2","Vdac1","Vdac2","Itpr1","Ryr2","Gphn","Atp6v0a1","Atp6v1h","Bai1","Bai3","Slc1a2","S1pr1","Epha4","Hcn2","Il1rapl1","Lrp1","Plxna1","Slc12a5","Slc17a7","Slc4a10","Slc4a4","Slc8a2","Homer1","Shank3","Tjp1","Mpp2","Mpp3","Grip2","Tjp2","Nckap1","Caskin1","Flot1","Traf3","Dlgap2","Sh3kbp1","Sorbs1","Akap2","Eps15l1","Nbea","Ywhab","Ywhae","Ywhah","Ywhag","Camk2b","Camk2d","Camk2g","Dclk1","Prkar2b","Mark2","Adrbk1","Mink1","Prkce","Csnk1e","Prkacb","Rock2","Cdc42bpb","Cdk5","Csnk1a1","Mapk1","Gsk3b","Map4k4","Map2k1","Prkar2a","Prkar1a","Pdpk1","Fyn","Lyn","Yes1","Ppp1r9b","Ppp1cc","Ppp1cb","Ppp3ca","Ppp2r1a","Ptprs","Ppp1r9a","Ptprd","Ptprz1","Ptpn11","Ptprf","Gnao1","Sept7","Gnb1","Sept6","Sept2","Sept3","Sept8","Gnai2","Gnaz","Gnb2","Gnb5","Rab3a","Rala","Sept11","Sept9","Gnas","Rab5a","Rab10","Rac1","Rap1a","Sept4","Gnb4","Rap2a","Cit",
"Rapgef4","Gap43","Git1","Rab11fip2","Arhgef2","Agap3","Elmo2","Arfgap3","Arhgef9","Agap1","Dock3","Fmnl1","G3bp2","Gdi1","Gng12","Ngef","Rapgef2","Rgs7","Gipc1","Hspa5","Dnaja2","Hspa9","Hsp90ab1","Tcp1","Cct2","Cct4","Cct5","Dnaja1","Hspd1","Hspa12a","Cct3","Cct7","Cct8","Dnajc6","Hsph1","Dnajc11","Pde2a","Pde4b","Bcan","Vcan","Olfm1","Exoc4","Atp5b","Atp6v1a","Atp6v1b2","Atp5a1","Atp6v0d1","Atp6v1e1","Atad3a","Atp5c1","Atp6v1c1","Atp6v1d","Ndufa9","Ndufs1","Ndufs3","Ndufv2","Ndufa4","Ndufa8","Ndufa10","Ndufs2","Dpp6","Psmd14","Psmd2","Cyfip1","Gdap1","Dtna","Gdap1l1","Bsg","Ccny","Daam1","Dbc1","Enah","Gprin1","Lsamp","Lrrtm4","Numbl","Dnm1","Dnm2","Dgkb","Nrn1","Pip4k2b","Stub1","Plcb1","Rtn3","Strn","Strn4","Arf3","Crmp1","Pfkp","Aldoc","Ckb","Cyld","Ddx1","Iqsec2","Uchl1","Acly","Ddost","Ddx5","Dpysl4","Acsl6","Mogs","Ogt","Pfkl","Pfkm","Prdx1","Agpat5","Cdipt","Dhrs7b","Dpm1","Eno3","Eno2","Agk","Gucy1b3","Hsd17b12","Inpp4a","Ldha","Ldhb","Maoa","Gad1","Pip4k2a","Ppap2b","Prps1","Rp2h","Rpn1","Prdx2","Usp5","Ckmt1","Dpysl2","Glud1","Hadha","Hk1","Mdh2","Suclg1","Acat1","Bdh1","Idh3b","Slc25a11","Sucla2","Bckdk","Cyc1","Decr1","Dlat","Dld","Dlst","Hadhb","Idh3a","Idh3g","Ogdh","Aifm1","Pdha1","Pdhb","Cyfip2","Pura","Hnrnpm","Fbxo2","Ndel1","Pcbp1","Eef1a2","Eef2","Eef1a1","Eef1b2","Eef1g","Pabpc1","Sfpq","Rpl6","Rps3","Rpl4","Rpl7","Rplp0","Rps19","Rpl8","Rpl23","Rps3a","Rps6","Rps9","Rps17","Rps18","Rpl23a","Rpl36","Rps5","Rps14","Rps25","Arpc3","Arpc4","Actr2","Actr3","Arpc2","Actn1","Actn2","Actn4","Actn3","Spnb2","Mtap2","Macf1","Mtap1b","Mtap6","Mtap4","Ctnna2","Ctnnd2","Ctnnd1","Ctnna1","Plp1","Mbp","Omg","Gpm6a","Nfasc","Tnr","Nptn","Ina","Nefm","Nefl","Add1","Capza2","Capzb","Shank2","Dbn1","Ablim1","Add2","Ank2","Ank3","Epb4.1l3","Synpo","Thy1","Wasf1","Add3","Gsn","Lasp1","Nefh","Palm","Actr1a","Adam23","Ank1","Capza1",
"Clmn","Coro1c","Epb4.1l1","Jup","Pkp4","Abi1","Tagln3","Nckipsd","Ablim2","Adam11","Ckap4","Coro1a","Coro1b","Coro2b","Des","Dmd","Epb4.9","Ezr","Fscn1","Mtdh","Lzts1","Ppfia4","Cdh2","Gja1","Cntnap1","Cntn1","Cntn2","Hapln1","Ncan","L1cam","Lgi1","Negr1","Nlgn2","Nlgn3","Nrxn3","Lin7a","Lin7b","Astn1","Erbb2ip","Ncam1","Opcml","Clu","Dst","Cdh10","Cdh13","Cspg5","Mag","Ncam2","Neo1","Cltc","Clta","Cltb","Syn1","Syn2","Nsf","Syt1","Ap2a1","Unc13a","Nipsnap1","Srcin1","Stxbp1","Ap1b1","Ap2a2","Ap2m1","Gbas","Stx1a","Vapa","Amph","Bin1","Ap2b1","Ap2s1","Clip2","Napb","Pacsin1","Picalm","Rims2","Rtn1","Syngr3","Synj1","Syt7","Vps16","Vps35","Snap91","Ap3b2","Copa","Ehd3","Epn2","Exoc7","Exoc8","Hip1r","Unc13c","Napa","Rimbp2","Rab11fip5","Scfd1","Exoc5","Exoc6b","Exoc2","Exoc3","Stx1b","Stx7","Stx12","Syn3","Stxbp5","Vamp2","Vapb","Vps29","Vps33a","Vps45","Vti1b","Slc25a4","Mtch2","Sfxn3","Slc25a12","Abcd3","Sfxn5","Slc25a3","Abcb8","Mtch1","Mtx1","Sec22b","Sfxn1","Slc25a1","Slc25a13","Tomm70a","Myo5a","Tmod2","Clasp2","Immt","Myh9","Myo18a","Tpm1","Dync1h1","Dynll1","Kif2a","Myh10","Myh11","Dctn1","Trim3","Dync1i1","Gabarapl2","Kif5b","Myl6","Myo1b","Myo6","Vim","Dctn2","Dctn4","Dync1li1","Dync1i2","Gas7","Itsn1","Kif5c","Opa1","Clip1","Syt2","Syt3","Syt5","Wdr7","Chchd6","Ttc35","Phactr1","Nebl","Apoo","Snap47","Cend1","Btbd17","1700054N08Rik","Calcoco1","Wdr47","Spata2L","Pgam5","Tubb2c","Dclk2","Prickle2","Scai","Bcas1","6330407J23Rik","Sgip1","Dock7","Chchd3","Igsf8","Efr3a","AW555464","Arhgap44","Gpr158","Letm1","Arpc5l","Mlf2","Plekha6","Armc10","Wdr37","Gfap","Grin1","Gabbr1","Lphn1","Gabra1","Atp2b3","Atp1a2","Cacna2d1","Kcnab2","Vdac3","Shank1","Dlg1","Pclo","Cask","Grip1","Homer3","Mpp6","Dlgap1","Begain","Dlgap4",
"Flot2","Sfn","Csnk2a1","Camkv","Aak1","Cdkl5","Prkg2","Src","Ppp1ca","Sbf1","Sept5","Rhog","Dnajb6","Cct6a","Dnaja3","Cnp","Basp1","Lrrtm1","Dnm3","Odz4","Tppp","Rtn4","Cacng2","Aldoa","Glul","Ddx3x","Bcr","Dgkz","Hsd17b4","D3Bwg0562e","Dhrs4","Rpn2","Gapdh","Uqcrc2","Cs","Gpd2","Gpx4","Cyb5b","Uqcrc1","Snd1","Purb","Hist1h1e","Arfgap2","Bsn","Cttn","Akap5","Ryr3","Prph","Rpl10a","Cdh11","Rpl19","Gnal","Arvcf","Trio","Hcn1","Gnai3","Tpi1","Rhot1","Ptn","Efr3b","Ctnnb1","Napg","Psd","Ckap5","Ap3m2","Slc25a5","Tpm3","3110002H16Rik","Ogdhl","Plec","Rps4x","Ppfia3","Mapre3","Sorbs2","Apoe","Mog","Vps41","Ncdn","Rps13","Mapt","Sv2a","Rps8","Lancl2","Rps2","mt-Co2","Chrm1","Lrrc59","Tuba1a","Pgam1","Astn2","Ywhaq","Itpka","Erc1","Rgs8","Mtap1a","Dgke","Mosc2","Diras2","Rims1","Ppib","Rpl17","Gng2","Tmem132b","D10Wsu52e","Usmg5","Dip2b","Arpc1a","Nrxn1","Rpl30","Igsf21","Rpl24","Vcp","Gna13","Ntm","Prr7","Scn2a1","Cttnbp2","Olfm2","Rps15","Calm1","Phb2","Mccc1","Myh14","Prrt1","Fmr1","Mllt4","Syp","Anks1b","Rab6","Kidins220","Gnaq","Rps10","Gng3","Gucy1a2","Gnai1","Ppfia2","Rpl5","Iqsec1","Lrrtm2","Icam5","Cfl1","Ccdc109a","Rpl3","Stoml2","Kcnab1","Syne1","Fmnl3","Cdk5r1","Dynll2","Accn2","Specc1","Gng7","Rpl13","Eno1","Arhgap39","Gna14","Tmod1","Rpl13a","Rasal2","Pi4ka","Crtac1","Klc2","Myl12b","Prkar1b","Prkcc","Rpl31","Adam22","Gfra2","Grm2","Fam82a2","Rasgrf2","Erc2","Myo1d","Rpl38","Jakmip2","Rps16","Rpl14","Ktn1","BC005764","Ttc7b","Plcb4","Nrgn","Psd3","Gnb3","Rpl7a","Rpl12","Rpl10","Rpl11","Rpl27","Rps27","D430041D05Rik","Trim32","Snap25","Rph3a","Gna11","Ywhaz","C230096C10Rik","Shisa7","Brsk1","Kras","Fbxo41","Slc25a22","Kalrn","1300018I17Rik","1500001M20Rik","Mtfp1","1700025G04Rik","1810026J23Rik","1810074P20Rik","2010300C02Rik","2310022B05Rik","2310044H10Rik","2310046A06Rik","2310057J16Rik","2400001E08Rik","2400003C14Rik","Mlec",
"Fam54b","Atat1","3110047P20Rik","Fam164a","5031439G07Rik","Sybu","Chtf8","6330403A02Rik","6330439K17Rik","6430598A04Rik","6430704M03Rik","6720456B07Rik","9430020K01Rik","A230050P20Rik","Iglon5","A830010M20Rik","Abcc8","Abcd2","Abhd12","Abhd6","Abi2","Ablim3","Abr","Acad8","Acadvl","Acap2","Acbd5","Acot8","Acsl1","Acsl3","Actg1","Actr1b","Adcy5","Afg3l2","Ahcyl1","Aifm3","Akap1","Aldh3a2","Alg2","Alpl","Amot","Ampd2","Ankrd34b","Ap1s1","Ap3s1","Ap3s2","Apc","Apool","Appl2","Aqp4","Arf1","Arf5","Arf6","Arhgap21","Arhgap23","Arhgap26","Arl8a","Arl8b","Asap1","Atad1","Atp12a","Atp13a1","Atp1b2","Atp2a1","Atp4a","Atp5d","Atp5f1","Atp5h","Atp5j2","Atp5k","Atp5o","Atp6ap1","Atp6ap2","Atp6v1b1","Atp6v1e2","Atp6v1f","Atp6v1g1","Atp6v1g2","Atp8a1","Atp9a","Atxn2","Auh","Ralgapb","B3galt6","Baalc","Bag5","Bai2","Prrc2a","Prrc2c","Abhd16a","BC018242","BC037034","Fam18a","BC068157","Bcas3","Bcl2l13","Bloc1s2","Bri3bp","Brsk2","C1qtnf4","C230081A13Rik","C2cd2l","C77080","C85492","Cacnb4","Cacng8","Cadm4","Cadps","Calm2","Calm3","Camsap1","Cand1","Cap1","Capn5","Caprin1","Car4","Cbr1","Cc2d1a","Ccdc127","Ccdc47","Ccdc88a","Ccdc92","Cct6b","Cdc42","Cdc42bpa","Cdh4","Cecr6","Cep170","Cfl2","Chmp1a","Chmp1b","Chmp2a","Chmp4b","Chmp6","Cisd1","Cisd3","Clasp1","Clcn6","Clip3","Clstn1","Cmas","Cmtm4","Cntn3","Cntn6","Cntnap2","Cobl","Coro2a","Cox4i1","Cox4nb","Cox5a","Cox5b","Cox6b1","Cox6c","Cox7a2l","Cpne5","Crip2","Cdk12","Csnk1d","Csnk2a2","Ctbp1","Celf2","Cyb5r3","Cycs","Cyp46a1","Cyth1","Cyth2","Cyth3","Ildr2","Fam171b","Daam2","Dact3","Dad1","Dagla","Dapk1","Dbnl","Dctn3","Dcun1d3","Ddah1","Ddn","Ddx17","Ddx6","Dgki","Dhx15","Dhx29","Dhx30","Dhx57","Dlgap3","Dmwd","Dnajb1","Dnajb12","Dnajb4","Dnajb5","Dnajc13","Dnajc19","Dnm1l","Dock1",
"Dock10","Dock4","Dock9","Dpp10","Dpysl3","Dstn","Dync1li2","Eef1d","Eepd1","Efha2","Efhd2","Mtx3","Gm9369","Ehd4","Eif2a","Eif2c1","Eif2c2","Eif4a3","Eif4g1","Eif4g3","Elavl1","Elavl3","Elavl4","Elfn1","Elfn2","Elmo1","Emd","Enpp6","Epb4.1l2","Epdr1","Eprs","Eps15","Eps8","Erlin1","Erlin2","Evl","Exoc1","Exoc6","Faah","Fam107a","Fam120a","Fam120c","Fam126b","Fam131b","C2cd4c","Fam171a2","Farp1","Farsa","Farsb","Fau","Fbxo6","Fech","Fkbp1b","Fkbp8","Flii","Fmn2","Fmnl2","Fnbp1l","Frmpd3","Frs2","Fry","Fsd1","Fut8","Fxr1","Fxr2","Gabra2","Gabra3","Gabra4","Gabrb1","Gabrb2","Gabrb3","Gak","Gapdhs","Gas2l1","Gcn1l1","Glg1","Glipr2","Gls","Gm1337","Gm1568","Shisa6","Gm88","Gm996","Gnpat","Golga7b","Golgb1","Gpc1","Gpc4","Gpi1","Gpm6b","Gpr123","Gpr98","Gprc5b","Gprin3","Grasp","Grk6","Gtpbp1","Gm16517","Gyk","Gykl1","H1f0","H2-Ke6","Habp4","Hapln3","Hapln4","Hax1","Hck","Hdac11","Hdlbp","Hecw2","Hepacam","Hip1","Hist1h1b","Hist1h1c","Hist1h1d","Hnrnpa0","Hnrnpa1","Hnrnpa2b1","Hnrnpk","Homer2","Hook3","Hp1bp3","Hpca","Hsp90aa1","Hspa1a","Hspa1l","Hspa2","Hspa4","Hspa4l","Hspa8","Iap","Igsf9b","Inpp5a","Ipo4","Ipo5","Itm2b","Itm2c","Itpr2","Itpr3","Itsn2","Jakmip1","Jph3","Jph4","Kars","Kcna1","Kcna3","Kcnab3","Kcnb1","Kcnd2","Kcnip2","Kcnip4","Kctd12","Kctd12b","Kctd16","Kctd8","Khdrbs1","Kif17","Kif1a","Kif2b","Kif2c","Kif3a","Kif5a","Klc1","Klraq1","Kpna1","Kpnb1","Krit1","Lancl1","Larp1","Lgi3","Lin7c","Lingo1","Llgl1","Lmo7","Lmtk2","Lmtk3","Lnp","Lpcat4","Lphn2","Lrfn1","Lrrc16a","Lrrc57","Lrrc8a","Lrrc8c","Lrrfip1","Lrrtm3","Lsm11","Ly6h","Lynx1","Lysmd1","Lzts2","Magi2","Magi3","Mal2","Maob","Map1lc3a","Map4k3","Map6d1","Mapk8ip3","Mark1","Mark3","Mark4","Mast3","Matn4","Mccc2","Mdga2","Mdh1","Mff","Mfn2","Mgll","Mib2",
"Mical3","Mlc1","Mpp1","Mprip","Mrps36","Msn","Mtap1s","Mtap7","Mtap7d1","Mtap7d2","Mtap9","Mthfd1","Mthfd1l","Mtmr1","Mycbp2","Myef2","Myl6b","Myo1c","N28178","Nat14","Nav1","Ncald","Ncln","Ndufa13","Ndufa2","Ndufa6","Ndufa7","Ndufb10","Ndufb11","Ndufb3","Ndufb4","Ndufb6","Ndufb8","Ndufb9","Ndufs6","Ndufs7","Ndufv1","Necab2","Necap1","Nelf","Nhsl2","Nme1","Nnt","Nomo1","Nono","1593","Npm1","Nrcam","Nrxn2","Nt5dc3","Nt5e","Ntng2","Numb","Ociad2","Olfm3","Opa3","Pa2g4","Pabpc2","Pabpc6","Pabpc4","Pacs1","Pacsin3","Pag1","Paics","Pak1","Pak6","Pak7","Palm2","Pam","Panx2","Pcbp2","Pcdh10","Pcdh7","Pcdha11","Pcdha4","Pcdhgc5","Cdk16","Cdk17","Cdk18","Pde1b","Pde8b","Pdhx","Pex10","Pex12","Pex14","Pxmp3","Pex3","Pex5","Phb","Phgdh","Phldb1","Pitpnm1","Pitpnm2","Psmb6","Pkm2","Pla2g4e","Plcl2","Pld2","Plekha5","Plekha7","Pllp","Plxna4","Plxnc1","Pnkd","Pnpla6","Ppfia1","Ppia","Ppid","Ppl","Ppm1h","Ppp1r12a","Ppp1r12b","Ppp1r1b","Ppp2r5e","Ppp3cb","Praf2","Ppp2r5b","Prdx5","Preb","Prickle1","Prmt8","Prosapip1","Prrt2","Psmc1","Psmd7","Ptplad1","Ptprt","Purg","Pycr2","Pycrl","Qars","Qk","Rab1","Rab11b","Rab14","Rab15","Rab1b","Rab35","Rab3b","Rab3c","Rab3gap2","Rab5c","Rab6b","Rab7","Rab8b","Rap1gds1","Rap2b","Rapgef6","Raph1","Rars","Rasa3","Rasa4","Rbm14","Rbx1","Rdh14","Rdx","Reep2","Reep5","Refbp2","Rftn1","Rgs12","Rgs19","Rgs20","Rgs7bp","Rgs9","Rhoa","Rhob","Rhot2","Rims4","Rnf11","Robo2",
"Rogdi","Rpl18a","Rpl21","Rpl26","Rpl27a","Rpl28","Rpl29","Rpl32","Rpl34","Rpl35","Rpl35a","Rpl9","Rplp2","Rps11","Rps15a","Rps20","Rps23","Rps24","Rps26","Rps28","Rras2","Rtn4r","Rufy3","Sacm1l","Samm50","Sarm1","Sccpdh","Scn2b","Sdcbp","Sdhb","Sec24c","Sec61a2","Sec61b","Sema7a","Sept1","Sept10","Serbp1","Sh3gl1","Sh3gl2","Sipa1l2","Sirpa","Skp1a","skt","Slain2","Slc12a2","Slc1a3","Slc25a18","Slc25a46","Slc27a1","Slc27a4","Slc2a1","Slc3a2","Slc4a7","Slc6a1","Slc7a11","Smc1a","Smpd3","Snap23","Snph","Arhgap33","Snx27","Sorcs2","Speg","Sphkap","Spire1","Spna2","Spnb1","Spnb3","Spnb4","Srgap3","Srpk2","Srpr","Srprb","Ssbp1","Ssr3","Sst","Strn3","Stx16","Stx6","Syncrip","Syt11","Taok1","Taok2","Tbc1d10b","Tbc1d24","Tbl2","Tdrkh","Thoc4","Thsd7a","Timm13","Timm44","Tln2","Tmco1","Tmed10","Tmem109","Tmem111","Tmem163","Tmem214","Tmem30a","Tmem35","Tmem63b","Tmem85","Tollip","Tom1","Tom1l2","Tomm20","Trap1","Trappc3","Trappc9","Trim46","Trp53i11","Trpv2","Tsg101","Tuba1b","Tuba4a","Tubb2a","Tubb2b","Tubb3","Tubb4","Tubb5","Tufm","Tusc3","Twf1","Tmx2","Uba1","Ubash3b","Ubc","Ube2n","Ube2v2","Ube3b","Unc13b","Upf1","Uqcrfs1","Usp31","Vamp1","Vamp3","Vangl2","Vars","Vps11","Vps13a","Vps18","Vps39","Vps52","Vsnl1","Vti1a","Wasf2","Wasf3","Wasl","Wbscr17","Wdr20a","Wdr48","Wfs1","Wibg","Wipf2","Wipf3","Wnk2","Wwp1","Yars","Ykt6","Ythdc2","Ythdf1","Ythdf2","Ythdf3","Zdhhc8","Zfp365","Zfpl1")

Postsynaptic.genes<-c("Agrn","Atad3a","Gnb1","Lrrc47","Kcnab2","Rpl22","Acot7","Dnajc11","Vamp3","Park7","Eno1","Pgd","Fbxo2","Mfn2","Efhd2","Padi2","Igsf21","Aldh4a1","Ubr4","Kiaa0090","Akr7a2","Capzb","Ddost","Rap1gap","Cdc42","C1qc","Rpl11","Sfn","Wasf2","Stx12","Atpif1","Epb41","Mecr","Fabp3","Lck","Marcksl1","Yars","Hpca","Dlgap3","Sfpq","Ncdn","Trappc3","Map7d1","Macf1","Pabpc4","Cap1","Slc2a1","Ptprf","Kif2c","Rps8","Prdx1","Akr1a1","Faah","Cmpk1","Cpt2","Ppap2b","Dock7","Dnajc6","Pde4b","Sgip1","Gng12","Lrrc7","Lrrc40","Negr1","Cryz","Pigk","Ak5","Dnajb4","Prkacb","Ddah1","Rpl5","Abcd3","Agl","Dbt","Stxbp3","Wdr47","Sars","Gnai3","Ampd2","Gstm2","Gstm3","Ahcyl1","Kcna2","Atp5f1","Rap1a","Capza1","Nras","Sycp1","Atp1a1","Phgdh","Sec22b","Pex11b","Sv2a","Vps45","Arnt","Snx27","S100a9","S100a4","Rab13","Rps27","Tpm3","Adar","Pmvk","Pbxip1","Shc1","Mtx1","Pklr","Fdps","Arhgef2","Lmna","Cct3","Hapln2","Bcan","Darc","Tagln2","Igsf8","Atp1a2","Atp1a4","Pea15","Copa","Ndufs2","Tomm40l","Hspa6","Mgst3","Brp44","Atp1b1","Kifap3","Dnm3","Prdx6","Cacybp","Tnr","Astn1","Rasal2","Glul","Rgs8","Pla2g4a","Csrp1","Syt2","Cyb5r1","Ppfia4","Atp2b4","Plekha6","Nfasc",
"Cntn2","Plxna2","Eprs","Iars2","Rab3gap2","Mark1","Mosc2","Dusp10","Enah","Parp1","Cdc42bpa","Arf1","Guk1","Gnpat","Exoc8","Tomm20","Edaradd","Lgals8","Actn2","Ryr2","Fmn2","Rgs7","Fh","Sccpdh","Acp1","Rps7","Ywhaq","Pdia6","Rock2","Ddx1","Fam49a","Vsnl1","Nt5c1b","Rhob","Fkbp1b","Itsn2","Efr3b","Rab10","Hadha","Hadhb","Dpysl5","Mapre3","Cad","Slc30a3","Ppp1cb","Ehd3","Birc6","Strn","Eif2ak2","Cyp1b1","Atl2","Sos1","Cox7a2l","Lrpprc","Prkce","Atp6v1e2","Cript","Calm2","Klraq1","Nrxn1","Acyp2","Sptbn1","Rtn4","Rps27a","Xpo1","Cct4","Mdh1","Ugp2","Rab1a","Actr2","Plek","Aak1","Pcbp1","Add2","Exoc6b","Sfxn5","Rab11fip5","Cct7","Fbxo41","Dctn1","Ctnna2","Lrrtm1","Suclg1","Capg","Immt","Cox5b","Actr1b","Rpl31","Sept10","Actr3","Ccdc93","Clasp1","Bin1","Rab3gap1","Dars","Kif5c","Cacnb4","Fmnl2","Gpd2","Pkp4","Psmd14","Scn2a","Stk39","Gad1","Cybrd1","Dync1i2","Slc25a12","Rapgef4","Ola1","Mtx2","Pde11a","Prkra","Sestd1","Pde1a","Nckap1","Hibch","Gls","Stat1","Myo1b","Hecw2","Coq10b","Hspd1","Abi2","Raph1","Ndufs1","Eef1b2","Adam23","Map2","Lancl1","Atic","Arpc2","Pnkd","Tuba4a","Dnajb2","Des","Slc4a3","Epha4","Farsb","Acsl3","Serpine2","Dock10","Irs1","Mff","Psmd1","Ngef","Atg16l1","Agap1","Ndufa10","Gpc1","Kif1a","Ppp1r7","Hdlbp","Sept2","Chl1","Grm7","Srgap3",
"Mtmr14","Arpc4","Sec13","Atp2b2","Syn2","Raf1","Cand2","Iqsec1","Rftn1","Rab5a","Nkiras1","Cmc1","Azi2","Dync1li1","Clasp2","Pdcd6ip","Plcd1","Acaa1","Wdr48","Rpsa","Rpl14","Ctnnb1","Higd1a","Sacm1l","Ptpn23","Cspg5","Dhx30","Map4","Uqcrc1","Nckipsd","Prkar2a","Wdr6","Qars","Gpx1","Rhoa","Bsn","Camkv","Gnai2","Cacna2d2","Dock3","Grm2","Abhd14b","Tkt","Cacna2d3","Erc2","Appl1","Slmap","Pdhb","Fam107a","Cadps","Prickle2","Mina","Tomm70a","Rpl24","Tagln3","Atp6v1a","Gap43","Lsamp","Gsk3b","Ndufb4","Golgb1","Kpna1","Kalrn","Snx4","Aldh1l1","Chchd6","Plxna1","Rpn1","Rab7a","Copg","Dnajc13","Srprb","Rab6b","Mras","Copb2","Pfn2","Mlf1","Tnik","Nlgn1","Pik3ca","Gnb4","Pex5l","Dnajc19","Mccc1","Map6d1","Ap2m1","Abcf3","Psmd2","Eif4g1","Magef1","Vps8","Eif4a2","Opa1","Apod","Dlg1","Bdh1","Atp5i","Gak","Ctbp1","Letm1","Add1","Htt","Crmp1","Wfs1","Ablim2","Wdr1","Qdpr","Lap3","Rpl9","Uchl1","Limch1","Tmem33","Atp8a1","Kctd8","Gabra4","Fryl","Exoc1","Paics","Lphn3","Rufy3","Slc4a4","Cdkl2","G3bp2","Uso1","Sept11","Ccng2","Anxa3","Prkg2","Scd5","Sec31a","Mapk10","Snca","Grid2","Rap1gds1","Eif4e","Ppp3ca","Hadh","Ank2","Camk2d","Anxa5","Fgf2","Slc25a31","Hspa4l","Dclk2","Rps3a","Trim2","Fgb","Fgg","Gria2","Etfdh","Ppid","Rapgef2","Gpm6a","Enpp6","Slc25a4","Sorbs2","Ccdc127","Exoc3","Tppp","Ndufs6","Cct5","Ctnnd2","Trio","Basp1","Cdh10","Slc1a3","Oxct1","Nnt","Rab3c","Pde4d","Kif2a","Erbb2ip","Mrps36","Mccc2","Map1b","Tnpo1","F2rl1","Ap3b1","Homer1","Rasgrf2","Vcan","Hapln1","Ttc37","Slc25a46","Apc","Reep5","Ap3s1","Hsd17b4","Snx2","Aldh7a1","Lmnb1","Slc12a2","Acsl6","Kif3a",
"Sept8","Hspa4","Vdac1","Ppp2ca","Hspa9","Ctnna1","Pura","Ndufa2","Hars2","Pcdhb6","Pcdh1","Arhgap26","Kctd16","Dpysl3","Jakmip2","Spink5","Ablim3","Camk2a","Rps14","Synpo","Dctn4","Anxa6","Gria1","Sgcd","Cyfip2","Gabra1","Nudcd2","Rars","Dock2","Npm1","Sfxn1","Cltb","Gprin1","Prr7","Dbn1","Pdlim7","Canx","Gnb2l1","Exoc2","Tubb2a","Tubb2b","Peci","Nrn1","Ssr1","Dsp","Phactr1","Ranbp9","Cap2","Aldh5a1","Hist1h4a","Hist1h1e","Hist1h2ae","Gabbr1","Mog","Gnl1","Flot1","Atp6v1g2","Csnk2b","Vars","Hspa1l","Hspa1a","Hspa1b","Ehmt2","Skiv2l","Prrt1","Ager","Vps52","Rps18","Syngap1","Rps10","Pacsin1","Rpl10a","Cpne5","Ppil1","Mtch1","Daam2","Ppp2r5d","Tjap1","Vegfa","Hsp90ab1","Nfkbie","Dst","Znf451","Bag2","Bai3","Rims1","Eef1a1","Myo6","Sh3bgrl2","Snap91","Nt5e","Syncrip","Kiaa0776","Grik2","Snx3","Wasf1","Rev3l","Fyn","Gja1","Fabp7","Tpd52l1","Kiaa0408","Epb41l2","Stx7","Rps12","Vta1","Grm1","Stxbp5","Pcmt1","Mthfd1l","Akap12","Syne1","Rgs17","Snx9","Synj2","Ezr","Sod2","Tcp1","Pde10a","Brp44l","Mllt4","Actb","Fscn1","Cyth3","Rac1","Ica1","Ndufa4","Scin","Dgkb","Mpp6","Cycs","Scrn1","Aqp1","Sept7","Amph","Vps41","Rala","Hecw1","Dbnl","Pgam2","Camk2b","Ogdh","Ppia","Purb","Grb10","Lancl2","Gbas","Cct6a","Baz1b","Stx1a","Clip2","Hip1","Por","Mdh2","Hspb1","Ywhag","Magi2","Gnai1","Cacna2d1","Pclo","Grm3","Abcb1","Adam22","Sri","Akap9","Ppp1r9a","Dync1i1","Slc25a13",
"Lmtk2","Arpc1a","Atp5j2","Tsc22d4","Actl6b","Gnb2","Ap1s1","Vgf","Fis1","Armc10","Srpk2","Prkar2b","Dld","Nrcam","Dock4","Gpr85","Capza2","Cttnbp2","Ptprz1","Ndufa5","Wasl","Arf5","Snd1","Flnc","Fam40b","Plxna4","Chchd3","Exoc4","Wdr91","Kiaa1549","Agk","Ssbp1","Kel","Gstk1","Cntnap2","Abcb8","Cdk5","Agap3","Actr3b","Dpp6","Ube3c","Dnajb6","Dlgap2","Kbtbd11","Agpat5","Sox7","Psd3","Atp6v1b2","Lzts1","Xpo7","Epb49","Phyhip","Stc1","Nefm","Nefl","Dock5","Dpysl2","Ptk2b","Clu","Dusp4","Erlin2","Prosc","Tacc1","Ank1","Ap3m2","Vdac3","Hook3","Prkdc","Ube2v2","Atp6v1h","Lyn","Sdcbp","Rab2a","Vcpip1","Rpl7","Gdap1","Fabp5","Impa1","Ca1","Ca2","Decr1","Uqcrb","Mtdh","Rpl30","Cox6c","Pabpc1","Ywhaz","Ncald","Atp6v1c1","Rims2","Oxr1","Ttc35","Sntb1","Ndufb9","Kiaa0196","Fam49b","Efr3a","Ndrg1","Trappc9","Ptk2","Bai1","Arc","Lynx1","Ly6h","Eef1d","Pycrl","Scrib","Eppk1","Cyc1","Sharpin","Vps28","Rpl8","Ak3","Ptprd","Sh3gl2","Rps6","Ndufb6","Dnaja1","Cntfr","Dctn3","Kiaa1045","Vcp","Stoml2","Tpm2","Tln1","Glipr2","Clta","Grhpr","Tjp2","Aldh1a1","Anxa1","Prune2","Gna14","Gnaq","Hnrnpk","Ntrk2","Diras2","Auh","Iars","Tmod1","Coro2a","Gabbr2","Akap2","Palm2","Hsdl2","Fkbp15","Atp6v1g1","Tnc","Astn2","Trim32","Dbc1","Rab14","Gsn","Stom","Dab2ip","Ndufa8","Rpl35","Arpc5l","Hspa5","Gapvd1","Rpl12","Lrsam1","Stxbp1","Ak1","Dnm1","Golga2","Slc27a4","Sptan1","Endog","Lrrc8a",
"Sh3glb2","Crat","Tsc1","Rpl7a","Vav2","Olfm1","Gpsm1","Grin1","Tubb2c","Wdr37","Pfkp","Akr1c1","Akr1c2","Calml5","Gdi2","Atp5c1","Fam171a1","Vim","Nebl","Pip4k2a","Kiaa1217","Arhgap21","Gpr158","Abi1","Acbd5","Rab18","Mpp7","Kif5b","Ccny","Ogdhl","Zwint","Cisd1","Tfam","Ank3","Vps26a","Hk1","Sar1a","Ccdc109a","Anxa7","Ppp3cb","Sec24c","Camk2g","Vcl","Vdac2","Comtd1","Kcnma1","Anxa11","Glud1","Atad1","Kif20b","Cpeb3","Exoc6","Lgi1","Sorbs1","Blnk","Pgam1","Avpi1","Golga7b","Crtac1","Got1","Erlin1","Ndufb8","Sfxn3","Psd","Actr1a","Ina","Usmg5","Sh3pxd2a","Slk","Gsto1","Add3","Smc3","Ablim1","Hspa12a","Kiaa1598","Rab11fip2","Bag3","Plekha1","Dock1","Dpysl4","Stk32c","Ric8a","Hras","Taldo1","Cend1","Slc25a22","Ap2a2","Tollip","Nap1l4","Rhog","Rrm1","Trim3","Tpp1","Ipo7","Sbf2","Rps13","Ldha","Tsg101","Ptpn5","Lin7c","Tcp11l1","Cd59","Cat","Pdhx","Slc1a2","Hsd17b12","Ext2","Mapk8ip1","Dgkz","Arhgap1","Ckap5","Arfgap2","Madd","Psmc3","Ndufs3","Mtch2","Rtn4rl2","Ctnnd1","Syt7","Fth1","Ahnak","Eef1g","B3gat3","Gng3","Slc3a2","Rtn3","Mark2","Macrod1","Stip1","Bad","Prdx5","Pygm","Ehd1","Tm7sf2","Capn1","Cfl1","Fibp","Banf1","Pacs1","Klc2","Rab1b","Rin1","Actn3","Sptbn2","Pc","Adrbk1","Ppp1ca","Coro1b","Aip","Gstp1","Ndufv1","Cpt1a","Ppfia1","Cttn","Shank2","Pde2a","Rab6a","Pgm2l1","Arrb1","Rps3","Map6","Capn5","Pak1","Odz4","Dlg2","Tmem126a","Picalm","Grm5","Gria4","Aasdhppt","Gucy1a2","Cul5","Acat1","Rdx","Cryab","Dlat","Ncam1","Ube4a","Atp5l","Arcn1","Phldb1","Ddx6"
,"Rps25","Vps11","Thy1","Hspa8","Nrgn","Srpr","St14","Opcml","Iqsec3","Ninj2","Wnk1","Erc1","Fkbp4","Ndufa9","Cd9","Gapdh","Mlf2","Usp5","Tpi1","Eno2","Phb2","Grin2b","Atf7ip","Strap","Plekha5","Ldhb","Kiaa0528","Kras","Stk38l","Fgd4","Dnm1l","Kif21a","Cntn1","Twf1","Pfkm","Cacnb3","Arf3","Tuba1b","Tuba1a","Prph","Fmnl3","Lima1","Dip2b","Krt6a","Krt5","Eif4b","Pcbp2","Map3k12","Calcoco1","Hnrnpa1","Nckap1l","Rab5b","Myl6b","Myl6","Cs","Gls2","Atp5b","Lrp1","Shmt2","Mars","Dctn2","Kif5a","Agap2","Usp15","Tbk1","Wif1","Grip1","Cand1","Cct2","Rab21","Nap1l1","Syt1","Ppp1r12a","Lin7a","Ppfia2","Atp2b1","Eea1","Ube2n","Ndufa12","Slc25a3","Anks1b","Pmch","Hsp90b1","Kiaa1033","Appl2","Ckap4","Coro1c","Atp2a2","Arpc3","Vps29","Ppp1cc","Aldh2","Rpl6","Ptpn11","Rph3a","Rasal1","Nos1","Pebp1","Hspb8","Cit","Rab35","Rplp0","Dynll1","Camkk2","Vps33a","Clip1","Hip1r","Ubc","Tmem132b","Rimbp2","Ran","Pgam5","Gjb6","Sacs","Atp12a","Fam123a","Atp8a2","Wasf3","Hsph1","Nbea","Dclk1","Tpt1","Cog3","Lcp1","Sucla2","Lmo7","Kctd12","Mycbp2","Rap2a","Ipo5","Farp1","Dock9","Pcca","Arhgef7","Ndrg2","Dad1","Prmt5","Myh6","Dhrs4","Cpne6","Scfd1","Snx6","Cfl2","Sec23a","Atl1","Trim9","Gng2","Ktn1","Exoc5","Daam1","Rtn1","Wdr89","Mthfd1","Akap5","Hspa2","Sptb","Rab15","Gphn","Atp6v1d","Eif2s1","Vti1b","Actn1","Sipa1l1","Rgs6","Aldh6a1","Dlst","Ahsa1","Nrxn3","Psmc1","Calm1","Ttc7b","Serpina3","Clmn","Evl","Begain","Dync1h1","Hsp90aa1","Traf3","Cdc42bpb","Ckb","Bag5","Klc1","Inf2","Akt1","Kiaa0284","Crip2","Cyfip1","Tjp1","Tmem85","Fam82a2","Vps18","Ehd4","Vps39","Lrrc57","Epb42","Tp53bp1",
"Map1a","Ckmt1b","Pdia3","Dmxl2","Tmod2","Gnb5","Myo5c","Myo5a","Nedd4","Tex9","Myo1e","Fam81a","Anxa2","Tln2","Tpm1","Rps27l","Rab8b","Snx1","Ppib","Ptplad1","Map2k1","Rpl4","Coro2b","Rplp1","Pkm2","Neo1","Nptn","Arid3b","Cox5a","Lingo1","Idh3a","Acsbg1","Psma4","Tmed3","Rps17","Ap3b2","Homer2","Sh3gl3","Pde8a","Ap3s2","Idh2","Iqgap1","Fes","Synm","Asb7","Tarsl2","Decr2","Rhot2","Stub1","Mapk8ip3","Nme3","Ndufb10","Rps2","Syngr3","Slc9a3r2","Tsc2","Caskin1","Tbc1d24","Pdpk1","Trap1","Dnaja3","Hmox2","Rogdi","Grin2a","Mkl2","Nomo1","Myh11","Rps15a","Gprc5b","Crym","Uqcrc2","Prkcb","Cacng3","Eif3c","Tufm","Atp2a1","Mvp","Cdipt","Taok2","Doc2a","Aldoa","Mapk3","Coro1a","Stx1b","Stx4","Bckdk","Fus","Itgax","Vps35","Dnaja2","Itfg1","Cbln1","Cyld","Gnao1","Pllp","Csnk2a2","Got2","Dync1li2","Atp6v0d1","Sntb2","Vps4a","Cyb5b","Aars","Vac14","Calb2","Ap1g1","Kiaa0174","Glg1","Gabarapl2","Kars","Dynlrb2","Cdh13","Hsdl1","Kiaa0513","Cox4i1","Fbxo31","Fam38a","Rpl13","Chmp1a","Spata2l","Tubb3","Vps53","Glod4","Abr","Ywhae","Myo1c","Pitpna","Srr","Pafah1b1","Camkk1","Ankfy1","Psmb6","Mink1","Slc25a11","Pfn1","Eno3","Rabep1","C1qbp","Dlg4","Nlgn2","Fxr2","Atp1b2","Vamp2","Ndel1","Myh10","Gas7","Ubb","Mprip","Cops3","Tom1l2","Llgl1","Flii","Epn2","Aldh3a2","Specc1","Dhrs7b","Map2k3","Aldoc","Rpl23a","Flot2","Myo18a","Taok1","Git1","Gosr1","Nf1","Omg","Rhot1","Psmd11","Cdk5r1","Myo1d","Cct6b","Ap2b1","Acaca","Arhgap23","Pip4k2b","Rpl23","Lasp1","Cacnb1","Rpl19","Wipf2",
"Krt24","Jup","Acly","Cnp","Rab5c","Atp6v0a1","Coasy","Cntnap1","Rpl27","Vat1","Dusp3","Mpp3","Mpp2","Slc4a1","Adam11","Gfap","Dcakd","Plcd3","Fmnl1","Mapt","Nsf","Myl4","Npepps","Kpnb1","Cdk5rap3","Phb","Ppp1r9b","Lrrc59","Nme1","Nme2","Kif2b","Dynll2","Epx","Mpo","Sept4","Ppm1e","Trim37","Cltc","Rps6kb1","Ca4","Ddx5","Gna13","Prkca","Prkar1a","Cdc42ep4","Rpl38","Btbd17","Rab37","Atp5h","Gga3","Grb2","Exoc7","Sept9","Nptx1","Baiap2","Hgs","Arhgdia","Pycr1","Fasn","Csnk1d","Fn3k","Tbcd","Usp14","Yes1","Dlgap1","Epb41l3","Rab12","Ndufv2","Vapa","Napg","Tubb6","Afg3l2","Spire1","Rock1","Aqp4","Cdh2","Dsg1","Dtna","Mapre2","Atp5a1","Rpl17","Txnl1","Wdr7","Kiaa1468","Cndp2","Mbp","Bsg","Hcn2","Palm","Gpx4","Atp5d","Ndufs7","Rps15","Ap3d1","Lmnb2","Gng7","Diras1","Gna11","Pip5k1c","Eef2","Map2k2","Ankrd24","Fsd1","Sh3gl1","Ubxn6","Ptprs","Rpl36","Lonp1","Tubb4","C3","Pnpla6","Kiaa1543","Map2k7","Ndufa7","Rab11b","Hnrnpm","Myo1f","Pin1","Olfm2","Icam5","Dnm2","Kank2","Prdx2","Farsa","Cc2d1a","Lphn1","Pkn1","Gipc1","Dnajb1","Ndufb7","Tpm4","Rab8a","Ap1m1","Eps15l1","F2rl3","Slc27a1","Unc13a","Rpl18a","Ccdc124","Rab3a","Fkbp8","Uba52","Upf1","Homer3","Ncan","Ndufa13","Atp13a1","Uqcrfs1","Pop4","Gpi","Mag","Atp4a","Cox6b1","Clip3","Tbcb","Actn4","Sirt2","Rps16",
"Timm50","Akt2","Pld3","Blvrb","Sptbn4","Numbl","Rab4b","Rps19","Atp1a3","Lipe","Xrcc1","Irgq","Apoe","Dmwd","Ppp5c","Calm3","Strn4","Ap2s1","Grlf1","Sae1","Slc8a2","Napa","Grin2d","Cyth2","Lmtk3","Rpl18","Lin7b","Ppfia3","Slc17a7","Aldh16a1","Rpl13a","Rps11","Ap2a1","Tbc1d17","Myh14","Syt3","Shank1","Etfb","Ppp2r1a","Prkcg","Rps9","Ttyh1","Syt5","Brsk1","Rps5","Ube2m","Csnk2a1","Snph","Nsfl1c","Sirpa","Idh3b","Vps16","Ddrgk1","Prnp","Plcb1","Plcb4","Snap25","Dstn","Rrbp1","Snx5","Dtd1","Napb","Cst3","Pygb","Hck","Mapre1","Snta1","Chmp4b","Ahcy","Dynlrb1","Map1lc3a","Epb41l1","Dlgap4","Rpn2","Src","Plcg1","Gdap1l1","Ywhab","Tomm34","Acot8","Slc12a5","Elmo2","Prex1","Arfgef2","Cse1l","Ube2v1","Dpm1","Bcas1","Vapb","Gnas","Cdh4","Rps21","Kcnq2","Eef1a2","Lime1","Ncam2","App","Cct8","Synj1","Itsn1","Atp5o","Cbr1","Cbr3","Pdxk","Pfkl","S100b","Slc25a18","Atp6v1e1","Prodh","Slc25a1","Sept5","Arvcf","Pi4ka","Crkl","Aifm3","Mapk1","Gnaz","Bcr","Mif","Sgsm1","Ap1b1","Nefh","Nipsnap1","Sec14l2","Pes1","Ywhah","Syn3","Apol2","Myh9","Cacng2","Rac2","Elfn2","Pdxp","Pick1","Csnk1e","Kcnj4","Ddx17","Rpl3","Syngr1","Rbx1","Rangap1","Aco2","Sept3","Arfgap3","Pacsin2",
"Samm50","Atxn10","Sbf1","Shank3","Slc25a6","Reps2","Cdkl5","Pdha1","Sh3kbp1","Rps6ka3","Cnksr2","Apoo","Pdk3","Il1rapl1","Gk","Dmd","Usp9x","Ddx3x","Cask","Maoa","Maob","Rp2","Uba1","Syn1","Praf2","Syp","Ccdc22","Iqsec2","Hsd17b10","Arhgef9","Msn","Dlg3","Snx12","Nlgn3","Ogt","Rps4x","Atrx","Pgk1","Apool","Gprasp2","Plp1","Prps1","Psmd10","Acsl4","Dcx","Pgrmc1","Slc25a5","Sept6","Gria3","Smarca1","Aifm1","Rap2c","Atp2b3","Abcd1","Idh3g","L1cam","Flna","Rpl10","Gdi1","Plxna3","Ubl4a","G6pd","Mpp1")

Synaptic.remodeling.genes<-c("Homer1","Map1a","Camk2a","Syp","Syn1","Baiap2","Nlgn1","Nlgn2","Nlgn3","Dlg4","Nrxn1","Nrxn2","Nrxn3","Shank1","Shank3")
Synaptic.elimination.genes<-c("Mef2a","Mef2b","Mef2d","C1qa","C1qb","C1qc","Lgi1","Park2","Fmr1","Pcdh10")
plot_genes_in_pseudotime(dat.filtered[lookupGeneId(dat.filtered,Synaptic.remodeling.genes)],color="Day",horizontal_jitter = 1,vertical_jitter = 0.1,ncol=4) + scale_color_brewer(palette="Set1")

myCorheatmap(dat.filtered[lookupGeneId(dat.filtered,Synaptic.remodeling.genes),],logMode=F,addrect=3)

# Ionotropic Receptors
#cortical responses to a repeated stimulus strengthen over time, a process that, similar to LTP, is dependent on NMDA (N-methyl-d-aspartate) receptor activation and AMPA (α-amino-3-hydroxy-5-methyl-4-isoxazolepropionic acid) receptor trafficking (Frenkel et al. 2006)

myCorheatmap(dat.filtered[intersect(lookupGeneId(dat.filtered,fData(dat.filtered)$gene_short_name[grepl("^Gri",fData(dat.filtered)$gene_short_name)]),expressed_genes),],logMode=F,addrect=3)

plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Grin2a","Grina","Grik3","Grin2b","Grik5","Grin1","Gria3","Gria2"))],color="celltype",branch_states=c(14,12),horizontal_jitter = 1,vertical_jitter = 0.1,ncol=2) + scale_color_manual(values=celltype_colors)

pdf("Glutamate_receptors_branched_pseudotime.pdf",width=12,height=40)
plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,fData(dat.filtered)$gene_short_name[grepl("^Gr[mi]",fData(dat.filtered)$gene_short_name)])],color="celltype",branch_states=c(14,12),horizontal_jitter = 1,vertical_jitter = 0.1,ncol=2) + scale_color_manual(values=celltype_colors)
dev.off()

#LTP genes in sig list (fig 7) and cluster 2
plot_genes_in_pseudotime(dat.filtered[intersect(names(pseudotime_heatmap_clustering[pseudotime_heatmap_clustering==2]), intersect(pseudotime_diff_test_sigGenes,lookupGeneId(dat.filtered,LTP_genes))),],ncol=4,color="celltype") + scale_color_manual(values=celltype_colors)

#Axon genes in sig list (fig 7) and cluster 2
plot_genes_in_pseudotime(dat.filtered[intersect(names(pseudotime_heatmap_clustering[pseudotime_heatmap_clustering==2]), intersect(pseudotime_diff_test_sigGenes,lookupGeneId(dat.filtered,Axon_genes))),],ncol=4,color="celltype") + scale_color_manual(values=celltype_colors)

Pseudotime_sigGenes_TFs<-c("Arc","Atf4","Atf7","Atf7ip","Atn1","Atrx","Atxn2","Baz2b","Bptf","Brd2","Btf3","Cct4","Chd3","Chd5","Cic","Cnbp","Crebbp","Crip2","Dbp","Eno1","Fezf2","Fhl2","Fos","Foxp1","Foxp2","Hira","Hmgb1","Hmgn2","Ier2","Junb","Klf10","Lmo3","Lmo4","Lzts1","Mapk8ip1","Mbnl2","Med6","Mef2c","Meis2","Mllt4","Mlx","Morf4l2","Ncald","Ncoa4","Ncor1","Neurod6","Nfib","Nfic","Nr1d1","Nr4a1","Pbx1","Per1","Pura","Rnf10","Rnf13","Rnf14","Rnf4","Sap18","Snd1","Sub1","Taf10","Tcf4","Tfdp1","Thra","Tnrc6a","Trmt1","Tsc22d1","Tub","Xbp1","Ybx1","Zfand6","Zfpl1","Zfr","Zhx1","Zmynd11")

pdf("Pseudotime_TFs.pdf",width=10,height=50)
plot_genes_in_pseudotime(dat.filtered[intersect(pseudotime_diff_test_sigGenes,lookupGeneId(dat.filtered,Pseudotime_sigGenes_TFs)),],ncol=5,color="celltype") + scale_color_manual(values=celltype_colors)
dev.off()

pdf("Pseudotime_TF_heatmap.pdf",width=8,height=8)
plot_pseudotime_heatmap(dat.filtered[lookupGeneId(dat.filtered,Pseudotime_sigGenes_TFs),],cores=1,show_rownames=T,num_clusters=1,return_heatmap=F)
dev.off()

LTD_genes<-c("Araf","Braf","Cacna1a","Crh","Crhr1","Gna11","Gna12","Gna13","Gnai1","Gnai2","Gnai3","Gnao1","Gnaq","Gnas","Gnaz","Gria1","Gria2","Gria3","Grid2","Grm1","Grm5","Gucy1a2","Gucy1a3","Gucy1b3","Hras","Igf1","Igf1r","Itpr1","Itpr2","Itpr3","Jmjd7-pla2g4b","Kras","Lyn","Map2k1","Map2k2","Mapk1","Mapk3","Nos1","Nras","Pla2g10","Pla2g12a","Pla2g12b","Pla2g1b","Pla2g2a","Pla2g2c","Pla2g2d","Pla2g2e","Pla2g2f","Pla2g3","Pla2g4a","Pla2g4b","Pla2g4e","Pla2g5","Pla2g6","Plcb1","Plcb2","Plcb3","Plcb4","Ppp1r17","Ppp2ca","Ppp2cb","Ppp2r1a","Ppp2r1b","Prkca","Prkcb","Prkcg","Prkg1","Prkg2","Raf1","Ryr1")
plot_genes_in_pseudotime(dat.filtered[intersect(pseudotime_diff_test_sigGenes,lookupGeneId(dat.filtered,LTD_genes)),],ncol=4,color="celltype") + scale_color_manual(values=celltype_colors)



pdf("Gaba_receptors_branched_pseudotime.pdf",width=12,height=40)
plot_genes_branched_pseudotime(dat.filtered[lookupGeneId(dat.filtered,fData(dat.filtered)$gene_short_name[grepl("^Gabr",fData(dat.filtered)$gene_short_name)])],color="celltype",branch_states=c(14,12),horizontal_jitter = 1,vertical_jitter = 0.1,ncol=2) + scale_color_manual(values=celltype_colors)
dev.off()

pdf("Presynaptic_branched_pseudotime.pdf",width=12,height=40)
plot_genes_branched_pseudotime(dat.filtered[intersect(State14vs12_DE_genes,lookupGeneId(dat.filtered,Presynaptic.genes))],color="celltype",branch_states=c(14,12),horizontal_jitter = 1,vertical_jitter = 0.1,ncol=2) + scale_color_manual(values=celltype_colors)
dev.off()

pdf("Postynaptic_branched_pseudotime.pdf",width=12,height=80)
plot_genes_branched_pseudotime(dat.filtered[intersect(State14vs12_DE_genes,lookupGeneId(dat.filtered,Bayes.collins.mouse.psd.full))],color="celltype",branch_states=c(14,12),horizontal_jitter = 1,vertical_jitter = 0.1,ncol=4) + scale_color_manual(values=celltype_colors)
dev.off()

#Nrxn2 increase is interesting
```

```{r pseudotime_by_celltype_sigGenes}

#Genes w/ significant DE along pseudotime (celltype_specific effects)
#pseudotime_celltype_diff_test_res <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+Total_mRNAs+sm.ns(Pseudotime,df=3)*celltype", reducedModelFormulaStr = "~num_genes_expressed+Total_mRNAs+sm.ns(Pseudotime,df=3)+celltype", cores=8) # Consider adding sex to remove Ddx3y, Xist, etc.

#pseudotime_celltype_diff_test_sigGenes <- rownames(pseudotime_celltype_diff_test_res[pseudotime_celltype_diff_test_res$qval <=0.01,])

pdf("random_sample_pseudotime_celltype_significant_de_genes.pdf",width=20,height=20)
plot_genes_in_pseudotime(dat.filtered[sample(pseudotime_celltype_diff_test_sigGenes,37)], color_by = "celltype",ncol=5,vertical_jitter=0.2,horizontal_jitter=2) + scale_color_manual(values=celltype_colors)
dev.off()

pdf("most_significant_pseudotime_celltype_significant_de_genes.pdf",width=20,height=40)
plot_genes_in_pseudotime(dat.filtered[rownames(pseudotime_celltype_diff_test_res[pseudotime_diff_test_res$qval <=0.0000000000000000000000000001,]),], color_by = "celltype",ncol=5,vertical_jitter=0.2,horizontal_jitter=2) + scale_color_manual(values=celltype_colors)
dev.off()

pdf("Pseudotime_celltype_heatmap.pdf",width=8,height=16)
plot_pseudotime_heatmap(dat.filtered[pseudotime_celltype_diff_test_sigGenes],cores=6,trend_formula="sm.ns(Pseudotime,df=3)+celltype")
dev.off()

pdf("Pseudotime_celltype_trajectory.pdf",width=8,height=5)
p1<-plot_cell_trajectory(dat.filtered,color="Day",cell_size=1,show_branch_points =FALSE) + scale_color_brewer(palette="Set1") + coord_equal(1.2)
p2<-plot_cell_trajectory(dat.filtered,color="celltype",cell_size=1,show_branch_points =FALSE) + scale_color_manual(values=celltype_colors)+ coord_equal(1.2)
grid.arrange(p1,p2,ncol=2)
dev.off()

my_pseudotime_plot_celltype(dat.filtered,marker=lookupGeneName(dat.filtered,sample(pseudotime_celltype_diff_test_sigGenes,1)))
my_pseudotime_plot_celltype(dat.filtered,marker="Pcp4l1") 

pdf("celltype_pseudotime_plots.pdf",width=6,height=3)
for (i in pseudotime_celltype_diff_test_sigGenes) {
  print(my_pseudotime_plot_celltype(dat.filtered,marker=lookupGeneName(dat.filtered,i)))
}
dev.off()
```



```{r pseudotime_wrt_hemisphere}
# Genes with expression dependent on hemisphere wrt Pseudotime
# Consistent responses across cell types
dat.hemi<-dat.filtered[,pData(dat.filtered)$hemi_wrt_whisker_pull!="Unk"]

dat.hemi<-estimateSizeFactors(dat.hemi)
dat.hemi<-estimateDispersions(dat.hemi,modelFormulaString="animal",cores=6)

hemisphere_pseudotime_diff_test_res <- differentialGeneTest(dat.hemi[expressed_genes,], fullModelFormulaStr = "~num_genes_expressed+Total_mRNAs+celltype+sm.ns(Pseudotime,df=3)+hemi_wrt_whisker_pull", reducedModelFormulaStr = "~num_genes_expressed+Total_mRNAs+celltype+sm.ns(Pseudotime,df=3)", cores=8) # Consider adding sex to remove Ddx3y, Xist, etc.

hemisphere_pseudotime_diff_test_sigGenes <- rownames(hemisphere_pseudotime_diff_test_res[hemisphere_pseudotime_diff_test_res$qval <=0.01,])

plot_genes_in_pseudotime(dat.hemi[sample(hemisphere_pseudotime_diff_test_sigGenes,20)], color_by = "Day",ncol=5,vertical_jitter=0.2,horizontal_jitter=2,trend_formula = "~ sm.ns(Pseudotime, df=3)*hemi_wrt_whisker_pull") + scale_color_brewer(palette="Set1")

```


```{r TFs_in_pseudotime}
plot_genes_in_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Maz","Tcf3","Esrra","Mafg","E4f1","Jun","Nrf1","Nfyc","Elk1","Creb1","Nfil3","Yy1","Smad4","Ets2","Atf2","Atf3"))],color="Day",vertical_jitter=0.05,horizontal_jitter=1,ncol=3)

Mafg.targets<-c("Abcb6","Akt1s1","Aldoa","Angpt1","Arhgef11","Arpp19","Asb2","Aspscr1","Atp1b1","Atp2a3","Atp6v0a1","Atxn7l2","Barhl2","Bex2","Birc6","Blvrb","Brd2","Btk","C12orf53","C20orf111","C20orf24","C9orf25","Ca10","Cadm1","Calm3","Cbx6","Cd200r1","Cd69","Cdc42se1","Cdc45","Chpf2","Clc","Coro6","Crygs","Cst7","Depdc7","Dmd","Dnai1","Drp2","Dusp13","Dync1i1","E2f3","Eif4g1","Eif5","Eno1","Ero1l","Fam184a","Fbxo30","Fgf12","Fgf9","Fibcd1","Fli1","Flnc","Fosl1","Foxp1","Gab2","Gap43","Gast","Gpx2","Grik2","Grk6","Gtf2a1","Hectd2","Hsd11b1","Hspb3","Hspb8","Ifnb1","Il13ra1","Il6","Ipo13","Irx4","Itm2b","Itpk1","Jarid2","Jazf1","Josd1","Kcna2","Kcne4","Kirrel3","Lamc1","Leprotl1","Limk1","Lin54","Lmo4","Lmtk2","Loxl4","Lrp1b","Lrrfip2","Lrrtm4","Mdm2","Meis2","Mgc16703","Mgst1","Mir22hg","Mitf","Mll3","Mllt11","Mnt","Mrc2","Mrpl32","Necab3","Neurod6","Nlgn2","Npepps","Nrgn","Nrn1l","Nrxn2","Nudt10","Nudt11","Numbl","Omg","Onecut2","Osbpl5","P2rx6","Padi4","Pafah1b1","Pbx2","Pcdh9","Pcdha1","Pcdha10","Pcdha6","Pcyt1a","Pdgfb","Pdha2","Pfn2","Pgrmc1","Phf17","Plbd2","Pls3","Popdc3","Pparg","Ppargc1a","Ppp2ca","Ppp2r2c","Prdx1","Prr7","Prrc2c","Psma2","Psma5","Psma6","Psmd11","Ptch1","Ptp4a1","Rab10","Rab1a","Rabep1","Rasgrf1","Rbbp7","Rbfox1","Rexo2","Rims2","Rorb","Rtn3","Satb1","Secisbp2l","Sel1l3","Serpinb5","Sfxn5","Shank2","Skp1","Slc11a1","Slc6a4","Slc6a5","Sncb","Snx12","Sobp","Sox5","Spats2","Spert","Spred1","Spta1","Sptbn4","St5","Ston2","Sv2b","Syt2","Tac1","Tbc1d17","Tbl1x","Tecpr1","Tekt5","Tex19","Tfap2d","Tfec","Tial1","Tinag","Tlk1","Tll1","Tnrc6a","Tomm70a","Tuba1c","Tubb","Txnrd1","Ube4b","Ubr4","Uchl1","Ufd1l","Unkl","Usp14","Vcp","Vps26a","Wdfy3","Wdfy3-as2","Wdr44","Wdr81","Wnt3","Zic4")

Mafg_pseudotime_sigGenes<-intersect(Mafg.targets,lookupGeneName(dat.filtered,pseudotime_diff_test_sigGenes))

plot_genes_in_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Mafg",Mafg_pseudotime_sigGenes))],color="Day",vertical_jitter=0.05,horizontal_jitter=1,ncol=5) + scale_color_brewer(palette="Set1") + geom_vline(aes(xintercept=7),linetype="dashed",color="grey50")

dat.subset<-dat.filtered[lookupGeneId(dat.filtered,Pseudotime_sigGenes_TFs),]
plot_pseudotime_heatmap(dat.subset, num_clusters=3,add_annotation_col=pData(dat.subset)[,c("Pseudotime","Day","animal","num_genes_expressed","Total_mRNAs","celltype")],show_rownames = TRUE)

Maz.targets<-c("Aamp","Abca1","Abhd8","Abi2","Abi3","Abl1","Acan","Acap1","Accn2","Acot11","Actb","Actc1","Actr1a","Actr3","Acvr1","Adam11","Adam15","Adam17","Adam19","Adam22","Adamts1","Adamts15","Adamts3","Adamts4","Adamts5","Adamts9","Adamtsl2","Adamtsl4","Adamtsl5","Adap1","Adcy10","Adcy4","Add3","Adipor1","Adora2a","Aebp2","Agap2","Agbl5","Agpat1","Agpat4","Agps","Ahcyl2","Ahnak","Aicda","Aifm1","Aim1l","Aip","Akap12","Akirin1","Alad","Alcam","Aldh1a2","Aldh4a1","Aldoa","Alkbh5","Alox12b","Alpi","Alppl2","Als2cr8","Amhr2","Ammecr1l","Amot","Amotl1","Ampd2","Amph","Angptl7","Ankrd11","Ankrd13b","Ankrd17","Ankrd2","Ankrd27","Anp32a","Anxa6","Anxa9","Ap1s1","Ap1s2","Ap3d1","Ap3s1","Apbb1","Apc2","Aplnr","Aqp1","Aqpep","Arap1","Arap3","Arc","Arf3","Arf4","Arf6","Arfgef1","Arhgap15","Arhgap24","Arhgap36","Arhgap44","Arhgap5","Arhgef12","Arhgef17","Arhgef19","Arid1a","Arid4a","Arl2","Arl4c","Arl6ip6","Armcx3","Armcx4","Arnt","Arpc5","Arpc5l","Arrb2","Arrdc4","Artn","Arvcf","Asb2","Asb7","Ascl1","Ascl2","Asgr1","Asphd1","Ass1","Astn1","Atad5","Atf2","Atf6b","Atf7","Atg12","Atl1","Atp13a4","Atp1a1","Atp1a2","Atp1a3","Atp1b2","Atp2a2","Atp2a3","Atp5g2","Atp5g3","Atr","Atxn2l","Atxn7l1","Atxn7l2","Auts2","Azgp1","Azin1","B4galnt1","Bace1","Bach2","Bag6","Bahd1","Bai2","Barhl1","Baz1a","Baz2a","Bcam","Bcar3","Bcat2","Bcl11a","Bcl11b","Bcl2l2","Bcl9","Bcl9l","Bcor","Bdnf","Begain","Bend4","Bhlha15","Bhlhe40","Bhlhe41","Bicd1","Blvrb","Bmf","Bmp1","Bmp2","Bmp4","Bmp7","Bmpr2","Bnc2","Bnip3l","Boll","Brd2","Brdt","Brms1l","Brp44","Brsk2","Brwd3","Bzw1","C10orf140","C10orf35","C11orf82","C11orf9","C12orf12","C13orf30","C14orf118","C14orf43","C15orf55","C16orf47","C16orf53","C16orf87","C17orf102","C17orf61","C18orf19","C19orf47","C19orf73","C19orf80","C1orf106","C1orf116","C1orf122","C1orf126","C1orf144","C1orf21","C1orf213","C1orf43","C1orf51","C1orf55","C1orf61","C1qa","C1qc","C1qtnf4","C1qtnf9","C20orf111","C20orf112","C20orf24","C20orf46","C21orf63","C22orf26","C2cd2l","C2orf50","C2orf67","C2orf69","C3orf24","C3orf32","C3orf58","C4a","C4b","C4orf34","C4orf38","C5orf41","C5orf64","C6orf168","C6orf25","C6orf89","C7orf51","C7orf60","C7orf68","C7orf74","C9orf125","C9orf24","C9orf25","Ca10","Ca14","Ca7","Ca9","Cabp1","Cacna1c","Cacna1g","Cacnb2","Cacng2","Cacng4","Cadm1","Cadm2","Cadps","Calcoco1","Calcr","Cald1","Calml5","Caln1","Camk1g","Camk2g","Camk2n2","Camkv","Camta2","Capg","Capsl","Casc2","Cask","Caskin2","Casp8ap2","Casq1","Casz1",
"Cbfa2t3","Cblb","Cbln2","Cbx3","Cbx6","Cbx8","Ccbl1","Ccdc106","Ccdc148","Ccdc24","Ccdc6","Ccdc69","Ccdc81","Ccnd1","Ccnd2","Ccne1","Ccne2","Ccng1","Ccng2","Ccnjl","Ccp110","Ccr7","Cd109","Cd151","Cd248","Cd300lg","Cd3eap","Cd40lg","Cd44","Cd47","Cd68","Cd72","Cdc40","Cdc42ep1","Cdc42ep2","Cdc42ep3","Cdc42ep4","Cdc42ep5","Cdca3","Cdh2","Cdh6","Cdipt","Cdk12","Cdk16","Cdk17","Cdk2ap2","Cdk6","Cdk8","Cdk9","Cdkn1a","Cdon","Cdx1","Cebpe","Celf1","Celf3","Celf4","Celf6","Cep135","Cep57","Cep95","Cercam","Cfl1","Cgb","Cgb8","Chat","Chchd7","Chd1","Chd2","Chd4","Chl1","Chm","Chpf","Chrd","Chrdl1","Chrm1","Chrnb2","Chst14","Chst5","Chst6","Chst8","Chst9","Cic","Cilp","Cks1b","Clc","Cldn15","Cldn16","Cldn19","Cldn4","Cldn6","Cldn9","Clic1","Clic5","Clip1","Clip2","Clip3","Clock","Cltc","Cmc1","Cnksr2","Cnn1","Cnn3","Cnnm1","Cnnm2","Cnot1","Cnot3","Cnot4","Cnppd1","Cnst","Cntfr","Cntn2","Cntn4","Cntnap2","Cntnap5","Col11a1","Col11a2","Col12a1","Col18a1","Col1a1","Col1a2","Col25a1","Col27a1","Col4a5","Col4a6","Col5a2","Col5a3","Cops2","Cops3","Cops6","Cops7a","Coro1a","Coro7","Cox8a","Cpa5","Cplx2","Cpne6","Cpne8","Cpsf7","Cpt1b","Crb2","Crebl2","Crem","Crhr1","Crmp1","Crnkl1","Crtc1","Crtc2","Cs","Csad","Csdc2","Csde1","Csf3","Csh1","Csh2","Cshl1","Csnk1e","Csnk2b","Csrnp1","Csrnp2","Csrp3","Ctcf","Ctdspl","Ctdspl2","Ctgf","Ctnnbip1","Ctnnd1","Ctnnd2","Cul2","Cul7","Cwc15","Cx3cl1","Cxcl14","Cxcr5","Cxxc5","Cyb561d1","Cyb5d1","Cybrd1","Cyfip1","Cyp26a1","Cyp4x1","Cyp7b1","Cyth4","Cyyr1","Daam1","Dab2ip","Dach1","Dagla","Dapp1","Dars","Daxx","Dazap1","Dbc1","Dbp","Dcaf11","Dcdc2","Dchs1","Dchs2","Dctn4","Dcx","Dda1","Ddah2","Ddit3","Ddr2","Ddx3x","Ddx5","Ddx50","Ddx6","Dennd2d","Dennd5a","Denr","Des","Det1","Dgkg","Dgkz","Dhh","Dhx15","Dhx40","Dhx58","Diaph1","Dip2c","Dkfzp547b139","Dkk1","Dkk2","Dlc1","Dlg2","Dlg3","Dll3","Dll4","Dlx1","Dlx4","Dmd","Dmkn","Dmpk","Dnai1","Dnaja1","Dnajb1","Dnajb12","Dnajb5","Dnajc14","Dnajc22","Dnajc4","Dnmt1","Dnmt3a","Dnmt3b","Dock4","Dock6","Dok1","Dok3","Dpagt1","Dpf2","Dpt","Drd1","Drd3","Dsc1","Dscam","Dsg3","Dst","Dtx1","Dusp14","Dusp26","Dusp4","Dusp6","Dusp7","Dusp8","Dusp9","Dyrk1a","Dzip1","E2f1","E2f3","E2f8","Ebag9","Ebf1","Ecel1","Edn2","Eed","Eef1a1","Eef1g","Efemp2","Efna1","Efna4","Efna5","Efnb1","Efnb3","Efs","Egflam","Egr1","Egr2","Egr3","Ehbp1","Ehmt2","Eif1","Eif2a","Eif3a","Eif4a1","Eif4e","Eif4g1","Eif4g2","Eif5a","Elavl2","Elavl3","Elavl4","Elf4","Elk3","Elovl4","Elovl6","Emilin1","Emx2","En2","Endou","Engase","Enho","Enkur","Enoph1","Enox2","Ensa","Entpd1","Eomes","Ep300","Epas1","Epb41l1","Epb41l4b","Epha1","Epha2","Epha7","Ephb2","Ephb6","Epn1","Epn2","Erbb3","Erc1","Erf","Erg","Ergic3","Errfi1","Esr1","Esrra","Esrrg","Etf1","Etnk1","Etv1","Etv4","Etv5","Evc","Evc2","Evi5l","Evx1","Ewsr1","Eya1","F13a1","F5","Faf2","Fam117a","Fam126a","Fam131a","Fam134a","Fam155b","Fam178a","Fam181b","Fam188b","Fam189b","Fam20a","Fam46a","Fam53b","Fam57b","Fam65a","Fam70a","Fam76b","Fank1","Fbn1","Fbrs","Fbxl19","Fbxl19-as1","Fbxl20","Fbxl22","Fbxo11","Fbxo24","Fbxo36","Fbxw7","Fcgr2b","Fcgr2c","Fchsd2","Fdps","Fermt2","Fermt3","Fes","Fev","Fezf2","Fgd1","Fgd2","Fgf11","Fgf13","Fgf14","Fgf17","Fgf3","Fgf4","Fgf5","Fgf7","Fgf9","Fgfbp1","Fgfr1","Fgfrl1","Fhl3","Fibcd1","Fign","Fitm1","Fiz1","Fkbp10","Fkbp2","Fkbp4","Fkrp","Fli1","Flj23865","Flj33534","Flj44313","Flj45831","Flj45950","Flj45983","Flnc","Fmnl1","Fmo2","Fmo3","Fmr1","Fnbp1l","Fos","Fosb","Fosl1","Foxa1","Foxa2","Foxb1","Foxd2","Foxe1","Foxi2","Foxj3","Foxl2","Foxn1","Foxo1","Foxo3","Foxo4","Frat1","Frmd3","Frs3","Fstl3","Fstl5","Fth1","Fthl17","Furin","Fus","Fut8","Fxr2","Fxyd1","Fxyd2","Fxyd3","Fxyd6","Fyn","Fzd10","Fzd5","Fzd7","G3bp2","Gabarap","Gabarapl2","Gabbr1","Gabra3","Gabre","Gabrg2","Gadd45b","Gadd45g","Gal3st4",
"Gale","Galk2","Galm","Galnt4","Gap43","Gapdh","Gars","Gart","Gast","Gata1","Gata3","Gbx2","Gdap1l1","Gde1","Gdf15","Gdnf","Gdpd1","Gdpd2","Gem","Gen1","Ggn","Ggnbp2","Gh1","Gh2","Gjb3","Gjd2","Gkap1","Gla","Gli1","Glipr2","Gmfg","Gna11","Gnal","Gnao1","Gnas","Gngt2","Golga2","Golga6l9","Golga8ip","Got1","Gpank1","Gpbp1","Gpc3","Gpc4","Gpha2","Gphn","Gpm6b","Gpr110","Gpr137b","Gpr162","Gpr17","Gpr173","Gpr3","Gpr56","Gprc5c","Gpx2","Gpx4","Grhl2","Gria1","Gria3","Grid2","Grin1","Grin2b","Grin2d","Grk5","Grk6","Grm1","Grm6","Grm7","Grn","Grpel1","Gsc","Gsk3b","Gsn","Gspt1","Gss","Gtf2a1","Gtf2h1","Gtpbp2","Gucy2d","Gyltl1b","Gypc","H1f0","H1fx","H2afz","H3f3b","Hapln1","Hat1","Hbp1","Hcfc1r1","Hcfc2","Hcn2","Hcrtr1","Hcrtr2","Hdac1","Hdac11","Hdac3","Hdac4","Hdx","Hectd1","Hepacam","Herpud1","Hes1","Hexim2","Hhipl1","Hic2","Hif3a","Hipk4","Hist2h2ab","Hist2h2ac","Hist2h2be","Hla-dma","Hm13","Hmbox1","Hmg20a","Hmg20b","Hmga1","Hmga2","Hmgn2","Hmha1","Hmx1","Hnf1a","Hnf1b","Hnf4a","Hnf4g","Hnrnpa0","Hnrnpa2b1","Hnrnpa3","Hnrnpd","Hnrnph1","Hnrnph2","Hnrnpk","Hnrnpl","Hnrnpr","Hnrnpul1",
"Hnrpdl","Hnrpll","Homer2","Hoxa1","Hoxa10","Hoxa13","Hoxa2","Hoxa4","Hoxa7","Hoxa9","Hoxb1","Hoxb2","Hoxb4","Hoxb5","Hoxb6","Hoxb7","Hoxb9","Hoxc10","Hoxc11","Hoxc13","Hoxc4","Hoxc5","Hoxc8","Hoxd3","Hoxd4","Hpca","Hpcal4","Hps5","Hr","Hrc","Hrh3","Hrk","Hs6st3","Hsd11b1","Hsd17b11","Hsd17b2","Hsd17b8","Hsp90ab1","Hspa8","Hspb1","Hspd1","Hspe1","Hspg2","Htr1a","Htr2c","Id1","Id3","Id4","Idh1","Ier5","Ift80","Igf1r","Igf2","Igf2bp1","Igf2bp3","Igfbp6","Igsf1","Igsf8","Ikzf2","Ikzf4","Il11","Il11ra","Il13","Il16","Il17rc","Il18","Il1rapl1","Il1rn","Il23a","Il24","Il36rn","Ildr2","Ilf3","Ilk","Impdh1","Inca1","Ing2","Inha","Inhbe","Inpp5f","Insm1","Ints9","Ipo4","Iqub","Irf2bpl","Irs1","Irx3","Iscu","Itga10","Itga11","Itga3","Itga5","Itgb1bp2","Itgb8","Itm2c","Itpka","Itpr1","Ivns1abp","Jag1","Jak2","Jakmip1","Jakmip2","Jarid2","Jazf1","Jph1","Jph3","Jph4","Jun","Junb","Jup","Kank3","Kat5","Kcna3","Kcna7","Kcnab1","Kcnab3","Kcnb2","Kcnc1","Kcnc2","Kcnc3","Kcnd1","Kcne1l","Kcne4","Kcnh2","Kcnh3","Kcnh4","Kcnh5","Kcnip2","Kcnip4","Kcnj10","Kcnj11","Kcnj4","Kcnj8","Kcnk10","Kcnk13","Kcnma1","Kcnn4","Kcnq1dn","Kcnq4","Kcns1","Kcns3","Kdelr1","Kdm2a","Kdm3a","Kdm4a","Kdm4d","Kdm6a","Kel","Khsrp","Kiaa0141","Kiaa0195","Kiaa1324","Kiaa1539","Kiaa1737","Kiaa1967","Kif13a","Kif1b","Kif1c","Kifap3","Kirrel2","Kirrel3","Klc2","Klf10","Klf12","Klf15","Klhdc3","Klhl1","Klhl3","Klhl4","Klk11","Klk13","Klk15","Klk5","Kpnb1","Kras","Kremen2","Krt13","Krt14","Krt15","Krt17","Krt83","Krtcap2","Lag3","Lama1","Lama5","Lamp2","Lancl3","Lasp1","Lat","Lbx1","Lcat","Lce5a","Lck","Lcn12","Lcn2","Lcor","Ldb1","Ldb3","Ldhb","Ldlr","Lect1","Lef1","Leprel4","Lgals1","Lhfpl3","Lhx1","Lhx4","Lhx6","Lhx9","Lif","Lig3","Limk2","Lin28a","Linc00324","Lins","Lipe","Lman1","Lmna","Lmnb1","Lmo3","Lmo4","Lmx1a","Lnx2","Loc100130691","Loc147727","Loc149134","Loc151534","Loxl3","Lphn1","Lphn3","Lpp","Lrch4","Lrfn5","Lrp1","Lrp6","Lrrc20","Lrrc29","Lrrc3b","Lrrc4","Lrrc8c","Lrrn1","Lrrn2","Lrrtm1","Lrsam1","Lsm12","Lsmd1","Lsr","Ltbr","Luc7l","Luc7l2","Luc7l3","Ly6g6c","Ly6g6e","Lyl1","Lypla2","M6pr","Mab21l1","Mafa","Mafg","Mag","Maged1","Maged2","Mall","Maml2","Mamstr","Manf","Map2k6","Map3k11","Map3k13","Map3k3","Map3k6","Map3k8","Map4","Map4k3","Map9","Mapk10","Mapk12","Mapk3","Mapk7","Mapk8ip2","Mapre3","Mapt","March6","March7","Marcks","Mark2","Matr3","Max","Mbd6","Mdfi","Mdh1","Mdk","Mdm4","Mea1","Mecom","Med13","Meis1","Meis2","Men1","Meox1","Mepce","Mesdc1","Mettl16","Mex3c","Mfap2","Mfsd5","Mgat3","Mgc13053","Mgc45800","Mgp","Mical2","Micall1","Mier1","Mier3","Mip","Mir17hg","Mir22hg","Mitf","Mknk2","Mkrn1","Mkrn4p","Mlf2","Mll","Mll4","Mll5","Mllt10","Mllt6","Mmd","Mmp14","Mmp15","Mmp2","Mnt","Mob4","Mocs1","Mospd1","Mov10","Mpo","Mpzl1","Mrc2","Mrpl14","Mrps18b","Msi1","Msi2","Msl2","Msl3","Msn","Msx1","Mt4","Mtf1","Mtmr14","Mtnr1b","Mtss1l","Mtus1","Mtx1","Mum1l1","Mxd3","Mxi1","Mxra8","Myadm","Myb","Mybpc3","Mybph","Myc","Mycn","Myh4","Myh6","Myl1","Myl3","Mylk2","Mylpf","Myo19","Myo3b","Myoz1","Myoz2",
"Myt1","N4bp2l2","Naa35","Nab2","Nags","Nap1l2","Nav2","Ncam1","Ncam2","Ncdn","Nck1","Nckap5","Ncoa2","Ncoa3","Ncor1","Ncs1","Ndfip1","Ndrg2","Ndst2","Ndst4","Ndufs2","Ndufs4","Necab3","Nefh","Nelf","Neo1","Neto1","Neurod2","Neurod4","Neurog1","Neurog3","Nf1","Nfatc4","Nfix","Nfkb2","Nfkbia","Nfyc","Ngfrap1","Nhlh2","Nin","Nipbl","Nkain3","Nkiras1","Nkx2-1","Nkx2-2","Nlgn1","Nlgn2","Nlgn3","Nlk","Nmnat2","Nnat","Nob1","Nodal","Nol4","Nos1","Nosip","Notch1","Notch3","Nova2","Npas2","Npas4","Npdc1","Npepps","Nphp4","Npr3","Nptx1","Npy","Nr0b2","Nr1d1","Nr1h3","Nr1i3","Nr2e1","Nr2f1","Nr2f2","Nr4a3","Nr5a1","Nr6a1","Nras","Nrf1","Nrg1","Nrp1","Nrxn2","Nt5c1a","Ntn3","Ntn5","Ntrk2","Ntrk3","Nuak2","Nudt3","Nufip2","Numbl","Nutf2","Nxph1","Nxph3","Nxph4","O3far1","Ocln","Odf2","Ogg1","Olig2","Onecut2","Opa3","Ophn1","Oprm1","Orai1","Orai3","Orc4","Osbpl10","Osbpl7","Osm","Otop2","Otub1","Otud7b","Otx1","Otx2","Ovol2","Oxt","P4ha1","P4htm","Pabpc1","Pabpc3","Pacsin3","Padi1","Padi3","Pafah1b1","Pafah1b2","Pak3","Pak6","Pank1","Pank3","Papolg","Pappa","Pard6g","Parp12","Patz1","Pax1","Pax2","Pax6","Pbx2","Pbx3","Pcbp2","Pcbp4","Pcdh1","Pcdh11x","Pcdh11y","Pcdh17","Pcdh20","Pcdh7","Pcdh9","Pcf11","Pcif1","Pcnt","Pcolce","Pcsk2","Pcyt1b","Pcyt2","Pdcd10","Pde11a","Pde2a","Pdgfb","Pdk2","Pdlim3","Pds5b","Pdzd7","Pdzk1ip1","Peli3","Pelp1","Penk","Pepd","Per1","Pet112","Pex5l","Pfn1","Pgc","Pgr","Pgrmc2","Phactr3","Phc1","Phc2","Phex","Phf12","Phf13","Phf15","Phf17","Phf20l1","Phf21a","Phf6","Phgdh","Phkg2","Phldb1","Phldb3","Phox2b","Phyhip","Pi15","Pi4kb","Pias3","Pigl","Pigo","Pigv","Pigw","Pik3ap1","Pim1","Pip5k1a","Pitpnc1","Pitpnm1","Pitx2","Pitx3","Pja1","Pkn1","Pkn3","Pkp3","Pkp4","Pla2g15","Pla2g2e","Pla2g7","Plag1","Plat","Plaur","Plcb2","Plcb3","Plec","Plekha6","Plekhb1","Plekhh3","Plin1","Plk3","Pls3","Plscr3","Plxdc2","Plxnc1","Pmvk","Pnck","Pnkd","Pnn","Pno1","Pnrc1","Poc1b","Pogk","Polr1d","Polr2a","Polr3gl","Postn","Pou2af1","Pou2f1","Pou2f3","Pou3f2","Pou3f3","Pou4f1","Pou5f1","Ppap2a","Pparg","Ppfia3","Ppig","Ppm1a","Ppm1e","Ppm1j","Ppm1n","Ppox","Ppp1ca","Ppp1cb","Ppp1r10","Ppp1r12a","Ppp1r12b","Ppp1r16b","Ppp1r21","Ppp1r8","Ppp1r9b","Ppp2r2b","Ppp2r2c","Ppp2r5d","Ppp2r5e","Ppp3ca","Pprc1","Ppt2","Ppy","Ppy2","Prac","Prcp","Prdm12","Prdm13","Prdm16","Prdm8","Prdx5","Prelp","Prg1","Prkaca","Prkag3","Prkar2b","Prkcdbp","Prkce","Prkcg","Prkch","Prkci","Prkd2","Prmt1","Prmt6","Prox1","Prph","Prr15","Prr16","Prr7","Prrc2a","Prrg2","Prrg3","Prrt2","Prss12","Prss8","Prtfdc1","Psd","Psd2","Psip1","Psmc3ip","Psmd2","Psmd3","Ptafr","Ptbp1","Ptchd1","Ptf1a","Ptger2","Pth1r","Ptk7","Ptma","Ptms","Ptpla","Ptpn5","Ptpn7","Ptprf","Ptprg","Ptprj","Ptprr","Ptrf","Pura","Purg","Pvalb","Pvrl2","Pyhin1","Pyroxd2","Pyy","Qprt","Qrich1","R3hdm1","R3hdm2",
"R3hdml","Rab10","Rab13","Rab21","Rab2a","Rab31","Rab33a","Rab38","Rab3a","Rab3c","Rab5b","Rab5c","Rab6b","Rab7a","Rabggta","Rad17","Rad21","Rad23b","Rai1","Ralgds","Raly","Ramp2","Ranbp10","Ranbp17","Rap1gds1","Rap2a","Rap2c","Rapgef1","Rapgef3","Rapgefl1","Rara","Rarb","Rarg","Rasa4","Rasgrp2","Rasip1","Rasl10a","Rassf2","Rax","Rb1cc1","Rbbp7","Rbfox1","Rbfox2","Rbm39","Rbm4b","Rbms1","Rbmx","Rbp4","Rbpj","Rbpjl","Rbpms","Rcor2","Rcvrn","Rdh10","Rdh8","Rell2","Rem2","Reps2","Rere","Rest","Rfx1","Rfx3","Rfx4","Rfx5","Rgl1","Rgl2","Rgma","Rgs3","Rgs7","Rgs9bp","Rhbdl3","Rhoa","Rhob","Rhobtb2","Rhoc","Rhog","Rhot1","Ribc1","Rilpl2","Rims1","Rlim","Rnf111","Rnf112","Rnf138","Rnf183","Rnf2","Rnf216","Rnf220","Rnf39","Rnf44","Rnf5","Rnmt","Robo3","Robo4","Rock1","Rock2","Ror1","Rora","Rorb","Rorc","Rpl12","Rpl15","Rpl24","Rpl41","Rpl5","Rprd1a","Rprd1b","Rps6ka5","Rps6kl1","Rras","Rrp8","Rsf1","Rtf1","Rtkn","Rtn2","Rtn3","Rtn4rl2","Rtp1","Rundc3a","Runx3","Rxrb","Rxrg","Rybp","Ryr1","Ryr2","S100a14","S100a16","S100a4","S1pr1","S1pr2","S1pr4","Sall1","Samd11","Sap130","Sar1a","Sart3","Sash3","Satb1","Sbf2","Sbsn","Scaf8","Scarf1","Scd","Scel","Scn3b","Scn5a","Scn8a","Scnn1a","Scube2","Scube3","Sdc1","Sdccag8","Sdhaf2","Sec14l2","Sec14l3","Sec24c","Sec24d","Sec61a2","Sec63","Selm","Selrc1","Sema4c","Sema7a","Senp1","Senp2","Senp3","Senp7","Sept4","Sept5","Sept7","Serinc2","Serp1","Serpinb2","Serpini1","Sertad1","Sertad3","Sesn1","Sesn2","Sesn3","Set","Sez6l2","Sf1","Sfrp2","Sfswap","Sfxn3","Sh2b3","Sh2d3c","Sh3bp5l","Sh3tc1","Sh3tc2","Shank1","Shank2","Shc1","Shfm1","Shh","Shkbp1","Shroom2","Sin3a","Sipa1","Sirt6","Sit1","Six1","Six2","Six4","Six5","Slain1","Slamf9","Slc12a4","Slc12a5","Slc12a7","Slc13a3","Slc14a1","Slc16a2","Slc16a4","Slc16a6","Slc17a6","Slc18a3","Slc22a17","Slc25a12","Slc25a23","Slc25a37","Slc27a3","Slc2a1","Slc32a1","Slc34a3","Slc38a1","Slc39a11","Slc39a13","Slc39a2","Slc39a5","Slc39a7","Slc41a1","Slc44a1","Slc4a10","Slc4a2","Slc5a1","Slc5a2","Slc6a12","Slc6a14","Slc6a16","Slc6a7","Slc6a9","Slc7a10","Slc7a8","Slc9a2","Slc9a3r1","Slco2a1","Slit3","Slitrk1","Slitrk3","Slitrk5","Smarca1","Smarca2","Smarca4","Smarcc1","Smarcd3","Smc1a","Smc3","Smc4","Smc6","Smg5","Smg7","Smndc1","Smpd3","Snap25","Snca","Sncb","Snph","Snrk","Snrpa1","Snx12","Socs1","Socs2","Sod3","Son","Sorbs1","Sorbs3","Sorcs1","Sox10","Sox11","Sox12","Sox15","Sox17","Sox21","Sox30","Sox4","Sox5","Sp1","Sp140","Sp3","Sp4","Sp6","Sp7","Sp8","Spag8","Spag9",
"Sparc","Spata8","Spcs2","Speg","Spi1","Spib","Spint1","Sppl3","Spred2","Spry4","Sptbn4","Sptssb","Src","Srcin1","Srf","Srpx","Srrm1","Srrm2","Srrm4","Srsf2","Srsf5","Srsf6","Ssbp2","Ssbp3","Ssr1","St3gal1","St3gal2","St5","St7","St8sia2","St8sia5","Stab1","Stac2","Stac3","Stag1","Stag2","Stard8","Stat3","Stat6","Stc1","Stc2","Stip1","Stk3","Stmn2","Strn4","Stx11","Stx16","Stx5","Stxbp6","Sufu","Sulf2","Sult2b1","Sumo1","Supt16h","Supt3h","Suv39h1","Sv2b","Swt1","Syn2","Sync","Syncrip","Syne1","Syne2","Synj1","Synpo2l","Syt11","Syt3","Syt4","Syt7","Syt9","Tab2","Tac1","Tac3","Tacc2","Taf1","Taf10","Taf15","Taf9","Tagln","Taok1","Tas2r41","Tbc1d10a","Tbc1d10c","Tbc1d14","Tbcc","Tbx2","Tbx3","Tbx6","Tcea3","Tceal8","Tceb1","Tcf12","Tcf15","Tcf21","Tcf4","Tcf7l1","Tcf7l2","Tcirg1","Tcp11l2","Tcta","Tead2","Tead3","Tenc1","Terf2","Tfap2c","Tfap4","Tfb2m","Tfdp2","Tfe3","Tfpi2","Tgfb2","Tgfb3","Tgif1","Tgif2","Tgm1","Tgm6","Thbs3","Them5","Thnsl1","Thoc6","Thpo","Thra","Thrap3","Thrb","Tial1","Tie1","Tinagl1","Tjap1","Tle3","Tlk1","Tlk2","Tlx1","Tmcc3","Tmeff1","Tmem106b","Tmem109","Tmem125","Tmem132e","Tmem151a","Tmem188","Tmem191a","Tmem208","Tmem209","Tmem35","Tmem57","Tmem79","Tmem86a","Tmem88","Tmie","Tmlhe","Tmub1","Tnfaip8l1","Tnfrsf12a","Tnfrsf1a","Tnfsf13","Tnfsf15","Tnks1bp1","Tnnc2","Tnni2","Tnni3","Tnnt2","Tnnt3","Tnpo1","Tnpo2","Tnpo3","Tnrc6a","Tns1","Tnxb","Tob1","Tob2","Topbp1","Tor1aip2","Tp53","Tp53i11","Tpbg","Tpi1","Tpi1p2","Tpm2","Tpm3","Tpt1","Traf4","Trappc3","Trerf1","Trex1","Trh","Trib1","Trib2","Trim25","Trim3","Trim33","Trim41","Trim46","Trim6","Trim8","Trip10","Trmt11","Trmt112","Trmt1l","Trmt2b","Troap","Trove2","Trpc4","Trps1","Trpv5","Trpv6","Trrap","Tsc1","Tsc22d2","Tsc22d3","Tsen54","Tshr","Tsnaxip1","Tspan2","Tspan33","Tspan7","Tsr1","Tssk3","Ttc9c","Tti1","Ttll6","Tub","Tuba4b","Tuba8","Tubb2b","Tubb4a","Tug1","Tut1","Uba3","Ubac2","Ubap1","Ube2b","Ube2d3","Ube2h","Ube2k","Ube2l3","Ube2n","Ube2r2","Ube2z","Ube4b","Ubqln1","Ubr4","Ubr5","Ubtf","Uchl5","Ugp2","Uhmk1","Ulk1","Unc119","Upf2","Usf1","Ush1g","Usp2","Usp5","Usp51","Usp54","Ust","Utp18","Vamp4","Vamp8","Vangl1","Vasn","Vasp","Vat1","Vcan","Vcl","Vegfa","Vegfb","Vezf1","Vgf","Vgll4","Vim","Vkorc1l1","Vldlr","Vprbp","Vps13c","Vps25","Vsig10","Vsig2","Vsx1","Vwa1","Wac","Wasf1","Wbp1","Wbp2nl","Wbp4","Wdr12","Wdr13","Wdr78","Wdr81","Wdr90","Wdr92","Wfdc2","Wfikkn1","Wibg","Wnk1","Wnk4","Wnt1","Wnt2","Wnt3","Wnt5a","Wnt7a","Wrap53","Wrn","Wt1","Wwc1","Wwc3","Wwp2","Xpo1","Xpr1","Xrn2","Xylt2","Yars","Ybx2","Yeats2","Ypel4","Ythdc1","Ythdf3","Ywhab","Ywhae","Ywhag","Ywhaq","Ywhaz","Zbtb10","Zbtb17","Zbtb22","Zbtb26","Zbtb37","Zbtb4","Zbtb7b","Zbtb9","Zc3h10","Zc3hav1l","Zcchc7","Zcwpw1","Zdhhc14","Zdhhc15","Zdhhc5","Zeb1","Zer1","Zfand3","Zfp36l1","Zfpm2","Zfx","Zfy","Zfyve1","Zic2","Zic4","Zmym2","Zmym5","Zmynd8","Znf143","Znf24","Znf263","Znf277","Znf32","Znf341","Znf362","Znf384","Znf385a","Znf395","Znf436","Znf462","Znf485","Znf496","Znf503","Znf521","Znf524","Znf532","Znf575","Znf579","Znf580","Znf644","Znf646","Znf668","Znf687","Znf703","Znf710","Znf775","Znf821","Znrd1","Znrf1","Zscan2","Zzz3")


Maz_pseudotime_sigGenes<-intersect(Maz.targets,lookupGeneName(dat.filtered,pseudotime_diff_test_sigGenes))

plot_genes_in_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Maz"))],color="Day",vertical_jitter=0.05,horizontal_jitter=1,ncol=5) + scale_color_brewer(palette="Set1") + geom_vline(aes(xintercept=4),linetype="dashed",color="grey50")

dat.subset<-dat.filtered[lookupGeneId(dat.filtered,c("Maz",Maz_pseudotime_sigGenes)),]
plot_pseudotime_heatmap(dat.subset, num_clusters=3,show_rownames = TRUE)


Nfil3.targets<-c("Abhd8","Acsl4","Adnp","Adrb2","Ahnak","Ak3","Aktip","Aldh1a1","Aldh3a1","Angptl1","Ano1","Ap1s2","Arid1b","Arnt","Arrdc3","Atf3","Atoh7","Atxn1","Atxn2l","Bsn","C1orf51","C1qtnf7","C20orf103","C22orf31","C5orf13","C9orf86","Calcrl","Calm1","Calm2","Cdc42","Cdk8","Cdkl1","Cdyl","Cep95","Cept1","Chic2","Clasp1","Clcn1","Clcn5","Clstn1","Cntf","Col15a1","Creb5","Crim1","Csnk1e","Ddx5","Dennd4a","Dgki","Dmd","Dnaja2","Ecm2","Eef2","Eif2c3","Elavl4","Elmod1","Elovl6","Ensa","Ep300","Epb41","Ephx4","Epn2","Erf","Ergic1","Esrrg","Etv4","Etv5","Faim2","Fbxo3","Fbxw7","Fgf14","Fnbp1","Foxo3","Fut9","Gabarapl2","Gpm6a","Grem2","Grhl1","H3f3a","Herpud1","Hist3h2a","Hist3h2bb","Hivep3","Hoxa10","Hoxa4","Hoxc4","Hoxc6","Hrh3","Hspd1","Hspe1","Ifng","Ikzf2","Il1rapl1","Il34","Il6st","Impdh1","Inpp4a","Irf2bp1","Jmjd1c","Jph3","Kcnj1","Kdm6a","Krtap19-5","Large","Lgalsl","Lgsn","Loc652276","Lrp1b","Map2k3","Map2k6","Map4","Mecp2","Med12l","Miox","Mir22hg","Mpp2","Mpp5","Mpp6","Mreg","Naa60","Nckap5","Ndst3","Negr1","Neurod6","Nfil3","Nin","Nipbl","Nmt2","Nptx1","Nr1d1","Nrgn","Nrsn1","Nyx","Ogt","Olfm4","Ormdl2","Osbpl6","Pck2","Pcsk2","Pdxp","Pdzd8","Peli2","Pgk1","Pik3r1","Pip4k2b","Plcb1","Pmepa1","Pnma1","Pogz","Polg2","Ppfia1","Prdm8","Prelid1","Prex2","Prickle1","Prkaa2","Prkg1","Prnp","Pthlh","Pvrl1","Rab24","Rab3c","Rai2","Rasl10b","Rbfox2","Rgl1","Rgs6","Rhobtb2","Rnf145","Rps6ka3","Sarnp","Sat1","Scml4","Sec14l3","Sel1l3","Sgk494","Sh2b3","Sh3gl2","Shfm3","Sidt1","Slc24a2","Smad3","Smap2","Spata2","Srebf2","Srsf6","Stard13","Sulf1","Sumo1","Syt11","Taf15","Tagln3","Tbx6","Tenc1","Tfeb","Tmc3","Tmem154","Tmem185a","Tmem215","Tmem57","Tnfsf13","Tsc22d1","Tsc22d3","Tuba1a","Ubr5","Uchl1","Unc5c","Usp2","Vegfa","Vgll4","Wdr47","Wdr81","Wee1","Xpo7","Ythdf3","Ywhag","Zbtb7a","Zdhhc14","Zdhhc5","Zfp161","Zhx2","Znf295","Znf687","Znf711")

pseudotime_sigGenes_TFs<-c("Arc","Atrx","Btf3","Cct4","Chd3","Cnbp","Crebbp","Dbp","Eno1","Fhl2","Foxp1","Foxp2","Hmgn2","Ier2","Meis2","Mlx","Ncald","Ncor1","Neurod6","Nfic","Nr1d1","Per1","Sap18","Thra")

plot_genes_in_pseudotime(dat.filtered[lookupGeneId(dat.filtered,pseudotime_sigGenes_TFs),],color="Day",ncol=4,vertical_jitter=0.1,horizontal_jitter=1) + scale_color_brewer(palette="Set1")

pdf("Pseudotime_TFs.pdf",width=5,height=3)
dat.subset<-dat.filtered[lookupGeneId(dat.filtered,Pseudotime_sigGenes_TFs),]
plot_pseudotime_heatmap(dat.subset, num_clusters=3,add_annotation_col=pData(dat.subset)[,c("Pseudotime","Day","animal","num_genes_expressed","Total_mRNAs","celltype")],show_rownames = TRUE)
dev.off()

```

```{r miRNAs_in_pseudotime}
#miR-200 family controls late steps of postnatal forebrain neurogenesis via Zeb2 inhibition

#miR-181 regulates GluA2 (Gria2) expression and associated with plasticity (miR-181 target genes are enriched across pseudotime)
miR181.targets<-c("Abi3bp","Abtb2","Acap2","Acsl1","Acvr2a","Adam11","Adamts1","Adamts18","Adamts6","Adarb1","Adcy1","Adcy9","Adm","Ado","Adrbk1","Aff1","Aff4","Agfg1","Agpat1","Akap6","Akt3","Ankrd13c","Ankrd43","Ankrd50","Ano1","Ap1g1","Arfgef2","Arhgef7","Arl5a","Arnt2","Arrdc3","Arsj","Atg5","Atp11c","Atp1b1","Atp2a2","Atp2b1","Atp2b2","Atp8b5p","Atxn1","B4galt1","Baat","Bach2","Bai3","Baiap2","Baz2a","Baz2b","Bcl11a","Bcl2l11","Bclaf1","Bhlhe40","Birc6","Bmpr2","Bptf","Brd1","Brwd1","Btbd3","C14orf129","C14orf43","C16orf87","C17orf39","C1orf63","C2orf69","C5orf41","C6orf62","C7orf41","Cacna2d2","Cacnb2","Camk2g","Camsap1","Camta2","Caprin1","Card11","Carm1","Cbfa2t2","Cbfa2t3","Cblb","Cbx4","Cbx7","Ccar1","Ccdc165","Ccnj","Ccnk","Cd163","Cd4","Cdc42bpa","Cdc73","Cdh13","Cdon","Cdyl","Cggbp1","Chd7","Chd9","Clasp1","Clip1","Cnr1","Cntn4","Cntnap2","Cntnap3","Col16a1","Cpd","Cpeb4","Cpne2","Creb1","Crebzf","Crim1","Csnk1g1","Csnk1g3","Ctdspl","Cttnbp2nl","Cul3","Cul5","Cyr61","Dazap2","Dcun1d1","Ddx3x","Ddx3y","Derl1","Dhx57","Dip2b","Dnajc13","Dnajc21","Dock10","Dock7","Dopey1","Dpp10","Dpysl2","Dusp5","Dync1li2","E2f5","E2f7","Eed","Egr3","Eif4a2","En1","En2","Enah","Epb41l4b","Epc2","Epha4","Eps15","Esm1","Esr1","Etf1","Ets1","Etv6","Eya3","Fam122b","Fam126b","Fam13b","Fam160a2","Fam178a","Fam179b","Fam190b","Fam3c","Fam73b","Fbxo11","Fbxo33","Fign","Fkbp1a","Fmnl2","Fndc3a","Fndc3b","Fos","Foxk1","Foxp1","G3bp2","Gabra1","Galntl1","Gapvd1","Gata6","Ggt7","Ghitm","Gls","Golga1","Golga6l9","Golga8a","Golga8b","Golga8e","Golga8f","Golga8g","Gpbp1","Gpd1l","Grb10","Grem1","Gria2","Grik2","Grm5","Hcn2","Heca","Hic2","Hlf","Hmgb2","Hoxa11","Hoxb5","Hoxc8","Hyou1","Igf2bp2","Igsf11","Il1a","Ilf3","Impg1","Ino80","Inpp5a","Inpp5e","Ipo5","Irf2bpl","Irs2","Itga3","Itgb8","Ivns1abp","Jazf1","Kank1","Kat2b","Kcnk10","Kcnma1","Kiaa0182","Kiaa0195","Kiaa0528","Kiaa0664","Kiaa2022","Klf15","Klf6","Klhl2","Klhl5","Kpna1","Kpnb1","Larp4","Lbr","Lclat1","Lemd3","Lif","Lin28a","Lin28b","Lin7c","Lmbrd2","Lmo1","Lmo3","Loc283174","Lonrf1","Lpcat1","Lpp","Lppr4","Lrba","Lrp12","Lrrc32","Lrrn1","Mamdc2","Map1a","Map1b","Map2k1","Map3k10","Map3k3","Mapk1","Mapt","Mat2a","Mb21d2","Mbnl2","Mboat2","Meaf6","Mecp2","Med26","Med8","Metap1","Mex3b","Mex3c","Mfsd6","Mink1","Mip","Mknk2","Mmp14","Mpp5","Msi1","Mtmr12","Mtmr9","Mtpn","Mybpc1","Myh10","Naa15","Naa20","Ncald","Ncoa2","Negr1","Nfat5","Nipbl","Nlk","Nmt2","Nova1","Npepps","Nptn","Nptxr","Nr2c2","Nr3c1","Nr4a3","Nr6a1","Nrxn1","Nsmaf","Ogt","Osbpl3","Osbpl8","Otud4","Pak4","Pak7","Palld","Palm2","Pam","Papolg","Pawr","Pbx3","Pcdha1","Pcdha10","Pcdha11","Pcdha12","Pcdha13","Pcdha2","Pcdha3","Pcdha4","Pcdha5","Pcdha6","Pcdha7","Pcdha8","Pcdha9","Pcdhac1","Pcdhac2","Pcgf2","Pcnp","Pdgfra","Pdia6","Pdk4","Pdlim5","Per2","Phf15","Phf20l1","Phf3","Phlda1","Phox2b","Pi4k2a","Pi4k2b","Pias3","Picalm","Pik3r3","Pknox2","Plag1","Plcl2","Plekha3","Plekhj1","Pls1","Pnrc2","Pom121","Pp7080","Ppip5k2","Ppp1cb","Ppp1r12b","Ppp3r1","Prkcd","Prkce","Prtg","Psap","Ptpn9","Pum1","Purb","Qki","Rab11a","Rab11fip2","Rabgef1","Rad21","Ran","Rap1b","Rbbp7","Rbm22","Rbm26","Rbm47","Reck","Rgma","Rlf","Rnf145","Rnf182","Rnf34","Rnf6","Rnmt","Robo2","Rod1","Rps6ka3","Rps6kb1","Rsbn1","Rspo2","Rtf1","Runx1","S100pbp","Schip1","Scoc","Sec24c","Sel1l","Sema4c","Sema4g","Senp1","Senp2","Sept3","Sfr1","Sirt1","Six2","Slc25a25","Slc25a3","Slc25a37","Slc2a3","Slc38a2","Slc9a6","Slitrk1","Slitrk2","Smad7","Snn","Sox5","Sox6","Specc1l","Spire1","Spry4","Srpk2","Srsf7","Ss18l1","Ssx2ip","St8sia4","Stag1","Stc1","Syne1","Synpr","Sypl2","Syt3","Tab3","Tardbp","Tbc1d1","Tbc1d4","Tbl1x","Tbl1xr1","Tbpl1","Tcerg1","Tgfbi","Thrb","Timp3","Tm9sf3","Tmcc1","Tmed5","Tmem196","Tnfrsf11b","Tnfsf11","Tnrc6b","Tom1l1","Tox","Trak2","Trim13","Trim2","Trim3","Trim71","Trim9","Tsc22d2","Tulp4","Ube2b","Ube3c","Ubp1","Unc5a","Usp33","Usp42","Wdr20","Wdr37","Wsb1","Wscd2","Ythdf2","Ythdf3","Ywhag","Zbtb4","Zbtb41","Zc3h11a","Zc3h6","Zdhhc7","Zfand6","Zfp36l1","Zic2","Zic3","Znf207","Znf280d","Znf468","Znf615","Znf655","Znf664","Znf800")

miR181_pseudotime_sigGenes<-intersect(miR181.targets,lookupGeneName(dat.filtered,pseudotime_diff_test_sigGenes))

plot_genes_in_pseudotime(dat.filtered[lookupGeneId(dat.filtered,c("Gria2",miR181_pseudotime_sigGenes))],color="Day",vertical_jitter=0.05,horizontal_jitter=1,ncol=3) + scale_color_brewer(palette="Set1") 

dat.subset<-dat.filtered[lookupGeneId(dat.filtered,miR181_pseudotime_sigGenes),]
plot_pseudotime_heatmap(dat.subset, num_clusters=3,show_rownames = TRUE,cores=6)


```



```{r switchDE}
require(switchde)

switchde.res<-switchde(as.matrix(vstExprs(dat.filtered[expressed_genes,])),pseudotime=pData(dat.filtered)$Pseudotime,)

switchde.res.merged<-merge(fData(dat.filtered[expressed_genes,]),switchde.res,by.x=0,by.y="gene")

plot(switchde.res$k,-log10(switchde.res$qval))

#plotGene<-"Narf"
plotGene<-sample(switchde.res.merged[switchde.res.merged$qval<=0.00000000000000000001,]$gene_short_name,1)
switchplot(as.vector(vstExprs(dat.filtered[lookupGeneId(dat.filtered,plotGene),])),
           pData(dat.filtered)$Pseudotime,
           extract_pars(switchde.res,lookupGeneId(dat.filtered,plotGene))
           ) + ggtitle(plotGene)

```

```{r running_entropy}
library(zoo)
#tmp.gene<-sample(pseudotime_diff_test_sigGenes,1)

myBCV<-function(x){(sd(x)/mean(x))}
myVarTest<-function(geneName,doPlot=FALSE){
  tmp.gene<-lookupGeneId(dat.filtered,geneName)
  tmp.1<-as.vector(vstExprs(dat.filtered[tmp.gene,pData(dat.filtered)$celltype==1]))
  tmp.2<-as.vector(vstExprs(dat.filtered[tmp.gene,pData(dat.filtered)$celltype==2]))
  tmp.zoo.1<-zoo(tmp.1,as.numeric(pData(dat.filtered)$Pseudotime))
  tmp.zoo.2<-zoo(tmp.2,as.numeric(pData(dat.filtered)$Pseudotime))
  #tmp.roll.1<-rollapply(tmp.zoo.1,width=25,rollShannon,by=5,by.column=TRUE,align="center")
  tmp.roll.1<-rollapply(tmp.zoo.1,width=25,myBCV,by=5,by.column=TRUE,align="center")
  tmp.roll.mean.1<-rollapply(tmp.zoo.1,width=25,mean,by=5,by.column=TRUE,align="center")
  #tmp.roll.2<-rollapply(tmp.zoo.2,width=25,rollShannon,by=5,by.column=TRUE,align="center")
  tmp.roll.2<-rollapply(tmp.zoo.2,width=25,myBCV,by=5,by.column=TRUE,align="center")
  tmp.roll.mean.2<-rollapply(tmp.zoo.2,width=25,mean,by=5,by.column=TRUE,align="center")
  
  if(doPlot){
      tmp.df<-data.frame(bin=1:length(tmp.roll.1),rolling_bcv_1=tmp.roll.1,rolling_bcv_2=tmp.roll.2,rolling_mean_1=tmp.roll.mean.1,rolling_mean_2=tmp.roll.mean.2)
      tmp.df$Pseudotime.bin<-rownames(tmp.df)
      p1<-ggplot(tmp.df,aes(x=bin)) +
          geom_point(aes(y=rolling_bcv_1),color=celltype_colors[1]) +
          geom_point(aes(y=rolling_bcv_2),color=celltype_colors[2]) +
          stat_smooth(aes(y=rolling_bcv_1),method="loess",color=celltype_colors[1]) + 
          stat_smooth(aes(y=rolling_bcv_2),method="loess",color=celltype_colors[2]) + 
          monocle:::monocle_theme_opts() +          
          ggtitle(lookupGeneName(dat.filtered,tmp.gene))
      p2<-plot_genes_in_pseudotime(dat.filtered[tmp.gene],color="celltype",horizontal_jitter = 1,vertical_jitter = 0.1) + scale_color_manual(values=celltype_colors)
      p3<-my_pseudotime_plot_celltype(dat.filtered,marker=lookupGeneName(dat.filtered,tmp.gene)) + scale_y_log10()
      plot(grid.arrange(p1,p2,p3,ncol=3))
  }
  
  tmp.df<-rbind(data.frame(bin=1:length(tmp.roll.1),rolling_bcv=tmp.roll.1,rolling_mean=tmp.roll.mean.1,celltype=1),data.frame(bin=1:length(tmp.roll.2),rolling_bcv=tmp.roll.2,rolling_mean=tmp.roll.mean.2,celltype=2))
  
  fit1<-vglm(rolling_bcv ~ bin*celltype,data=tmp.df,family=gaussianff())
  fit2<-vglm(rolling_bcv ~ bin+celltype,data=tmp.df,family=gaussianff())
  return(data.frame(gene_id=tmp.gene,geneName=geneName,p.val=lrtest(fit1,fit2)@Body$Pr[2]))
}

#varTest.res<-lapply(lookupGeneName(dat,sample(rownames(pseudotime_celltype_diff_test_res[pseudotime_diff_test_res$qval <=0.0000000000000000000000000001,]),5)), function(i){print(i);myVarTest(i)})

#varTest.res<-lapply(lookupGeneName(dat.filtered,pseudotime_diff_test_sigGenes), function(i){print(i);myVarTest(i)})
varTest.full.res<-lapply(lookupGeneName(dat.filtered,expressed_genes), function(i){print(i);myVarTest(i)})

varTest.full.res.merged<-merge(varTest.full.res,fData(dat.filtered),by.x="gene_id",by.y=0,all.x=TRUE,all.y=FALSE)

library(ggrepel)
p1<-ggplot(subset(varTest.full.res.merged,q.val<=0.01)) +
  geom_point(aes(x=num_cells_expressed,y=-log10(q.val))) +
  geom_text_repel(aes(num_cells_expressed, -log10(q.val), label = gene_short_name),color="red") + 
  monocle:::monocle_theme_opts() 
pdf("variance_test_significance_vs_num_cells_expressed.pdf",width=10,height=10)
p1
dev.off()

p2<-ggplot(subset(varTest.full.res.merged,q.val<=0.01)) +
  geom_point(aes(x=celltype2_Day7_mean_expr,y=-log10(q.val))) +
  geom_text_repel(aes(celltype2_Day7_mean_expr, -log10(q.val), label = gene_short_name),color="red") + 
  monocle:::monocle_theme_opts() 


varTest.full.res<-do.call(rbind,varTest.full.res)
varTest.full.res$q.val<-p.adjust(varTest.full.res$p.val,method="BH")

varTest.sigGenes<-as.character(varTest.full.res[varTest.full.res$q.val<=0.01,]$gene_id)

table(varTest.full.res[varTest.full.res$q.val<=0.01,]$gene_id %in% pseudotime_diff_test_sigGenes)

myVarTest(sample(lookupGeneName(dat.filtered,varTest.sigGenes),1),doPlot=T)

```

```{r Gini}
require('ineq')
tmp<-apply(exprs(dat.filtered),1,function(x){ineq(x,type="Gini")})
```



End of current analysis!
######################

# Differential test on label (single cell and comparison to bulk)
Taken from the orig. analysis but not used here.

```{r celltype_summary_metrics}
fData(dat.filtered)$celltype1_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$cluster ==1]),1,mean)

fData(dat.filtered)$celltype2_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$cluster ==2]),1,mean)

fData(dat.filtered)$log2_fc<-log2(fData(dat.filtered)$celltype1_mean_expr/fData(dat.filtered)$celltype2_mean_expr)
```

```{r projection_lable_summary_metrics}
fData(dat.filtered)$grn_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$color =="grn"]),1,mean)

fData(dat.filtered)$redgrn_mean_expr<-apply(exprs(dat.filtered[,pData(dat.filtered)$color =="redgrn"]),1,mean)

fData(dat.filtered)$log2_fc_redgrn_vs_grn<-log2(fData(dat.filtered)$redgrn_mean_expr/fData(dat.filtered)$grn_mean_expr)
```

```{r spectral_tSNE_kmeans_diff_test_label}
# #ROC test 
# spectral.ROC<-ROC_test(dat.filtered,c("1"),c("2"),expressed_genes,thresh.use=0.25)
# myBarMap(dat.filtered,geneset=lookupGeneName(dat.filtered,rownames(spectral.ROC[spectral.ROC$power>0.625,])),color_by="factor(cluster)",facet_by="cluster+pool",cluster=T) + scale_color_brewer(palette="Set1")+ scale_fill_brewer(palette="Set1")

spectral_diff_test_res_label <- differentialGeneTest(dat.filtered[expressed_genes,], fullModelFormulaStr = "~pool+num_genes_expressed+color", reducedModelFormulaStr = "~pool+num_genes_expressed", cores=8, relative_expr=FALSE)

spectral_diff_test_sigGenes_label <- rownames(spectral_diff_test_res_label[spectral_diff_test_res_label$qval <=0.001,])

# myBarMap(dat.filtered,geneset=sample(lookupGeneName(dat.filtered,spectral_diff_test_sigGenes_label),20),color_by="factor(cluster)",facet_by="cluster+pool",cluster=T) + scale_color_brewer(palette="Set1")+ scale_fill_brewer(palette="Set1")
# 
# pdf("spectral_tSNE_kmeans_sigGenes_tSNE.pdf",width=10,height=5)
# tSNE_p1<-myTSNEPlot(dat.filtered,color="color",shape="pool") + scale_color_manual(values=c("darkgreen","red")) + coord_equal(1) + scale_x_continuous(breaks=c(-50,0,50)) + scale_y_continuous(breaks=c(-50,0,50))
# tSNE_p2<-myTSNEPlot(dat.filtered,color="factor(cluster)",shape="pool") + scale_color_manual(values=celltype_colors) + guides(color=FALSE) + coord_equal(1) + scale_x_continuous(breaks=c(-50,0,50)) + scale_y_continuous(breaks=c(-50,0,50))
# grid.arrange(tSNE_p2,tSNE_p1,ncol=2)
# dev.off()

pdf("spectral_tSNE_kmeans_sigGenes_tSNE_markers.pdf",width=50,height=50)
myTSNEPlotAlpha(dat.filtered,color="color",shape="pool",markers=lookupGeneName(dat.filtered,spectral_diff_test_sigGenes),scaled=T) + scale_color_manual(values=c("darkgreen","red")) + scale_x_continuous(breaks=c(-50,0,50)) + scale_y_continuous(breaks=c(-50,0,50))
myTSNEPlotAlpha(dat.filtered,color="factor(cluster)",shape="color",markers=lookupGeneName(dat.filtered,spectral_diff_test_sigGenes),scaled=T) + scale_color_brewer(palette="Set1") + scale_x_continuous(breaks=c(-50,0,50)) + scale_y_continuous(breaks=c(-50,0,50))
plot_genes_jitter(dat.filtered[spectral_diff_test_sigGenes,],color="factor(cluster)",grouping="factor(cluster)",cell_size=2,ncol=16,plot_trend=TRUE) + scale_color_brewer(palette="Set1")
dev.off()

# hsigGenes<-annHeatmap(vstExprs(dat.filtered[spectral_diff_test_sigGenes,]),
#                col=colorRampPalette(c("steelblue","white","red")),
#                #dendrogram = list(distfun=function(x){as.dist(1-cosine(t(x)))}),
#                dendrogram = list(clustfun=hclust2,distfun=function(x){as.dist(cummeRbund::JSdist(t(x)))}),
#                cluster=list(cuth=.325),
#                scale="row",
#                labels=list(Row=list(labels=fData(dat.filtered[spectral_diff_test_sigGenes,])$gene_short_name)),
#                ann=pData(dat.filtered[spectral_diff_test_sigGenes,])[,c("color","pool","cluster","Total_mRNAs","total_mass","num_genes_expressed")]
#                )
heatmap_data<-vstExprs(dat.filtered[spectral_diff_test_sigGenes,])
heatmap_annotation<-pData(dat.filtered[spectral_diff_test_sigGenes,])[,c("color","cluster","pool","Total_mRNAs","total_mass","num_genes_expressed")]
heatmap_annotation$cluster<-factor(heatmap_annotation$cluster) 
heatmap_colors<-list(
color = c(grn="darkgreen", redgrn="firebrick"),
pool = c(NTSP3="grey", NTSP4 = "black"),
cluster = c("1"="darkred","2"="steelblue")
)


pdf("kmeans_sigGenes_heatmap.pdf",width=8,height=8)
pheatmap(heatmap_data,
               scale="row",
               show_rownames=FALSE,
               show_colnames=FALSE,
               annotation_col=heatmap_annotation,
               breaks=seq(-3,3,length=100),
               drop_levels=FALSE,
               annotation_colors=heatmap_colors
               )
dev.off()

pdf("celltype_sigGenes_corrmap.pdf",width=16,height=16)
myCorheatmap(dat.filtered[spectral_diff_test_sigGenes,])
#myCorheatmap(dat.filtered[spectral_diff_test_sigGenes,pData(dat.filtered)$cluster==1]) + ggtitle("VPM/POM")
#myCorheatmap(dat.filtered[spectral_diff_test_sigGenes,pData(dat.filtered)$cluster==2]) + ggtitle("VPM")
dev.off()

```

# Correlated gene network identification (WGCNA)
Actually, were not going to learn modules from the EDP data...
```{r wgcna,eval=FALSE}
require(flashClust)
disableWGCNAThreads()

#Remove num_genes_expressed and 
FM<-vstExprs(dat.filtered[expressed_genes,])

datExpr<-t(as.matrix(FM))
goodSamplesGenes(datExpr)

sampleTree <- flashClust(dist(datExpr), method = "average");

plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)

cutHeight=108

abline(h = cutHeight, col = "red");

clust = cutreeStatic(sampleTree, cutHeight = cutHeight, minSize = 10)
table(clust)

keepSamples = (clust==1)
datExpr = datExpr[keepSamples,]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)

# Trait (phenotype) data
datTraits <- pData(dat.filtered[,keepSamples])
#datTraits<-datTraits[,c("color","kmeans_tSNE_cluster","pool")]
#datTraits$color<-as.character(datTraits$color)
#datTraits$color[datTraits$color=="grn"]<-"darkgreen"
#datTraits$color[datTraits$color=="redgrn"]<-"red"
#datTraits$pool<-as.character(datTraits$pool)
#datTraits$pool[datTraits$pool=="NTSP3"]<-"black"
#datTraits$pool[datTraits$pool=="NTSP4"]<-"grey50"

#datTraits$kmeans_tSNE_cluster[datTraits$kmeans_tSNE_cluster == 1]<-celltype_colors[1]
#datTraits$kmeans_tSNE_cluster[datTraits$kmeans_tSNE_cluster == 2]<-celltype_colors[2]

# Add PCA
datTraits<-cbind(datTraits,dat.pca.post$x[rownames(datTraits),1:10])

powers = c(c(1:11), seq(from = 12, to=20, by=2))
#sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
#sft = pickSoftThreshold(datExpr,dataIsExpr = TRUE,powerVector = powers,corFnc = cor,corOptions = list(use = 'p'),networkType = "signed")
sft = pickSoftThreshold(datExpr,dataIsExpr = TRUE,powerVector = powers,corFnc = cor, corOptions = list(use = 'p'), networkType = "signed")

# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2 (not p)",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")

# Choosing a power of X based on Scale independence plot and 0.9 threshold
softPower = 11
adjacency = adjacency(datExpr, power = softPower,type="signed");


```

```{r ExpandedAnalysis, echo=TRUE,eval=FALSE}
# Turn adjacency into topological overlap
#TOM = TOMsimilarity(adjacency,TOMType = "signed", networkType="signed");

# OR make Topological overlap directly from normalized expression data
TOM=TOMsimilarityFromExpr(datExpr,networkType = "signed", TOMType = "signed", power = softPower);

dissTOM = 1-TOM

# Call the hierarchical clustering function
geneTree = flashClust(as.dist(dissTOM), method = "average");

# Plot the resulting clustering tree (dendrogram)

plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity");

# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 3, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods)

# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)

# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors, softPower=softPower)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result

plot(METree, main = "Clustering of module eigengenes",xlab = "", sub = "")


MEDissThres = 0.1
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;

#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),c("Dynamic Tree Cut", "Merged dynamic"),dendroLabels = FALSE, hang = 0.03,addGuide = TRUE, guideHang = 0.05)

# Rename to moduleColors
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs

MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");

```

```{r merged_modules_dendro}
# Plot the result

plot(METree, main = "Clustering of merged module eigengenes",xlab = "", sub = "")

pdf("Module_eigengene_relationships.pdf",width=8,height=8)
plotEigengeneNetworks(MEs,setLabels=pData(dat.filtered)$celltype, xLabelsAngle = 90,marHeatmap = c(3,4,2,2))
dev.off()
```


```{r Module_exploration,echo=TRUE,eval=TRUE}
MEs <- orderMEs(MEs)
interestingCols<-c("label_fixed","total_mass","SeqRound","Day","hemisphere_fixed","animal","hemi_wrt_whisker_pull","sex","plate","well","Total_mRNAs","num_genes_expressed","celltype",paste("PC",seq(1:10),sep=""))
datTraitsFactor<-datTraits[keepSamples,interestingCols]
datTraitsFactor$label_fixed<-as.numeric(as.factor(datTraits$label_fixed))
datTraitsFactor$single_label<-FALSE
datTraitsFactor$single_label[pData(dat.filtered[,keepSamples])$label_fixed=="single"]<-TRUE
datTraitsFactor$single_label<-as.numeric(datTraitsFactor$single_label)
datTraitsFactor$double_label<-FALSE
datTraitsFactor$double_label[pData(dat.filtered[,keepSamples])$label_fixed=="double"]<-TRUE
datTraitsFactor$double_label<-as.numeric(datTraitsFactor$double_label)
datTraitsFactor$celltype<-as.numeric(as.factor(datTraits$celltype))
datTraitsFactor$celltype1<-FALSE
datTraitsFactor$celltype1[pData(dat.filtered[,keepSamples])$celltype=="1"]<-TRUE
datTraitsFactor$celltype2<-FALSE
datTraitsFactor$celltype2[pData(dat.filtered[,keepSamples])$celltype=="2"]<-TRUE
datTraitsFactor$animal<-as.numeric(as.factor(datTraits$animal))
datTraitsFactor$hemi_wrt_whisker_pull<-as.numeric(as.factor(datTraits$hemi_wrt_whisker_pull))
datTraitsFactor$Size_Factor<-pData(dat.filtered[,keepSamples])$Size_Factor
datTraitsFactor$SeqRound<-as.numeric(as.factor(datTraits$SeqRound))
datTraitsFactor$hemisphere_fixed<-as.numeric(as.factor(datTraits$hemisphere_fixed))
datTraitsFactor$sex<-as.numeric(as.factor(datTraits$sex))
datTraitsFactor$plate<-as.numeric(as.factor(datTraits$plate))
datTraitsFactor$Day<-as.numeric(as.factor(datTraits$Day))
datTraitsFactor$well<-as.numeric(as.factor(datTraits$well))
#datTraitsFactor<-cbind(datTraitsFactor,dat.pca$x[rownames(datTraitsFactor),1:10])


moduleTraitCor <- cor(MEs, datTraitsFactor)
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)

# Relationship between learned gene co-expression modules and parameterizations
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraitsFactor),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))

pdf("Module_trait_relationships.pdf",width=20,height=12)
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraitsFactor),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
dev.off()

modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));

names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");

geneTraitSignificance = as.data.frame(cor(datExpr, datTraitsFactor[,2], use = "p")); # This implictly defines correlation to cell type
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));

names(geneTraitSignificance) = paste("GS.celltype", sep="");
names(GSPvalue) = paste("p.GS.celltype", sep="");

```

```{r clusterProfiler_on_modules,fig.width=18,fig.height=10}
require(clusterProfiler)
moduleGeneSets<-lapply(modNames,function(module){
column = match(module, modNames)
moduleGenes = moduleColors==module
rownames(geneModuleMembership[moduleGenes,])
})
names(moduleGeneSets)<-modNames

save.xlsx("module_genes.xlsx",lapply(moduleGeneSets,function(x){lookupGeneName(dat,x)}),row.names=F,col.names=F)

moduleGeneSets.trimmed<-lapply(moduleGeneSets,function(x){
  str_split_fixed(x,"\\.",2)[,1]
})

moduleGeneSets.Entrez<-lapply(moduleGeneSets.trimmed,function(x){
  bitr(x,fromType="ENSEMBL",toType="ENTREZID",annoDb="org.Mm.eg.db")$ENTREZID
})

ck<-compareCluster(geneCluster=moduleGeneSets.Entrez,fun="enrichKEGG",organism="mmu",pvalueCutoff = 0.1)
plot(ck,showCategory=10)+ggtitle("KEGG geneset enrichment by module")

cg.mf<-compareCluster(geneCluster=moduleGeneSets.Entrez,fun="enrichGO",organism="mouse",pvalueCutoff = 0.01,ont="MF")
# plot(cg.mf,showCategory=10)+ggtitle("GO MF geneset enrichment by module")
# 
cg.bp<-compareCluster(geneCluster=moduleGeneSets.Entrez,fun="enrichGO",organism="mouse",pvalueCutoff = 0.01,ont="BP")
# plot(cg.bp,showCategory=10)+ggtitle("GO BP geneset enrichment by module")

cg.cc<-compareCluster(geneCluster=moduleGeneSets.Entrez,fun="enrichGO",organism="mouse",pvalueCutoff = 0.01,ont="CC")
# plot(cg.cc,showCategory=10)+ggtitle("GO CC geneset enrichment by module")
require(ReactomePA)
cr<-compareCluster(geneCluster=moduleGeneSets.Entrez,fun="enrichPathway",organism="mouse",pvalueCutoff = 0.1)
plot(cr,showCategory=10)+ggtitle("Reactome geneset enrichment by module")

pdf("module_geneset_enrichments.pdf",width=18,height=18)
plot(ck,showCategory=20)+ggtitle("KEGG geneset enrichment by module")
plot(cr,showCategory=20)+ggtitle("Reactome geneset enrichment by module")
plot(cg.mf,showCategory=20)+ggtitle("GO MF geneset enrichment by module")
plot(cg.bp,showCategory=20)+ggtitle("GO BP geneset enrichment by module")
plot(cg.cc,showCategory=20)+ggtitle("GO CC geneset enrichment by module")
dev.off()

```

# Within cell types
This is a throwback from the original anaysis....not being done here.
## Within VPM/POM cell type (cluster 1)
```{r GSEA_celltype_1}
dat.filtered.celltype1<-dat.filtered[,pData(dat.filtered)$cluster==1]

dat.filtered.celltype1<-estimateSizeFactors(dat.filtered.celltype1)
dat.filtered.celltype1<-estimateDispersions(dat.filtered.celltype1,cores=8)

#All detectably expressed genes in celltype 1
dat.filtered.celltype1<-detectGenes(dat.filtered.celltype1,min_expr=0.5)
numCellThreshold<-10 # Maybe lower this
celltype1.expressed_genes<-row.names(subset(fData(dat.filtered.celltype1),num_cells_expressed >= numCellThreshold))

dat.filtered.celltype1<-dat.filtered.celltype1[celltype1.expressed_genes,]

#NTSP3
dat.filtered.celltype1.ntsp3<-dat.filtered.celltype1[,pData(dat.filtered.celltype1)$pool == "NTSP3"]

dat.filtered.celltype1.ntsp3<-detectGenes(dat.filtered.celltype1.ntsp3,min_expr=0.5)

numCellThreshold<-10 # Maybe lower this
celltype1.ntsp3.expressed_genes<-row.names(subset(fData(dat.filtered.celltype1.ntsp3),num_cells_expressed >= numCellThreshold))

dat.filtered.celltype1.ntsp3<-dat.filtered.celltype1.ntsp3[celltype1.ntsp3.expressed_genes,]


fData(dat.filtered.celltype1.ntsp3)$mean_expr<-apply(round(exprs(dat.filtered.celltype1.ntsp3)),1,mean)
fData(dat.filtered.celltype1.ntsp3)$sd_expr<-apply(round(exprs(dat.filtered.celltype1.ntsp3)),1,sd)
fData(dat.filtered.celltype1.ntsp3)$bcv<-(fData(dat.filtered.celltype1.ntsp3)$sd_expr/fData(dat.filtered.celltype1.ntsp3)$mean_expr)**2
fData(dat.filtered.celltype1.ntsp3)$percent_detection<-(fData(dat.filtered.celltype1.ntsp3)$num_cells_expressed/dim(dat.filtered.celltype1.ntsp3)[2])*100

#NTSP4
dat.filtered.celltype1.ntsp4<-dat.filtered.celltype1[,pData(dat.filtered.celltype1)$pool == "NTSP4"]

dat.filtered.celltype1.ntsp4<-detectGenes(dat.filtered.celltype1.ntsp4,min_expr=0.5)

numCellThreshold<-10 # Maybe lower this
celltype1.ntsp4.expressed_genes<-row.names(subset(fData(dat.filtered.celltype1.ntsp4),num_cells_expressed >= numCellThreshold))

dat.filtered.celltype1.ntsp4<-dat.filtered.celltype1.ntsp4[celltype1.ntsp4.expressed_genes,]


fData(dat.filtered.celltype1.ntsp4)$mean_expr<-apply(round(exprs(dat.filtered.celltype1.ntsp4)),1,mean)
fData(dat.filtered.celltype1.ntsp4)$sd_expr<-apply(round(exprs(dat.filtered.celltype1.ntsp4)),1,sd)
fData(dat.filtered.celltype1.ntsp4)$bcv<-(fData(dat.filtered.celltype1.ntsp4)$sd_expr/fData(dat.filtered.celltype1.ntsp4)$mean_expr)**2
fData(dat.filtered.celltype1.ntsp4)$percent_detection<-(fData(dat.filtered.celltype1.ntsp4)$num_cells_expressed/dim(dat.filtered.celltype1.ntsp4)[2])*100


fData(dat.filtered.celltype1)$mean_expr<-apply(round(exprs(dat.filtered.celltype1)),1,mean)
fData(dat.filtered.celltype1)$sd_expr<-apply(round(exprs(dat.filtered.celltype1)),1,sd)
fData(dat.filtered.celltype1)$bcv<-(fData(dat.filtered.celltype1)$sd_expr/fData(dat.filtered.celltype1)$mean_expr)**2
fData(dat.filtered.celltype1)$percent_detection<-(fData(dat.filtered.celltype1)$num_cells_expressed/dim(dat.filtered.celltype1)[2])*100



###############
# Cubic spline Fit
###############
#NTSP3
bcv.fit.gaussian.ntsp3.celltype1<-mgcv::gam(log2(bcv)~s(log2(mean_expr),bs="cs"),data=fData(dat.filtered.celltype1.ntsp3))


#NTSP4
bcv.fit.gaussian.ntsp4.celltype1<-mgcv::gam(log2(bcv)~s(log2(mean_expr),bs="cs"),data=fData(dat.filtered.celltype1.ntsp4))

# Resid > cutoff
celltype1.resid_cutoff<-1.0

high_bcv_genes.celltype1.ntsp3<-rownames(fData(dat.filtered.celltype1.ntsp3)[which(resid(bcv.fit.gaussian.ntsp3.celltype1) > celltype1.resid_cutoff),])
high_bcv_genes.celltype1.ntsp4<-rownames(fData(dat.filtered.celltype1.ntsp4)[which(resid(bcv.fit.gaussian.ntsp4.celltype1) > celltype1.resid_cutoff),])

celltype1.high_bcv_genes.merged<-intersect(high_bcv_genes.celltype1.ntsp3,high_bcv_genes.celltype1.ntsp4) 

fData(dat.filtered.celltype1.ntsp3)$high_bcv<-FALSE
fData(dat.filtered.celltype1.ntsp3)$high_bcv[fData(dat.filtered.celltype1.ntsp3)$gene_id %in% celltype1.high_bcv_genes.merged]<-TRUE

fData(dat.filtered.celltype1.ntsp4)$high_bcv<-FALSE
fData(dat.filtered.celltype1.ntsp4)$high_bcv[fData(dat.filtered.celltype1.ntsp4)$gene_id %in% celltype1.high_bcv_genes.merged]<-TRUE

p.celltype1.ntsp3.high_var<-ggplot(fData(dat.filtered.celltype1.ntsp3))
p.celltype1.ntsp3.high_var<-p.celltype1.ntsp3.high_var +
  geom_point(aes(x=log2(mean_expr),y=log2(bcv),color=high_bcv),alpha=0.5,size=0.4) +
  scale_color_manual(values=c('blue','red')) +
  geom_smooth(aes(x=log2(mean_expr),y=log2(bcv)),color="black",method="auto",se=TRUE) + 
  geom_text(aes(x=log2(mean_expr),y=log2(bcv),label=gene_short_name),color="darkred",size=4,data=subset(fData(dat.filtered.celltype1.ntsp3),gene_id %in% celltype1.high_bcv_genes.merged)) +
  ggtitle("NTSP3 - Celltype1") + 
  theme_bw() + coord_equal(1)

p.celltype1.ntsp4.high_var<-ggplot(fData(dat.filtered.celltype1.ntsp4))
p.celltype1.ntsp4.high_var<-p.celltype1.ntsp4.high_var +
  geom_point(aes(x=log2(mean_expr),y=log2(bcv),color=high_bcv),alpha=0.5,size=0.4) +
  scale_color_manual(values=c('blue','red')) +
  geom_smooth(aes(x=log2(mean_expr),y=log2(bcv)),color="black",method="auto",se=TRUE) + 
  geom_text(aes(x=log2(mean_expr),y=log2(bcv),label=gene_short_name),color="darkred",size=4,data=subset(fData(dat.filtered.celltype1.ntsp4),gene_id %in% celltype1.high_bcv_genes.merged)) +
  ggtitle("NTSP4 - Celltype1") + 
  theme_bw() + coord_equal(1)

grid.arrange(p.celltype1.ntsp3.high_var,p.celltype1.ntsp4.high_var,ncol=2)

#dat.filtered.celltype1.pca<-prcomp(t(log2(exprs(dat.filtered.celltype1[celltype1.high_bcv_genes.merged,])+1)),center=T,scale=T)
#dat.filtered.tsne<-tsne(dat.pca$x[,1:nComponents],perplexity=40,max_iter=2500)

#############
# Correlation Analysis
#############
#celltype1.genecor<-cor(t(log10(exprs(dat.filtered.celltype1[celltype1.high_bcv_genes.merged,])+1)),t(log10(exprs(dat.filtered.celltype1[celltype1.expressed_genes,])+1)))

celltype1.genecor<-cor(t(vstExprs(dat.filtered.celltype1[celltype1.high_bcv_genes.merged,])),t(vstExprs(dat.filtered.celltype1[celltype1.expressed_genes,])),method="pearson")

plot(density(apply(celltype1.genecor,2,function(x){max(abs(min(x)),max(x))}),na.rm=T))
cor_cutoff<-0.4
celltype1.correlated.high_var.genes<-names(apply(celltype1.genecor,2,function(x){max(abs(min(x)),max(x))}) > cor_cutoff)[apply(celltype1.genecor,2,function(x){max(abs(min(x)),max(x))}) > cor_cutoff]
celltype1.correlated.high_var.genes<-celltype1.correlated.high_var.genes[!is.na(celltype1.correlated.high_var.genes)]
celltype1.correlated.high_var.genes<-celltype1.correlated.high_var.genes[!celltype1.correlated.high_var.genes %in% lookupGeneId(dat,"Yam1")]
# Filter out genes that are not correlated with more than nCorr genes above cor_cutoff
nCorr<-2
celltype1.network.genes<-names(which(apply(celltype1.genecor,1,function(x){sum(x<1 & abs(x)>cor_cutoff)>=nCorr})))


#myCorheatmap(dat.filtered.celltype1[celltype1.high_bcv_genes.merged,]) + ggtitle("VPM/POM")

pdf('Celltype1_correlation_matrix.pdf',width=50,height=50)
tmp<-myCorheatmap(dat.filtered.celltype1[celltype1.correlated.high_var.genes,],addrect=7,logMode=F) + ggtitle("VPM/POM")
#myCorheatmap(dat.filtered.celltype1[celltype1.network.genes,],addrect=5,order="hclust") + ggtitle("VPM/POM")
dev.off()
```

## Within VPM cell type (cluster 2)
```{r GSEA_celltype_2}
dat.filtered.celltype2<-dat.filtered[,pData(dat.filtered)$cluster==2]

dat.filtered.celltype2<-estimateSizeFactors(dat.filtered.celltype2)
dat.filtered.celltype2<-estimateDispersions(dat.filtered.celltype2,cores=8)

#All detectably expressed genes in celltype 2
dat.filtered.celltype2<-detectGenes(dat.filtered.celltype2,min_expr=0.5)
numCellThreshold<-10 # Maybe lower this
celltype2.expressed_genes<-row.names(subset(fData(dat.filtered.celltype2),num_cells_expressed >= numCellThreshold))

dat.filtered.celltype2<-dat.filtered.celltype2[celltype2.expressed_genes,]

#NTSP3
dat.filtered.celltype2.ntsp3<-dat.filtered.celltype2[,pData(dat.filtered.celltype2)$pool == "NTSP3"]

dat.filtered.celltype2.ntsp3<-detectGenes(dat.filtered.celltype2.ntsp3,min_expr=0.5)

numCellThreshold<-10 # Maybe lower this
celltype2.ntsp3.expressed_genes<-row.names(subset(fData(dat.filtered.celltype2.ntsp3),num_cells_expressed >= numCellThreshold))

dat.filtered.celltype2.ntsp3<-dat.filtered.celltype2.ntsp3[celltype2.ntsp3.expressed_genes,]


fData(dat.filtered.celltype2.ntsp3)$mean_expr<-apply(round(exprs(dat.filtered.celltype2.ntsp3)),1,mean)
fData(dat.filtered.celltype2.ntsp3)$sd_expr<-apply(round(exprs(dat.filtered.celltype2.ntsp3)),1,sd)
fData(dat.filtered.celltype2.ntsp3)$bcv<-(fData(dat.filtered.celltype2.ntsp3)$sd_expr/fData(dat.filtered.celltype2.ntsp3)$mean_expr)**2
fData(dat.filtered.celltype2.ntsp3)$percent_detection<-(fData(dat.filtered.celltype2.ntsp3)$num_cells_expressed/dim(dat.filtered.celltype2.ntsp3)[2])*100

#NTSP4
dat.filtered.celltype2.ntsp4<-dat.filtered.celltype2[,pData(dat.filtered.celltype2)$pool == "NTSP4"]

dat.filtered.celltype2.ntsp4<-detectGenes(dat.filtered.celltype2.ntsp4,min_expr=0.5)

numCellThreshold<-10 # Maybe lower this
celltype2.ntsp4.expressed_genes<-row.names(subset(fData(dat.filtered.celltype2.ntsp4),num_cells_expressed >= numCellThreshold))

dat.filtered.celltype2.ntsp4<-dat.filtered.celltype2.ntsp4[celltype2.ntsp4.expressed_genes,]


fData(dat.filtered.celltype2.ntsp4)$mean_expr<-apply(round(exprs(dat.filtered.celltype2.ntsp4)),1,mean)
fData(dat.filtered.celltype2.ntsp4)$sd_expr<-apply(round(exprs(dat.filtered.celltype2.ntsp4)),1,sd)
fData(dat.filtered.celltype2.ntsp4)$bcv<-(fData(dat.filtered.celltype2.ntsp4)$sd_expr/fData(dat.filtered.celltype2.ntsp4)$mean_expr)**2
fData(dat.filtered.celltype2.ntsp4)$percent_detection<-(fData(dat.filtered.celltype2.ntsp4)$num_cells_expressed/dim(dat.filtered.celltype2.ntsp4)[2])*100

fData(dat.filtered.celltype2)$mean_expr<-apply(round(exprs(dat.filtered.celltype2)),1,mean)
fData(dat.filtered.celltype2)$sd_expr<-apply(round(exprs(dat.filtered.celltype2)),1,sd)
fData(dat.filtered.celltype2)$bcv<-(fData(dat.filtered.celltype2)$sd_expr/fData(dat.filtered.celltype2)$mean_expr)**2
fData(dat.filtered.celltype2)$percent_detection<-(fData(dat.filtered.celltype2)$num_cells_expressed/dim(dat.filtered.celltype2)[2])*100



###############
# Cubic spline Fit
###############
#NTSP3
bcv.fit.gaussian.ntsp3.celltype2<-mgcv::gam(log2(bcv)~s(log2(mean_expr),bs="cs"),data=fData(dat.filtered.celltype2.ntsp3))


#NTSP4
bcv.fit.gaussian.ntsp4.celltype2<-mgcv::gam(log2(bcv)~s(log2(mean_expr),bs="cs"),data=fData(dat.filtered.celltype2.ntsp4))

# Resid > cutoff
celltype2.resid_cutoff<-1.0

high_bcv_genes.celltype2.ntsp3<-rownames(fData(dat.filtered.celltype2.ntsp3)[which(resid(bcv.fit.gaussian.ntsp3.celltype2) > celltype2.resid_cutoff),])
high_bcv_genes.celltype2.ntsp4<-rownames(fData(dat.filtered.celltype2.ntsp4)[which(resid(bcv.fit.gaussian.ntsp4.celltype2) > celltype2.resid_cutoff),])

celltype2.high_bcv_genes.merged<-intersect(high_bcv_genes.celltype2.ntsp3,high_bcv_genes.celltype2.ntsp4) 

fData(dat.filtered.celltype2.ntsp3)$high_bcv<-FALSE
fData(dat.filtered.celltype2.ntsp3)$high_bcv[fData(dat.filtered.celltype2.ntsp3)$gene_id %in% celltype2.high_bcv_genes.merged]<-TRUE

fData(dat.filtered.celltype2.ntsp4)$high_bcv<-FALSE
fData(dat.filtered.celltype2.ntsp4)$high_bcv[fData(dat.filtered.celltype2.ntsp4)$gene_id %in% celltype2.high_bcv_genes.merged]<-TRUE




#dat.filtered.tsne<-tsne(dat.pca$x[,1:nComponents],perplexity=40,max_iter=2500)


#############
# Correlation Analysis
#############
#celltype2.genecor<-cor(t(log10(exprs(dat.filtered.celltype2[celltype2.high_bcv_genes.merged,])+1)),t(log10(exprs(dat.filtered.celltype2[celltype2.expressed_genes,])+1)))

celltype2.genecor<-cor(t(vstExprs(dat.filtered.celltype2[celltype2.high_bcv_genes.merged,])),t(vstExprs(dat.filtered.celltype2[celltype2.expressed_genes,])),method="pearson")

plot(density(apply(celltype2.genecor,2,function(x){max(abs(min(x)),max(x))}),na.rm=T))
cor_cutoff<-0.55
celltype2.correlated.high_var.genes<-names(apply(celltype2.genecor,2,function(x){max(abs(min(x)),max(x))}) > cor_cutoff)[apply(celltype2.genecor,2,function(x){max(abs(min(x)),max(x))}) > cor_cutoff]
celltype2.correlated.high_var.genes<-celltype2.correlated.high_var.genes[!is.na(celltype2.correlated.high_var.genes)]
celltype2.correlated.high_var.genes<-celltype2.correlated.high_var.genes[!celltype2.correlated.high_var.genes %in% lookupGeneId(dat,"Yam1")]
# Filter out genes that are not correlated with more than nCorr genes above cor_cutoff
nCorr<-2
celltype2.network.genes<-names(which(apply(celltype2.genecor,1,function(x){sum(x<1 & abs(x)>cor_cutoff)>=nCorr})))


#myCorheatmap(dat.filtered.celltype2[celltype2.high_bcv_genes.merged,]) + ggtitle("VPM")

pdf('Celltype2_correlation_matrix.pdf',width=50,height=50)
myCorheatmap(dat.filtered.celltype2[celltype2.correlated.high_var.genes,],addrect=6,logMode=F) + ggtitle("VPM-only")
#myCorheatmap(dat.filtered.celltype2[celltype2.network.genes,],addrect=5,order="hclust") + ggtitle("VPM/POM")
dev.off()
```

```{r compare_variation_between_celltypes}
fData(dat.filtered.celltype1)$celltype<-1
fData(dat.filtered.celltype2)$celltype<-2
all_celltype_fData<-rbind(fData(dat.filtered.celltype1),fData(dat.filtered.celltype2))

p<-ggplot(all_celltype_fData) +
  #geom_point(aes(x=log10(mean_expr+1),y=log10(bcv),color=factor(celltype))) + 
  geom_smooth(aes(x=log10(mean_expr+1),y=log10(bcv),color=factor(celltype))) +
  #geom_histogram(aes(x=log10(bcv+1),fill=factor(celltype)),position="dodge") + 
  #geom_density(aes(x=log10(bcv+1),fill=factor(celltype)), alpha=0.3) + 
  scale_color_manual(values=celltype_colors) +
  scale_fill_manual(values=celltype_colors) +
  monocle:::monocle_theme_opts() 
p
```


```{r Gabra_genes}
Gabr_genes<-fData(dat.filtered)$gene_short_name[grepl("^Gab",fData(dat.filtered)$gene_short_name)]

DE_gabr_genes<-c("Gabpa","Gabra5","Gabrb1","Gabrg3")

pdf("Gaba_receptors_DE.pdf")
myTSNEPlotAlpha(dat.filtered,markers=DE_gabr_genes,color="factor(cluster)",scale=T) + monocle:::monocle_theme_opts() + guides(color = guide_legend(title = "Cell type")) + coord_equal(1)
dev.off()


```

# GSEA on differentially expressed genes
```{r celltype_GSEA}


# Using 1% FDR for GO enrichments
spectral_diff_test_sigGenes_entrez<-bitr(str_split_fixed(rownames(spectral_diff_test_res[spectral_diff_test_res$qval <=0.001,]),"\\.",2)[,1], fromType="ENSEMBL", toType="ENTREZID", annoDb="org.Mm.eg.db")

sigGenes_MF<-enrichGO(gene          = spectral_diff_test_sigGenes_entrez$ENTREZID,
                organism      = "mouse",
                ont           = "MF",
                pAdjustMethod = "BH",
                pvalueCutoff  = 0.01,
                qvalueCutoff  = 0.05,
                readable      = TRUE)

sigGenes_BP<-enrichGO(gene          = spectral_diff_test_sigGenes_entrez$ENTREZID,
                organism      = "mouse",
                ont           = "BP",
                pAdjustMethod = "BH",
                pvalueCutoff  = 0.01,
                qvalueCutoff  = 0.05,
                readable      = TRUE)

sigGenes_CC<-enrichGO(gene          = spectral_diff_test_sigGenes_entrez$ENTREZID,
                organism      = "mouse",
                ont           = "CC",
                pAdjustMethod = "BH",
                pvalueCutoff  = 0.01,
                qvalueCutoff  = 0.05,
                readable      = TRUE)

sigGenes_Pathway<-enrichPathway(gene=spectral_diff_test_sigGenes_entrez$ENTREZID,
                                pvalueCutoff=0.01,
                                qvalueCutoff = 0.05,
                                organism = "mouse",
                                pAdjustMethod="BH",
                                readable=T)

# Add Fold change between celltype1 and celltype2 for some vis
psigGenes.MF<-dotplot(sigGenes_MF, showCategory=40) + ggtitle("GO Molecular Function")
psigGenes.BP<-dotplot(sigGenes_BP, showCategory=40) + ggtitle("GO Biological Process")
psigGenes.CC<-dotplot(sigGenes_CC, showCategory=40) + ggtitle("GO Cellular Component")
psigGenes.pathway<-dotplot(sigGenes_Pathway, showCategory=40) + ggtitle("Reactome")

pdf("GO_enrichemnt_0.1_percent_FDR.pdf",width=25,height=20)
grid.arrange(psigGenes.MF,psigGenes.BP,psigGenes.CC,psigGenes.pathway,nrow=2)
dev.off()

```

```{r correlation_btwn_identity_and_activity}

```

```{r monocle_celltype1}
####################
#Drop into Monocle workflow
###################

dat.filtered.celltype1<-setOrderingFilter(dat.filtered.celltype1,celltype1.high_bcv_genes.merged)

dat.filtered.celltype1<-reduceDimension(dat.filtered.celltype1,residualModelFormulaStr="~pool+num_genes_expressed",method="DDRTree",ncenter=10,dimensions=2)

dat.filtered.celltype1<-orderCells(dat.filtered.celltype1)

root_state=1
dat.filtered.celltype1<-orderCells(dat.filtered.celltype1,root_state=root_state)
plot_spanning_tree(dat.filtered.celltype1,markers=c("Fos","Bdnf","Dusp1","Prss12","Rcan2","Pantr1"),color="State")
plot_genes_in_pseudotime(dat.filtered.celltype1[lookupGeneId(dat,c("Fos","Bdnf","Pantr1","Prss12","Brinp3","Lamp5"))], color_by = "State",ncol=2)

#celltype2.high_var.diff_test_res <- differentialGeneTest(dat.filtered.celltype2[celltype2.ntsp3.expressed_genes,], fullModelFormulaStr = "~pool+num_genes_expressed+sm.ns(Pseudotime,df=3)",reducedModelFormulaStr="~pool+num_genes_expressed",cores=8)

#celltype2.high_var.diff.sigGenes <- rownames(celltype2.high_var.diff_test_res[celltype2.high_var.diff_test_res$qval <=0.1,])

#plot_genes_in_pseudotime(dat.filtered.celltype2[celltype2.high_var.diff.sigGenes,],cell_size=2,ncol=3,color_by="Pseudotime")
```

```{r finding_a_good_summary_statistic}
tmpGene<-sample(spectral_diff_test_sigGenes,1)
tmp.full.model<-fitModel(dat.filtered[tmpGene,],modelFormulaStr="~pool+num_genes_expressed+cluster")
summary(tmp.full.model[[1]])
tmp.reduced.model<-fitModel(dat.filtered[tmpGene,],modelFormulaStr="~pool+num_genes_expressed")
lrt<-VGAM::lrtest(tmp.full.model[[1]],tmp.reduced.model[[1]])
lrt
fData(dat.filtered[tmpGene,])[,c("gene_short_name","log2_fc")]
```

```{r differential_variation}
#Celltype 1 Pool NTSP3 summary 
index<-pData(dat.filtered)$cluster==1 & pData(dat.filtered)$pool == "NTSP3"
fData(dat.filtered)$c1p3_mean_expr<-apply(round(exprs(dat.filtered[,index])),1,mean)
fData(dat.filtered)$c1p3_sd_expr<-apply(round(exprs(dat.filtered[,index])),1,sd)
fData(dat.filtered)$c1p3_bcv<-(fData(dat.filtered)$c1p3_sd_expr/fData(dat.filtered)$c1p3_mean_expr)**2

#Celltype 2 Pool NTSP3 summary 
index<-pData(dat.filtered)$cluster==2 & pData(dat.filtered)$pool == "NTSP3"
fData(dat.filtered)$c2p3_mean_expr<-apply(round(exprs(dat.filtered[,index])),1,mean)
fData(dat.filtered)$c2p3_sd_expr<-apply(round(exprs(dat.filtered[,index])),1,sd)
fData(dat.filtered)$c2p3_bcv<-(fData(dat.filtered)$c2p3_sd_expr/fData(dat.filtered)$c2p3_mean_expr)**2



```


# Session Information
```{r sessionInfo}
sessionInfo()
```

